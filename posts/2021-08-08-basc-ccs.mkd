---
title: A Bayesian Alternative to Synthetic Control Comparative Case Studies in Python with PyMC3
tags: PyMC3, Causal Inference, Bayesian Statistics, Python
---

Recently I had cause to be perusing [Yiqing Xu's research](https://yiqingxu.org/research/) and dove deep into the 2020 paper _A Bayesian Alternative to Synthetic Control for Comparative Case Studies_^[Pang, Xun, Licheng Liu, and Yiqing Xu. "A Bayesian alternative to synthetic control for comparative case studies." [_Available at SSRN_](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3649226#) (2020).] (BASC-CCS from now on).  In an effort to better understand the method introduced in this paper, I decided to replicate (most of) the results form the simulation study described in Sections 4.1 and A.4.1 in Python using PyMC3.

BASC-CCS uses [time series cross sectional data](https://en.wikipedia.org/wiki/Cross-sectional_data) (TSCS) to infer causal effects from observational data where direct control of the treatment mechanism is not possible.  As such it falls under the umbrella of [causal inference methods](https://en.wikipedia.org/wiki/Causal_inference). More specifically, it uses the Bayesian approach that treats causal inference from observational data as a problem of imputing missing (control) data for treated units.

## Generate the Data

We begin by generating the data to be modeled. First we make the necessary Python imports and do some light housekeeping.


```python
%matplotlib inline
```


```python
from warnings import filterwarnings
```


```python
from aesara import tensor as at
import arviz as az
import matplotlib as mpl
from matplotlib import pyplot as plt
from matplotlib.lines import Line2D
import numpy as np
import pymc3 as pm
import scipy as sp
import seaborn as sns
import xarray as xr
```

    You are running the v4 development version of PyMC3 which currently still lacks key features. You probably want to use the stable v3 instead which you can either install via conda or find on the v3 GitHub branch: https://github.com/pymc-devs/pymc3/tree/v3



```python
filterwarnings('ignore', category=pm.ImputationWarning, module='pymc3')
```


```python
mpl.rcParams['figure.figsize'] = (8, 6)

sns.set(color_codes=True)
```

BASC-CCS is designed for TSCS where a number of units are observed over a period of time.  Following the BASC-CCS paper, we simulate data from $N = 50$ units over $T = 30$ time periods.


```python
N = 50
T = 30

t = np.arange(T)
```

In this simulation 10% of the units will be treated starting at time $T_{\mathrm{treat}} = 21$.


```python
T_treat = 21
P_treat = 0.1
```

Which units are treated will be determined by a linear combination of two unobserved latent factors, drawn from a standard normal distribution for each unit, $\Gamma_{i, 1}, \Gamma_{i, 2} \sim N(0, 1)$ (note that we use capital letters for simulated quantities and the corresponding lowercase letters for the corresponding inferred parameters).


```python
SEED = 12345 # for reproducibility

rng = np.random.default_rng(SEED)
```


```python
Γ = rng.normal(size=(N, 2))
```

Treatment is determined according to the variable

$$\mathrm{tr}_i = 0.7 \cdot \Gamma_{i, 1} + 0.3 \cdot \Gamma_{i, 2} + \varepsilon^{\Gamma}_i,$$

where $\varepsilon^{\Gamma}_i \sim N(0, 0.25).$


```python
tr = Γ.dot([0.7, 0.3]) + rng.normal(0., 0.5, size=N)
```

The five units with the largest values of $tr_i$ are treated.


```python
treat_crit = np.percentile(tr, 100 * (1. - P_treat))
treated = tr > treat_crit
```


```python
n_treated = treated.sum()

n_treated
```




```
5
```



The following plot shows the relationship between the latent values $\Gamma_i$ and which units are treated.


```python
CMAP = 'winter'
```


```python
fig, ax = plt.subplots(figsize=(8, 8))
ax.set_aspect('equal');


norm = plt.Normalize(tr.min(), tr.max())
sns.scatterplot(x=Γ[~treated, 0], y=Γ[~treated, 1], hue=tr[~treated],
                hue_norm=norm, palette=CMAP,
                label="Untreated", legend=False,
                ax=ax);
sns.scatterplot(x=Γ[treated, 0], y=Γ[treated, 1], hue=tr[treated],
                s=100, marker='s',
                hue_norm=norm, palette=CMAP,
                label="Treated", legend=False,
                ax=ax);

Γ_mult = 1.05
Γ_min, Γ_max = Γ_mult * Γ.min(), Γ_mult * Γ.max()
plot_Γ = np.linspace(Γ_min, Γ_max, 100)

ax.plot(plot_Γ, (treat_crit - 0.7 * plot_Γ) / 0.3,
        c='k', ls='--', label="Treatment threshold\n(noiseless)");

sm = plt.cm.ScalarMappable(norm=norm, cmap=CMAP)
cbar = fig.colorbar(sm)

ax.set_xlim(Γ_min, Γ_max);
ax.set_xlabel(r"$\Gamma_{i, 1}$");

ax.set_ylim(Γ_min, Γ_max);
ax.set_ylabel(r"$\Gamma_{i, 2}$");

cbar.set_label(r"$\mathrm{tr}_i$");
ax.legend(loc='upper left');
```


<center>![png](/resources/basc-ccs_files/basc-ccs_22_0.png)</center>


The inclusion of the noise term $\varepsilon^{\Gamma}_i$ causes some of the treated units to be below the treatment threshold line in this plot and some of the points above the treatment threshold line to not be treated.

We now generate $K = 10$ covariates for each unit, one of which is a constant intercept and the rest of which follow a standard normal distribution.


```python
K = 10
```


```python
X = np.empty((N, K))
X[:, 0] = 1.
X[:, 1:] = rng.normal(size=(N, K - 1))
```

Following the paper, the first $K_* = 4$ covariates influence the outcome, and the rest are uncorrelated with it.  The true regression coefficients, $B_j$ are taken from the BASC-CCS paper.


```python
K_star = 4
```


```python
B = np.zeros(K)
B[:K_star] = 3., 6., 4., 2.
```

The influence of each of the first $K_*$ covariates varies by unit, according to $A_{i, j} \sim N\left(0, \left(\frac{B_j}{2}\right)^2\right)$.


```python
A = np.zeros((N, K))
A[:, :K_star] = rng.normal(0., 0.5 * B[:K_star], size=(N, K_star))
```

The influence of these first $K_*$ covariates also varies over time according to an $AR(1)$ process $\Xi_{j, t}$ with autocorrelation of $0.6$ and standard normal innovations.


```python
def ar1(k, innov):
    t = np.arange(innov.shape[-1])
    expon = sp.linalg.toeplitz(t)
        
    return np.dot(innov, np.triu(np.power(k, expon)))
```


```python
innov_Ξ = rng.normal(size=(K_star, T))

Ξ = np.zeros((K, T))
Ξ[:K_star] = ar1(0.6, innov_Ξ)
```


```python
fig, ax = plt.subplots(figsize=(8, 6))

ax.plot(t, Ξ.T, c='k', alpha=0.75);

ax.set_xlabel("$t$");
ax.set_ylabel(r"$\Xi_{i, t}$");
```


<center>![png](/resources/basc-ccs_files/basc-ccs_34_0.png)</center>


The horizontal lines at zero here correspond to the $K - K_*$ covariates that have no influence on the outcome and do not vary over time.

The noise in outcomes is related to the latent parameters $\Gamma_i$ through factor loadings $F_t$, which also follow an $AR(1)$ process with autocorrelation of $0.7$ and standard normal innovations.


```python
innov_F = rng.normal(size=(2, T))

F = ar1(0.7, innov_F)
```


```python
fig, ax = plt.subplots(figsize=(8, 6))

ax.plot(t, F.T, c='k', alpha=0.75);

ax.set_xlabel("$t$");
ax.set_ylabel(r"$F_{i, t}$");
```


<center>![png](/resources/basc-ccs_files/basc-ccs_37_0.png)</center>


Finally, we simulate the treament effects, which are

$$
\Delta_{i, t} =
    \begin{cases}
        t - T_{\mathrm{treat}} + \varepsilon^{\mathrm{treat}}_{i, t} & \mathrm{if}\ t > T_{\mathrm{treat}} \\
        0 & \mathrm{if}\ t \leq T_{\mathrm{treat}}
    \end{cases}
$$

where $\varepsilon^{\mathrm{treat}}_{i, t} \sim N(0, 0.25)$.


```python
Δ = np.zeros((N, T))
Δ[:, T_treat:] = t[T_treat:] - T_treat \
                    + rng.normal(0., 0.5, size=(N, T - T_treat))
```

The array `w` indicates which units where treated at a given time, with

$$
w_{i, t} =
    \begin{cases}
        1 & \mathrm{if\ unit}\ i\ \mathrm{is\ treated\ at\ time}\ t \\
        0 & \mathrm{otherwise}
    \end{cases}.
$$


```python
w = np.zeros((N, T))
w[treated, T_treat:] = 1
```

We plot the treatment effects that our model will attempt to recover.


```python
fig, ax = plt.subplots(figsize=(8, 6))

ax.plot(t, (Δ * w)[~treated][0],
        c='k', label="Untreated");
ax.plot(t, (Δ * w)[treated][0],
        c='r', alpha=0.75,
        label="Treated");
ax.plot(t, (Δ * w)[treated][1:].T,
        c='r', alpha=0.75);

ax.set_xlabel("$t$");
ax.set_ylabel(r"$\Delta_{i, t} \cdot w_{i, t}$");
ax.legend(loc='upper left');
```


<center>![png](/resources/basc-ccs_files/basc-ccs_43_0.png)</center>


We combine each of these components to generate the data to be modeled.


```python
Θ = (B + A)[..., np.newaxis] + Ξ[np.newaxis]
XΘ = (X[..., np.newaxis] * Θ).sum(axis=1)
```

We combine the reatment effects, the effects of the covariates, the effects of the latent factors, and standard normal noise to get the observed outcomes, $y_{i, t}$.


```python
y = Δ * w + XΘ + Γ.dot(F) + rng.normal(size=(N, T))
```


```python
fig, ax = plt.subplots(figsize=(8, 6))

ax.axvline(T_treat, c='k', ls='--',
           label="$T_{\mathrm{treat}}$");

ax.plot(t, y[~treated].T, c='k', alpha=0.5);
ax.plot([], [], c='k', alpha=0.5,
        label="Untreated");

ax.plot(t, y[treated].T, c='r', lw=3, alpha=0.75);
ax.plot([], [], c='r', alpha=0.75,
        label="Treated");

ax.set_xlabel("$t$");
ax.set_ylabel("$y_{i, t}$");
ax.legend(loc="upper left");
```


<center>![png](/resources/basc-ccs_files/basc-ccs_48_0.png)</center>


We see that the treated units have outcomes that generally trend up after $T_{\mathrm{treat}}$, but there is a lot of visual noise to interpret when comparing those to the untreated units.  Thee BASC-CCS model w will build in the next section will help to quantify the difference and cut through this noise.

## Modeling

### Unidentified latent factors

We begin with a model that has [unidentified](https://en.wikipedia.org/wiki/Identifiability#:~:text=In%20statistics%2C%20identifiability%20is%20a,number%20of%20observations%20from%20it.) latent factors in order to determine which factors we should constrain to best identify our model.  For more details about implementing factor analysis models in PyMC see my [previous post](https://austinrochford.com/posts/2021-07-05-factor-analysis-pymc3.html) on the topic.

Since we are using the Bayesian causal-inference-as-missing-data paradigm, we define the control observations as a [masked array](https://numpy.org/doc/stable/reference/maskedarray.html), with entries masked when $w_{i, t} = 1$, indicating that the $i$-th unit was treated at time $t$.


```python
y_ctrl = np.ma.array(y, mask=w)
```

For simplicity our model will use two latent factors, even though in general we do not know the true number of latent factors.  For a more rigorous discussion of how to choose the number of latent factors, see [_Machine Learning, A Probabilistic Perspective_](https://probml.github.io/pml-book/)^[Murphy, Kevin P. _Machine learning: a probabilistic perspective._ MIT press, 2012.], §12.3.


```python
N_factor = 2
```

We define the coordinates for our parameters. (For more information on how to get PyMC3 to interact nicely with [`xarray`](http://xarray.pydata.org/en/stable/index.html) via coordinates, see Oriol Abril's excellent [post](https://oriolabril.github.io/oriol_unraveled/python/arviz/pymc3/xarray/2020/09/22/pymc3-arviz.html) on the subject.)


```python
coords = {
    "unit": np.arange(N),                        # units
    "fact": np.arange(N_factor),                 # latent factors
    "feat": np.arange(K),                        # features
    "time": t,                                   # time
    "time_block": np.arange(T - (N_factor + 1))  # block of time for identifying factors
}
```

We put centered normal priors on our shared regression coefficients, $\beta_j$.  This prior differs from the one in the paper, which uses a [sparse prior](https://austinrochford.com/posts/2021-05-29-horseshoe-pymc3.html) for these coefficients. Fortunately since we are using a modular probabilistic programming library, this prior can be changed relatively easily.


```python
with pm.Model(coords=coords) as ref_model:
    β = pm.Normal("β", 0., 5., dims="feat")
```

We put [hierarchical normally distributed priors](https://twiecki.io/blog/2017/02/08/bayesian-hierchical-non-centered/) with mean zero (for identifiability) on the per-unit random effects $\alpha_{i, j}$ and the per-time random effects $\xi_{j, t}$.


```python
# the scale necessary to make a halfnormal distribution
# have unit variance
HALFNORMAL_SCALE = 1. / np.sqrt(1. - 2. / np.pi)

def noncentered_normal(name, dims, μ=None,):
    if μ is None:
        μ = pm.Normal(f"μ_{name}", 0., 5.)

    Δ = pm.Normal(f"Δ_{name}", 0., 1., dims=dims)
    σ = pm.HalfNormal(f"σ_{name}", 5. * HALFNORMAL_SCALE)
    
    return pm.Deterministic(name, μ + Δ * σ)
```


```python
with ref_model:
    α = noncentered_normal("α", ("unit", "feat"), μ=0.)
    ξ = noncentered_normal("ξ", ("feat", "time"), μ=0.)
```

Note that here we do not use the fact that the true values of $\Xi_{j, t}$ form an AR(1) process.

We combine $\beta_j$, $\alpha_{i, j}$, and $\xi_{j, t}$ to form the full coefficient cube, $\theta_{i, j, t}$.


```python
θ = β[np.newaxis, :, np.newaxis] \
        + α[..., np.newaxis] \
        + ξ[np.newaxis, ...]
```

We build latent factor component of the model as in the previous post, knowing that this model specificiation is only identified up to reflections of `f_unid` and `γ_unid`.


```python
with ref_model:
    f_pos_row = pm.HalfNormal("f_pos_row", HALFNORMAL_SCALE,
                              dims="fact")
    f_block_unid = pm.Normal("f_block_unid", 0., 1.,
                             dims=("time_block", "fact"))
    f_unid = at.concatenate((
        at.eye(N_factor),
        at.shape_padleft(f_pos_row),
        f_block_unid
    ))
    γ_unid = pm.Normal("γ_unid", 0., 1., dims=("unit", "fact"))
```

Finally, we specify our observational likelihood.


```python
with ref_model:
    μ_ctrl = (X[..., np.newaxis] * θ).sum(axis=1) + γ_unid.dot(f_unid.T)
    
    σ = pm.HalfNormal("σ", 5. * HALFNORMAL_SCALE)
    obs_ctrl = pm.Normal("obs_ctrl", μ_ctrl, σ, observed=y_ctrl)
```

We now draw 100 samples from this unidentified model.


```python
CORES = 3

SAMPLE_KWARGS = {
    "cores": CORES,
    "random_seed": [SEED + i for i in range(CORES)],
    "return_inferencedata": True
}
```


```python
with ref_model:
    ref_trace = pm.sample(tune=100, draws=100, **SAMPLE_KWARGS)
```

    Only 100 samples in chain.
    Auto-assigning NUTS sampler...
    Initializing NUTS using jitter+adapt_diag...
    Multiprocess sampling (3 chains in 3 jobs)
    NUTS: [β, Δ_α, σ_α, Δ_ξ, σ_ξ, f_pos_row, f_block_unid, γ_unid, σ, obs_ctrl_missing]




<div>
<style>
/* Turns off some styling */
progress {
/* gets rid of default border in Firefox and Opera. */
border: none;
/* Needs to be in here for Safari polyfill so background images work as expected. */
background-size: auto;
}
.progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
background: #F44336;
}
</style>
<progress value='600' class='' max='600' style='width:300px; height:20px; vertical-align: middle;'></progress>
100.00% [600/600 02:14<00:00 Sampling 3 chains, 18 divergences]
</div>



    Sampling 3 chains for 100 tune and 100 draw iterations (300 + 300 draws total) took 136 seconds.
    There were 18 divergences after tuning. Increase `target_accept` or reparameterize.
    The acceptance probability does not match the target. It is 1.0, but should be close to 0.8. Try to increase the number of tuning steps.
    The rhat statistic is larger than 1.4 for some parameters. The sampler did not converge.
    The number of effective samples is smaller than 10% for some parameters.



```python
az.rhat(ref_trace).max()
```




<div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
<defs>
<symbol id="icon-database" viewBox="0 0 32 32">
<path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
<path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
<path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
</symbol>
<symbol id="icon-file-text2" viewBox="0 0 32 32">
<path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
<path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
</symbol>
</defs>
</svg>
<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
 *
 */

:root {
  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
  --xr-border-color: var(--jp-border-color2, #e0e0e0);
  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
  --xr-background-color: var(--jp-layout-color0, white);
  --xr-background-color-row-even: var(--jp-layout-color1, white);
  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
}

html[theme=dark],
body.vscode-dark {
  --xr-font-color0: rgba(255, 255, 255, 1);
  --xr-font-color2: rgba(255, 255, 255, 0.54);
  --xr-font-color3: rgba(255, 255, 255, 0.38);
  --xr-border-color: #1F1F1F;
  --xr-disabled-color: #515151;
  --xr-background-color: #111111;
  --xr-background-color-row-even: #111111;
  --xr-background-color-row-odd: #313131;
}

.xr-wrap {
  display: block;
  min-width: 300px;
  max-width: 700px;
}

.xr-text-repr-fallback {
  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
  display: none;
}

.xr-header {
  padding-top: 6px;
  padding-bottom: 6px;
  margin-bottom: 4px;
  border-bottom: solid 1px var(--xr-border-color);
}

.xr-header > div,
.xr-header > ul {
  display: inline;
  margin-top: 0;
  margin-bottom: 0;
}

.xr-obj-type,
.xr-array-name {
  margin-left: 2px;
  margin-right: 10px;
}

.xr-obj-type {
  color: var(--xr-font-color2);
}

.xr-sections {
  padding-left: 0 !important;
  display: grid;
  grid-template-columns: 150px auto auto 1fr 20px 20px;
}

.xr-section-item {
  display: contents;
}

.xr-section-item input {
  display: none;
}

.xr-section-item input + label {
  color: var(--xr-disabled-color);
}

.xr-section-item input:enabled + label {
  cursor: pointer;
  color: var(--xr-font-color2);
}

.xr-section-item input:enabled + label:hover {
  color: var(--xr-font-color0);
}

.xr-section-summary {
  grid-column: 1;
  color: var(--xr-font-color2);
  font-weight: 500;
}

.xr-section-summary > span {
  display: inline-block;
  padding-left: 0.5em;
}

.xr-section-summary-in:disabled + label {
  color: var(--xr-font-color2);
}

.xr-section-summary-in + label:before {
  display: inline-block;
  content: '►';
  font-size: 11px;
  width: 15px;
  text-align: center;
}

.xr-section-summary-in:disabled + label:before {
  color: var(--xr-disabled-color);
}

.xr-section-summary-in:checked + label:before {
  content: '▼';
}

.xr-section-summary-in:checked + label > span {
  display: none;
}

.xr-section-summary,
.xr-section-inline-details {
  padding-top: 4px;
  padding-bottom: 4px;
}

.xr-section-inline-details {
  grid-column: 2 / -1;
}

.xr-section-details {
  display: none;
  grid-column: 1 / -1;
  margin-bottom: 5px;
}

.xr-section-summary-in:checked ~ .xr-section-details {
  display: contents;
}

.xr-array-wrap {
  grid-column: 1 / -1;
  display: grid;
  grid-template-columns: 20px auto;
}

.xr-array-wrap > label {
  grid-column: 1;
  vertical-align: top;
}

.xr-preview {
  color: var(--xr-font-color3);
}

.xr-array-preview,
.xr-array-data {
  padding: 0 5px !important;
  grid-column: 2;
}

.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
  display: none;
}

.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
  display: inline-block;
}

.xr-dim-list {
  display: inline-block !important;
  list-style: none;
  padding: 0 !important;
  margin: 0;
}

.xr-dim-list li {
  display: inline-block;
  padding: 0;
  margin: 0;
}

.xr-dim-list:before {
  content: '(';
}

.xr-dim-list:after {
  content: ')';
}

.xr-dim-list li:not(:last-child):after {
  content: ',';
  padding-right: 5px;
}

.xr-has-index {
  font-weight: bold;
}

.xr-var-list,
.xr-var-item {
  display: contents;
}

.xr-var-item > div,
.xr-var-item label,
.xr-var-item > .xr-var-name span {
  background-color: var(--xr-background-color-row-even);
  margin-bottom: 0;
}

.xr-var-item > .xr-var-name:hover span {
  padding-right: 5px;
}

.xr-var-list > li:nth-child(odd) > div,
.xr-var-list > li:nth-child(odd) > label,
.xr-var-list > li:nth-child(odd) > .xr-var-name span {
  background-color: var(--xr-background-color-row-odd);
}

.xr-var-name {
  grid-column: 1;
}

.xr-var-dims {
  grid-column: 2;
}

.xr-var-dtype {
  grid-column: 3;
  text-align: right;
  color: var(--xr-font-color2);
}

.xr-var-preview {
  grid-column: 4;
}

.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-right: 10px;
}

.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
  overflow: visible;
  width: auto;
  z-index: 1;
}

.xr-var-attrs,
.xr-var-data {
  display: none;
  background-color: var(--xr-background-color) !important;
  padding-bottom: 5px !important;
}

.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data {
  display: block;
}

.xr-var-data > table {
  float: right;
}

.xr-var-name span,
.xr-var-data,
.xr-attrs {
  padding-left: 25px !important;
}

.xr-attrs,
.xr-var-attrs,
.xr-var-data {
  grid-column: 1 / -1;
}

dl.xr-attrs {
  padding: 0;
  margin: 0;
  display: grid;
  grid-template-columns: 125px auto;
}

.xr-attrs dt,
.xr-attrs dd {
  padding: 0;
  margin: 0;
  float: left;
  padding-right: 10px;
  width: auto;
}

.xr-attrs dt {
  font-weight: normal;
  grid-column: 1;
}

.xr-attrs dt:hover span {
  display: inline-block;
  background: var(--xr-background-color);
  padding-right: 10px;
}

.xr-attrs dd {
  grid-column: 2;
  white-space: pre-wrap;
  word-break: break-all;
}

.xr-icon-database,
.xr-icon-file-text2 {
  display: inline-block;
  vertical-align: middle;
  width: 1em;
  height: 1.5em !important;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
}
</style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;
Dimensions:           ()
Data variables:
    β                 float64 1.813
    Δ_α               float64 1.885
    σ_α               float64 1.814
    Δ_ξ               float64 1.86
    σ_ξ               float64 1.805
    f_pos_row         float64 1.727
    f_block_unid      float64 1.818
    γ_unid            float64 1.808
    σ                 float64 1.832
    obs_ctrl_missing  float64 1.82
    α                 float64 1.85
    ξ                 float64 1.848</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-893aabd1-b7b6-4733-91c9-282bb59cb3c1' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-893aabd1-b7b6-4733-91c9-282bb59cb3c1' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-4b556a2e-1ca2-436c-b931-8633810fc3f9' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-4b556a2e-1ca2-436c-b931-8633810fc3f9' class='xr-section-summary'  title='Expand/collapse section'>Coordinates: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'></ul></div></li><li class='xr-section-item'><input id='section-5681b80f-e688-460c-ab2a-cbf11c693f97' class='xr-section-summary-in' type='checkbox'  checked><label for='section-5681b80f-e688-460c-ab2a-cbf11c693f97' class='xr-section-summary' >Data variables: <span>(12)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>β</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.813</div><input id='attrs-6d6ebe00-49bf-443c-a635-b2a085ae2a0c' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-6d6ebe00-49bf-443c-a635-b2a085ae2a0c' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b7902a7e-8f84-490c-b48d-6b652ecb242f' class='xr-var-data-in' type='checkbox'><label for='data-b7902a7e-8f84-490c-b48d-6b652ecb242f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.81270912)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>Δ_α</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.885</div><input id='attrs-14d81b4e-c8a3-4084-8154-c90cd50d230a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-14d81b4e-c8a3-4084-8154-c90cd50d230a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-a238804e-9eba-4ccc-9f6c-54c0c7540b93' class='xr-var-data-in' type='checkbox'><label for='data-a238804e-9eba-4ccc-9f6c-54c0c7540b93' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.88526959)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>σ_α</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.814</div><input id='attrs-195fd498-8c9c-4d5b-9b7e-450f7cd0a465' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-195fd498-8c9c-4d5b-9b7e-450f7cd0a465' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-074ae403-d66c-441b-9a07-36d9c5451b26' class='xr-var-data-in' type='checkbox'><label for='data-074ae403-d66c-441b-9a07-36d9c5451b26' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.81400238)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>Δ_ξ</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.86</div><input id='attrs-087a0100-8205-4d19-93f0-394e5e9aa7c7' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-087a0100-8205-4d19-93f0-394e5e9aa7c7' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-dbd78f5e-f6c2-4d04-bbcb-03a0ad406ca8' class='xr-var-data-in' type='checkbox'><label for='data-dbd78f5e-f6c2-4d04-bbcb-03a0ad406ca8' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.85974353)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>σ_ξ</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.805</div><input id='attrs-3f2853d8-a1ec-4b35-8849-2b13e039ecef' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-3f2853d8-a1ec-4b35-8849-2b13e039ecef' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-0b6449bf-95ee-4f49-b8cd-7b3ccd1b24fa' class='xr-var-data-in' type='checkbox'><label for='data-0b6449bf-95ee-4f49-b8cd-7b3ccd1b24fa' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.80451891)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>f_pos_row</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.727</div><input id='attrs-461c5a4c-78e8-4a81-b1f7-8a8f1459af24' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-461c5a4c-78e8-4a81-b1f7-8a8f1459af24' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-eb90cc03-759c-4ae5-84a0-dd7679bc712c' class='xr-var-data-in' type='checkbox'><label for='data-eb90cc03-759c-4ae5-84a0-dd7679bc712c' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.72748944)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>f_block_unid</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.818</div><input id='attrs-35db9239-4a34-43bc-9516-5d2abb077118' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-35db9239-4a34-43bc-9516-5d2abb077118' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-0ec0fec8-f669-456b-baaf-5a6ac8e2fc60' class='xr-var-data-in' type='checkbox'><label for='data-0ec0fec8-f669-456b-baaf-5a6ac8e2fc60' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.81831663)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>γ_unid</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.808</div><input id='attrs-31481cfa-752c-4946-abe4-7210cc3eb712' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-31481cfa-752c-4946-abe4-7210cc3eb712' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-8085c1fb-d93f-4012-ba4c-3a90399dc14d' class='xr-var-data-in' type='checkbox'><label for='data-8085c1fb-d93f-4012-ba4c-3a90399dc14d' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.80812046)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>σ</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.832</div><input id='attrs-4805568a-632a-495b-a327-231e773fef7a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-4805568a-632a-495b-a327-231e773fef7a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ad27b52a-2f3e-460b-a569-c8118c21ea56' class='xr-var-data-in' type='checkbox'><label for='data-ad27b52a-2f3e-460b-a569-c8118c21ea56' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.83187637)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>obs_ctrl_missing</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.82</div><input id='attrs-4ce94dc7-3656-4125-b540-e5d22a7b559b' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-4ce94dc7-3656-4125-b540-e5d22a7b559b' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-019a7263-5579-4097-9a0d-46865971b755' class='xr-var-data-in' type='checkbox'><label for='data-019a7263-5579-4097-9a0d-46865971b755' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.81951939)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>α</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.85</div><input id='attrs-05963eaf-361d-4844-9489-f9bfca046c01' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-05963eaf-361d-4844-9489-f9bfca046c01' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-94ce3608-1248-4c6d-adc6-26c77a635f78' class='xr-var-data-in' type='checkbox'><label for='data-94ce3608-1248-4c6d-adc6-26c77a635f78' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.84973862)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>ξ</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.848</div><input id='attrs-90ea0b58-91fe-48ff-be98-3d84f857cf5f' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-90ea0b58-91fe-48ff-be98-3d84f857cf5f' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-81fb896b-5ccc-4b87-a983-76ab95199ef4' class='xr-var-data-in' type='checkbox'><label for='data-81fb896b-5ccc-4b87-a983-76ab95199ef4' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.84825114)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-a3ba7cb2-32d9-41a2-be53-1065b4780eeb' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-a3ba7cb2-32d9-41a2-be53-1065b4780eeb' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>



As expected, the $\hat{R}$ parameters are quite high, indiciating that the chains have not converged well. This behavior is expected, since we know that this model is reflection-invariant and therefore has a multimodal posterior.

As in the previous post on identification in factor analysis, we choose a row of `f_block_unid` that we constrain to have all positive entries and change the signs of the entries `f_block_unid` and `γ_unid` so that they have the same relationship with the signs of this row.  We choose the row that has the chain whose latent factors have the largest posterior expected distance from the origin.


```python
block_mean = (ref_trace.posterior["f_block_unid"]
                       .mean(dim="draw"))
block_mean_norm = np.square(block_mean).sum(dim="fact")
sign_row = (block_mean_norm.max(dim="chain")
                           .argmax()
                           .item())
sign_chain = (block_mean_norm.sel({"time_block": sign_row})
                             .argmax()
                             .item())
```


```python
target_sign = (np.sign(block_mean.sel({"chain": sign_chain,
                                       "time_block": sign_row}))
                 .data)
```

We can now specify the identified model, which is largely the same as the previous model.


```python
with pm.Model(coords=coords) as model:
    β = pm.Normal("β", 0., 5., dims="feat")
    α = noncentered_normal("α", ("unit", "feat"), μ=0.)
    ξ = noncentered_normal("ξ", ("feat", "time"), μ=0.)
    θ = β[np.newaxis, :, np.newaxis] \
            + α[..., np.newaxis] \
            + ξ[np.newaxis, ...]
    
    f_pos_row = pm.HalfNormal("f_pos_row", HALFNORMAL_SCALE,
                              dims="fact")
    f_block_unid = pm.Normal("f_block_unid", 0., 1.,
                             dims=("time_block", "fact"))
    
    γ_unid = pm.Normal("γ_unid", 0., 1., dims=("unit", "fact"))
```

We now enforce the sign constraints that will break the reflectional invariance of the previous model and specify the observational likelihood.


```python
with model:
    unid_sign = at.sgn(f_block_unid[sign_row])
    
    f_block = pm.Deterministic(
        "f_block", target_sign * unid_sign * f_block_unid,
        dims=("time_block", "fact")
    )
    f = at.concatenate((
        at.eye(N_factor),
        at.shape_padleft(f_pos_row),
        f_block
    ))
    
    γ = pm.Deterministic(
        "γ", target_sign * unid_sign * γ_unid,
        dims=("unit", "fact")
    )

    μ_ctrl = (X[..., np.newaxis] * θ).sum(axis=1) + γ.dot(f.T)
    
    σ = pm.HalfNormal("σ", 5. * HALFNORMAL_SCALE)
    obs_ctrl = pm.Normal("obs_ctrl", μ_ctrl, σ, observed=y_ctrl)
```

We now sample from this identified model.


```python
with model:
    trace = pm.sample(**SAMPLE_KWARGS)
```

    Auto-assigning NUTS sampler...
    Initializing NUTS using jitter+adapt_diag...
    Multiprocess sampling (3 chains in 3 jobs)
    NUTS: [β, Δ_α, σ_α, Δ_ξ, σ_ξ, f_pos_row, f_block_unid, γ_unid, σ, obs_ctrl_missing]




<div>
<style>
/* Turns off some styling */
progress {
/* gets rid of default border in Firefox and Opera. */
border: none;
/* Needs to be in here for Safari polyfill so background images work as expected. */
background-size: auto;
}
.progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
background: #F44336;
}
</style>
<progress value='6000' class='' max='6000' style='width:300px; height:20px; vertical-align: middle;'></progress>
100.00% [6000/6000 13:54<00:00 Sampling 3 chains, 0 divergences]
</div>



    Sampling 3 chains for 1_000 tune and 1_000 draw iterations (3_000 + 3_000 draws total) took 835 seconds.
    The rhat statistic is larger than 1.4 for some parameters. The sampler did not converge.
    The estimated number of effective samples is smaller than 200 for some parameters.


For the moment we ignore the convergence warnings, because we expect the $\hat{R}$ values for `f_block_unid` and `γ_unid` to be high.

The energy plot shows no cause for concern.


```python
az.plot_energy(trace);
```


<center>![png](/resources/basc-ccs_files/basc-ccs_82_0.png)</center>


Ignoring the variables we know are not identified, all of our $\hat{R}$ statistics are reasonable as well.


```python
rhat_var_names = [
    var_name for var_name in trace.posterior.data_vars
        if not var_name.endswith("_unid")
]
```


```python
az.rhat(trace, var_names=rhat_var_names).max()
```




<div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
<defs>
<symbol id="icon-database" viewBox="0 0 32 32">
<path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
<path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
<path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
</symbol>
<symbol id="icon-file-text2" viewBox="0 0 32 32">
<path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
<path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
</symbol>
</defs>
</svg>
<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
 *
 */

:root {
  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
  --xr-border-color: var(--jp-border-color2, #e0e0e0);
  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
  --xr-background-color: var(--jp-layout-color0, white);
  --xr-background-color-row-even: var(--jp-layout-color1, white);
  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
}

html[theme=dark],
body.vscode-dark {
  --xr-font-color0: rgba(255, 255, 255, 1);
  --xr-font-color2: rgba(255, 255, 255, 0.54);
  --xr-font-color3: rgba(255, 255, 255, 0.38);
  --xr-border-color: #1F1F1F;
  --xr-disabled-color: #515151;
  --xr-background-color: #111111;
  --xr-background-color-row-even: #111111;
  --xr-background-color-row-odd: #313131;
}

.xr-wrap {
  display: block;
  min-width: 300px;
  max-width: 700px;
}

.xr-text-repr-fallback {
  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
  display: none;
}

.xr-header {
  padding-top: 6px;
  padding-bottom: 6px;
  margin-bottom: 4px;
  border-bottom: solid 1px var(--xr-border-color);
}

.xr-header > div,
.xr-header > ul {
  display: inline;
  margin-top: 0;
  margin-bottom: 0;
}

.xr-obj-type,
.xr-array-name {
  margin-left: 2px;
  margin-right: 10px;
}

.xr-obj-type {
  color: var(--xr-font-color2);
}

.xr-sections {
  padding-left: 0 !important;
  display: grid;
  grid-template-columns: 150px auto auto 1fr 20px 20px;
}

.xr-section-item {
  display: contents;
}

.xr-section-item input {
  display: none;
}

.xr-section-item input + label {
  color: var(--xr-disabled-color);
}

.xr-section-item input:enabled + label {
  cursor: pointer;
  color: var(--xr-font-color2);
}

.xr-section-item input:enabled + label:hover {
  color: var(--xr-font-color0);
}

.xr-section-summary {
  grid-column: 1;
  color: var(--xr-font-color2);
  font-weight: 500;
}

.xr-section-summary > span {
  display: inline-block;
  padding-left: 0.5em;
}

.xr-section-summary-in:disabled + label {
  color: var(--xr-font-color2);
}

.xr-section-summary-in + label:before {
  display: inline-block;
  content: '►';
  font-size: 11px;
  width: 15px;
  text-align: center;
}

.xr-section-summary-in:disabled + label:before {
  color: var(--xr-disabled-color);
}

.xr-section-summary-in:checked + label:before {
  content: '▼';
}

.xr-section-summary-in:checked + label > span {
  display: none;
}

.xr-section-summary,
.xr-section-inline-details {
  padding-top: 4px;
  padding-bottom: 4px;
}

.xr-section-inline-details {
  grid-column: 2 / -1;
}

.xr-section-details {
  display: none;
  grid-column: 1 / -1;
  margin-bottom: 5px;
}

.xr-section-summary-in:checked ~ .xr-section-details {
  display: contents;
}

.xr-array-wrap {
  grid-column: 1 / -1;
  display: grid;
  grid-template-columns: 20px auto;
}

.xr-array-wrap > label {
  grid-column: 1;
  vertical-align: top;
}

.xr-preview {
  color: var(--xr-font-color3);
}

.xr-array-preview,
.xr-array-data {
  padding: 0 5px !important;
  grid-column: 2;
}

.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
  display: none;
}

.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
  display: inline-block;
}

.xr-dim-list {
  display: inline-block !important;
  list-style: none;
  padding: 0 !important;
  margin: 0;
}

.xr-dim-list li {
  display: inline-block;
  padding: 0;
  margin: 0;
}

.xr-dim-list:before {
  content: '(';
}

.xr-dim-list:after {
  content: ')';
}

.xr-dim-list li:not(:last-child):after {
  content: ',';
  padding-right: 5px;
}

.xr-has-index {
  font-weight: bold;
}

.xr-var-list,
.xr-var-item {
  display: contents;
}

.xr-var-item > div,
.xr-var-item label,
.xr-var-item > .xr-var-name span {
  background-color: var(--xr-background-color-row-even);
  margin-bottom: 0;
}

.xr-var-item > .xr-var-name:hover span {
  padding-right: 5px;
}

.xr-var-list > li:nth-child(odd) > div,
.xr-var-list > li:nth-child(odd) > label,
.xr-var-list > li:nth-child(odd) > .xr-var-name span {
  background-color: var(--xr-background-color-row-odd);
}

.xr-var-name {
  grid-column: 1;
}

.xr-var-dims {
  grid-column: 2;
}

.xr-var-dtype {
  grid-column: 3;
  text-align: right;
  color: var(--xr-font-color2);
}

.xr-var-preview {
  grid-column: 4;
}

.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-right: 10px;
}

.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
  overflow: visible;
  width: auto;
  z-index: 1;
}

.xr-var-attrs,
.xr-var-data {
  display: none;
  background-color: var(--xr-background-color) !important;
  padding-bottom: 5px !important;
}

.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data {
  display: block;
}

.xr-var-data > table {
  float: right;
}

.xr-var-name span,
.xr-var-data,
.xr-attrs {
  padding-left: 25px !important;
}

.xr-attrs,
.xr-var-attrs,
.xr-var-data {
  grid-column: 1 / -1;
}

dl.xr-attrs {
  padding: 0;
  margin: 0;
  display: grid;
  grid-template-columns: 125px auto;
}

.xr-attrs dt,
.xr-attrs dd {
  padding: 0;
  margin: 0;
  float: left;
  padding-right: 10px;
  width: auto;
}

.xr-attrs dt {
  font-weight: normal;
  grid-column: 1;
}

.xr-attrs dt:hover span {
  display: inline-block;
  background: var(--xr-background-color);
  padding-right: 10px;
}

.xr-attrs dd {
  grid-column: 2;
  white-space: pre-wrap;
  word-break: break-all;
}

.xr-icon-database,
.xr-icon-file-text2 {
  display: inline-block;
  vertical-align: middle;
  width: 1em;
  height: 1.5em !important;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
}
</style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;
Dimensions:           ()
Data variables:
    β                 float64 1.004
    Δ_α               float64 1.007
    σ_α               float64 1.003
    Δ_ξ               float64 1.008
    σ_ξ               float64 1.0
    f_pos_row         float64 1.002
    σ                 float64 1.002
    obs_ctrl_missing  float64 1.004
    α                 float64 1.008
    ξ                 float64 1.008
    f_block           float64 1.008
    γ                 float64 1.008</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-e868ecab-ab46-4e76-a98f-831c5cf2cd71' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-e868ecab-ab46-4e76-a98f-831c5cf2cd71' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-4ab2f128-0006-4117-842d-254234088f77' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-4ab2f128-0006-4117-842d-254234088f77' class='xr-section-summary'  title='Expand/collapse section'>Coordinates: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'></ul></div></li><li class='xr-section-item'><input id='section-0bd793ab-7da3-4760-bf0f-da019de57876' class='xr-section-summary-in' type='checkbox'  checked><label for='section-0bd793ab-7da3-4760-bf0f-da019de57876' class='xr-section-summary' >Data variables: <span>(12)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>β</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.004</div><input id='attrs-6e7ef1f5-eb43-448c-9a1f-ad5b81a34d91' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-6e7ef1f5-eb43-448c-9a1f-ad5b81a34d91' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-0ba991ac-27ad-4144-b8f7-f4833d12433a' class='xr-var-data-in' type='checkbox'><label for='data-0ba991ac-27ad-4144-b8f7-f4833d12433a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.00389839)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>Δ_α</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.007</div><input id='attrs-aae261c1-c9b1-4b78-814b-f8da914c5da9' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-aae261c1-c9b1-4b78-814b-f8da914c5da9' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-1b1b9bed-c79b-4ed9-aa8a-2c7e75168d2a' class='xr-var-data-in' type='checkbox'><label for='data-1b1b9bed-c79b-4ed9-aa8a-2c7e75168d2a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.00650723)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>σ_α</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.003</div><input id='attrs-9773e5fb-4b47-4af4-8f63-fe06d1cd9c73' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-9773e5fb-4b47-4af4-8f63-fe06d1cd9c73' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ea53a995-6661-4f43-a045-718e964805e2' class='xr-var-data-in' type='checkbox'><label for='data-ea53a995-6661-4f43-a045-718e964805e2' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.00252306)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>Δ_ξ</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.008</div><input id='attrs-c688aa01-9a10-4dc1-a609-ffae2e13a410' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-c688aa01-9a10-4dc1-a609-ffae2e13a410' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-bd5436f3-c0ea-43bb-a6f8-7268618e7669' class='xr-var-data-in' type='checkbox'><label for='data-bd5436f3-c0ea-43bb-a6f8-7268618e7669' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.00802131)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>σ_ξ</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.0</div><input id='attrs-c9c1f02c-e799-4ce3-b3f4-43c7b01a97c3' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-c9c1f02c-e799-4ce3-b3f4-43c7b01a97c3' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-514a6c0a-a62e-4570-9e5a-ca360d5a4e53' class='xr-var-data-in' type='checkbox'><label for='data-514a6c0a-a62e-4570-9e5a-ca360d5a4e53' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.00025354)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>f_pos_row</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.002</div><input id='attrs-738f9bb1-e429-4f71-a4f6-b6498f534dba' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-738f9bb1-e429-4f71-a4f6-b6498f534dba' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-687b4df4-2860-497b-b822-cf16021375e9' class='xr-var-data-in' type='checkbox'><label for='data-687b4df4-2860-497b-b822-cf16021375e9' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.00226488)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>σ</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.002</div><input id='attrs-ae4dafa7-0c54-4f76-a439-1cd72f7e769a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-ae4dafa7-0c54-4f76-a439-1cd72f7e769a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-4cafa54f-26f7-4b24-8583-d6acfdfad636' class='xr-var-data-in' type='checkbox'><label for='data-4cafa54f-26f7-4b24-8583-d6acfdfad636' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.00224675)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>obs_ctrl_missing</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.004</div><input id='attrs-ba2a3547-d323-470b-b356-0560808a2fd5' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-ba2a3547-d323-470b-b356-0560808a2fd5' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d761dea0-cbbb-42bd-8cd5-5e233a9ec002' class='xr-var-data-in' type='checkbox'><label for='data-d761dea0-cbbb-42bd-8cd5-5e233a9ec002' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.00359828)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>α</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.008</div><input id='attrs-e8acbada-6dd8-48f6-86d5-d81ab8c0288e' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-e8acbada-6dd8-48f6-86d5-d81ab8c0288e' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-168184b4-e590-41b9-8bf8-09ce70703b46' class='xr-var-data-in' type='checkbox'><label for='data-168184b4-e590-41b9-8bf8-09ce70703b46' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.00811494)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>ξ</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.008</div><input id='attrs-1c594262-ea32-4fac-a015-0a50b9ef2170' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-1c594262-ea32-4fac-a015-0a50b9ef2170' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-00cecafb-deaf-4b32-ac9c-68fd849bf458' class='xr-var-data-in' type='checkbox'><label for='data-00cecafb-deaf-4b32-ac9c-68fd849bf458' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.00801751)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>f_block</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.008</div><input id='attrs-3cbf5457-d609-4282-b5f6-b52ddc298a6a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-3cbf5457-d609-4282-b5f6-b52ddc298a6a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-8f0764b8-3a9a-452a-8eec-660c7b2a9443' class='xr-var-data-in' type='checkbox'><label for='data-8f0764b8-3a9a-452a-8eec-660c7b2a9443' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.00819455)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>γ</span></div><div class='xr-var-dims'>()</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.008</div><input id='attrs-d3637a67-db84-4b64-b706-dda4099ffc67' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-d3637a67-db84-4b64-b706-dda4099ffc67' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-a5b3d3b1-e7dd-41e9-a066-b42db0e2a917' class='xr-var-data-in' type='checkbox'><label for='data-a5b3d3b1-e7dd-41e9-a066-b42db0e2a917' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array(1.00805011)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-3de1dac7-3cc2-46ee-8336-d342466c70aa' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-3de1dac7-3cc2-46ee-8336-d342466c70aa' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>



The model has recovered the true regression coefficients reasonably well.


```python
ax, = az.plot_forest(trace, var_names=["β"],
                     combined=True, hdi_prob=0.95)

ax.scatter(B[::-1], ax.get_yticks(),
           c='k', zorder=5, label="Actual");

ax.set_yticklabels([]);
ax.set_ylabel(r"$\beta_j$");

ax.legend(loc='upper left');
```


<center>![png](/resources/basc-ccs_files/basc-ccs_87_0.png)</center>


We now turn to estimating the causal effect.  First we build an array of the posterior imputed control outcomes for the treated units.


```python
post_treat_ctrl = xr.DataArray(
    trace.posterior["obs_ctrl_missing"]
          .data
          .reshape((CORES, 1000, n_treated, T - T_treat)),
    dims=(
        "chain", "draw",
        "treat_unit", "treat_time"
    )
)
```


```python
post_treat_ctrl.head()
```




<div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
<defs>
<symbol id="icon-database" viewBox="0 0 32 32">
<path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
<path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
<path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
</symbol>
<symbol id="icon-file-text2" viewBox="0 0 32 32">
<path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
<path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
<path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
</symbol>
</defs>
</svg>
<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
 *
 */

:root {
  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
  --xr-border-color: var(--jp-border-color2, #e0e0e0);
  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
  --xr-background-color: var(--jp-layout-color0, white);
  --xr-background-color-row-even: var(--jp-layout-color1, white);
  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
}

html[theme=dark],
body.vscode-dark {
  --xr-font-color0: rgba(255, 255, 255, 1);
  --xr-font-color2: rgba(255, 255, 255, 0.54);
  --xr-font-color3: rgba(255, 255, 255, 0.38);
  --xr-border-color: #1F1F1F;
  --xr-disabled-color: #515151;
  --xr-background-color: #111111;
  --xr-background-color-row-even: #111111;
  --xr-background-color-row-odd: #313131;
}

.xr-wrap {
  display: block;
  min-width: 300px;
  max-width: 700px;
}

.xr-text-repr-fallback {
  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
  display: none;
}

.xr-header {
  padding-top: 6px;
  padding-bottom: 6px;
  margin-bottom: 4px;
  border-bottom: solid 1px var(--xr-border-color);
}

.xr-header > div,
.xr-header > ul {
  display: inline;
  margin-top: 0;
  margin-bottom: 0;
}

.xr-obj-type,
.xr-array-name {
  margin-left: 2px;
  margin-right: 10px;
}

.xr-obj-type {
  color: var(--xr-font-color2);
}

.xr-sections {
  padding-left: 0 !important;
  display: grid;
  grid-template-columns: 150px auto auto 1fr 20px 20px;
}

.xr-section-item {
  display: contents;
}

.xr-section-item input {
  display: none;
}

.xr-section-item input + label {
  color: var(--xr-disabled-color);
}

.xr-section-item input:enabled + label {
  cursor: pointer;
  color: var(--xr-font-color2);
}

.xr-section-item input:enabled + label:hover {
  color: var(--xr-font-color0);
}

.xr-section-summary {
  grid-column: 1;
  color: var(--xr-font-color2);
  font-weight: 500;
}

.xr-section-summary > span {
  display: inline-block;
  padding-left: 0.5em;
}

.xr-section-summary-in:disabled + label {
  color: var(--xr-font-color2);
}

.xr-section-summary-in + label:before {
  display: inline-block;
  content: '►';
  font-size: 11px;
  width: 15px;
  text-align: center;
}

.xr-section-summary-in:disabled + label:before {
  color: var(--xr-disabled-color);
}

.xr-section-summary-in:checked + label:before {
  content: '▼';
}

.xr-section-summary-in:checked + label > span {
  display: none;
}

.xr-section-summary,
.xr-section-inline-details {
  padding-top: 4px;
  padding-bottom: 4px;
}

.xr-section-inline-details {
  grid-column: 2 / -1;
}

.xr-section-details {
  display: none;
  grid-column: 1 / -1;
  margin-bottom: 5px;
}

.xr-section-summary-in:checked ~ .xr-section-details {
  display: contents;
}

.xr-array-wrap {
  grid-column: 1 / -1;
  display: grid;
  grid-template-columns: 20px auto;
}

.xr-array-wrap > label {
  grid-column: 1;
  vertical-align: top;
}

.xr-preview {
  color: var(--xr-font-color3);
}

.xr-array-preview,
.xr-array-data {
  padding: 0 5px !important;
  grid-column: 2;
}

.xr-array-data,
.xr-array-in:checked ~ .xr-array-preview {
  display: none;
}

.xr-array-in:checked ~ .xr-array-data,
.xr-array-preview {
  display: inline-block;
}

.xr-dim-list {
  display: inline-block !important;
  list-style: none;
  padding: 0 !important;
  margin: 0;
}

.xr-dim-list li {
  display: inline-block;
  padding: 0;
  margin: 0;
}

.xr-dim-list:before {
  content: '(';
}

.xr-dim-list:after {
  content: ')';
}

.xr-dim-list li:not(:last-child):after {
  content: ',';
  padding-right: 5px;
}

.xr-has-index {
  font-weight: bold;
}

.xr-var-list,
.xr-var-item {
  display: contents;
}

.xr-var-item > div,
.xr-var-item label,
.xr-var-item > .xr-var-name span {
  background-color: var(--xr-background-color-row-even);
  margin-bottom: 0;
}

.xr-var-item > .xr-var-name:hover span {
  padding-right: 5px;
}

.xr-var-list > li:nth-child(odd) > div,
.xr-var-list > li:nth-child(odd) > label,
.xr-var-list > li:nth-child(odd) > .xr-var-name span {
  background-color: var(--xr-background-color-row-odd);
}

.xr-var-name {
  grid-column: 1;
}

.xr-var-dims {
  grid-column: 2;
}

.xr-var-dtype {
  grid-column: 3;
  text-align: right;
  color: var(--xr-font-color2);
}

.xr-var-preview {
  grid-column: 4;
}

.xr-var-name,
.xr-var-dims,
.xr-var-dtype,
.xr-preview,
.xr-attrs dt {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-right: 10px;
}

.xr-var-name:hover,
.xr-var-dims:hover,
.xr-var-dtype:hover,
.xr-attrs dt:hover {
  overflow: visible;
  width: auto;
  z-index: 1;
}

.xr-var-attrs,
.xr-var-data {
  display: none;
  background-color: var(--xr-background-color) !important;
  padding-bottom: 5px !important;
}

.xr-var-attrs-in:checked ~ .xr-var-attrs,
.xr-var-data-in:checked ~ .xr-var-data {
  display: block;
}

.xr-var-data > table {
  float: right;
}

.xr-var-name span,
.xr-var-data,
.xr-attrs {
  padding-left: 25px !important;
}

.xr-attrs,
.xr-var-attrs,
.xr-var-data {
  grid-column: 1 / -1;
}

dl.xr-attrs {
  padding: 0;
  margin: 0;
  display: grid;
  grid-template-columns: 125px auto;
}

.xr-attrs dt,
.xr-attrs dd {
  padding: 0;
  margin: 0;
  float: left;
  padding-right: 10px;
  width: auto;
}

.xr-attrs dt {
  font-weight: normal;
  grid-column: 1;
}

.xr-attrs dt:hover span {
  display: inline-block;
  background: var(--xr-background-color);
  padding-right: 10px;
}

.xr-attrs dd {
  grid-column: 2;
  white-space: pre-wrap;
  word-break: break-all;
}

.xr-icon-database,
.xr-icon-file-text2 {
  display: inline-block;
  vertical-align: middle;
  width: 1em;
  height: 1.5em !important;
  stroke-width: 0;
  stroke: currentColor;
  fill: currentColor;
}
</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray (chain: 3, draw: 5, treat_unit: 5, treat_time: 5)&gt;
array([[[[ 1.25759892e+01,  1.30612264e+01,  1.57087369e+01,
           1.49536257e+01,  1.64677110e+01],
         [-4.12810485e-02,  6.26047750e+00,  7.79874263e+00,
           1.23859034e+01,  1.61490831e+01],
         [ 7.27955473e+00,  1.04034349e+01,  1.12521199e+01,
           1.11063292e+01,  1.13530200e+01],
         [-5.36650155e+00, -5.83322477e+00, -3.35144524e+00,
           3.44000735e+00,  1.88207349e+00],
         [-1.31260800e+01, -1.22691019e+01, -1.33695535e+01,
          -5.94977044e+00, -8.61557509e+00]],

        [[ 1.30278045e+01,  1.42052058e+01,  1.40630688e+01,
           1.47218969e+01,  1.93233792e+01],
         [ 2.45746861e+00,  3.67240422e+00,  6.87289651e+00,
           8.61550996e+00,  1.48857372e+01],
         [ 8.68996670e+00,  1.22336995e+01,  1.01608424e+01,
           9.78275733e+00,  1.42336802e+01],
         [-6.32208820e+00, -3.22852886e+00, -1.89722169e+00,
           3.30217994e-01,  3.78225547e+00],
         [-1.53244972e+01, -1.35265466e+01, -1.36205170e+01,
...
           1.35873648e+01,  1.50553915e+01],
         [ 3.01241871e+00,  5.42217922e+00,  6.50204080e+00,
           1.15586759e+01,  1.33643026e+01],
         [ 7.65560768e+00,  1.29871011e+01,  9.75434111e+00,
           1.09479191e+01,  1.26587440e+01],
         [-3.59855020e+00, -4.76761066e+00, -4.10285725e+00,
           2.14369279e+00,  3.28661610e-01],
         [-1.39193859e+01, -1.79066255e+01, -1.26329862e+01,
          -4.73557646e+00, -7.94774028e+00]],

        [[ 1.38132791e+01,  1.24831973e+01,  1.20970456e+01,
           1.37274249e+01,  1.51289416e+01],
         [ 3.95173624e+00,  5.69156061e+00,  6.21128104e+00,
           1.20260114e+01,  1.34918240e+01],
         [ 7.22084256e+00,  1.30855164e+01,  9.73445859e+00,
           1.10445040e+01,  1.27090074e+01],
         [-3.85094179e+00, -3.93828746e+00, -3.88376440e+00,
           1.53955903e+00,  8.58625045e-01],
         [-1.39993793e+01, -1.79798655e+01, -1.25980525e+01,
          -4.70834640e+00, -7.87338772e+00]]]])
Dimensions without coordinates: chain, draw, treat_unit, treat_time</pre><div class='xr-wrap' hidden><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span>chain</span>: 3</li><li><span>draw</span>: 5</li><li><span>treat_unit</span>: 5</li><li><span>treat_time</span>: 5</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-d7c9a0fd-edfc-4da3-90ab-fc328b4dec2d' class='xr-array-in' type='checkbox' checked><label for='section-d7c9a0fd-edfc-4da3-90ab-fc328b4dec2d' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>12.58 13.06 15.71 14.95 16.47 ... -14.0 -17.98 -12.6 -4.708 -7.873</span></div><div class='xr-array-data'><pre>array([[[[ 1.25759892e+01,  1.30612264e+01,  1.57087369e+01,
           1.49536257e+01,  1.64677110e+01],
         [-4.12810485e-02,  6.26047750e+00,  7.79874263e+00,
           1.23859034e+01,  1.61490831e+01],
         [ 7.27955473e+00,  1.04034349e+01,  1.12521199e+01,
           1.11063292e+01,  1.13530200e+01],
         [-5.36650155e+00, -5.83322477e+00, -3.35144524e+00,
           3.44000735e+00,  1.88207349e+00],
         [-1.31260800e+01, -1.22691019e+01, -1.33695535e+01,
          -5.94977044e+00, -8.61557509e+00]],

        [[ 1.30278045e+01,  1.42052058e+01,  1.40630688e+01,
           1.47218969e+01,  1.93233792e+01],
         [ 2.45746861e+00,  3.67240422e+00,  6.87289651e+00,
           8.61550996e+00,  1.48857372e+01],
         [ 8.68996670e+00,  1.22336995e+01,  1.01608424e+01,
           9.78275733e+00,  1.42336802e+01],
         [-6.32208820e+00, -3.22852886e+00, -1.89722169e+00,
           3.30217994e-01,  3.78225547e+00],
         [-1.53244972e+01, -1.35265466e+01, -1.36205170e+01,
...
           1.35873648e+01,  1.50553915e+01],
         [ 3.01241871e+00,  5.42217922e+00,  6.50204080e+00,
           1.15586759e+01,  1.33643026e+01],
         [ 7.65560768e+00,  1.29871011e+01,  9.75434111e+00,
           1.09479191e+01,  1.26587440e+01],
         [-3.59855020e+00, -4.76761066e+00, -4.10285725e+00,
           2.14369279e+00,  3.28661610e-01],
         [-1.39193859e+01, -1.79066255e+01, -1.26329862e+01,
          -4.73557646e+00, -7.94774028e+00]],

        [[ 1.38132791e+01,  1.24831973e+01,  1.20970456e+01,
           1.37274249e+01,  1.51289416e+01],
         [ 3.95173624e+00,  5.69156061e+00,  6.21128104e+00,
           1.20260114e+01,  1.34918240e+01],
         [ 7.22084256e+00,  1.30855164e+01,  9.73445859e+00,
           1.10445040e+01,  1.27090074e+01],
         [-3.85094179e+00, -3.93828746e+00, -3.88376440e+00,
           1.53955903e+00,  8.58625045e-01],
         [-1.39993793e+01, -1.79798655e+01, -1.25980525e+01,
          -4.70834640e+00, -7.87338772e+00]]]])</pre></div></div></li><li class='xr-section-item'><input id='section-921babcf-a899-4c07-ac3a-e3a0aab640ba' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-921babcf-a899-4c07-ac3a-e3a0aab640ba' class='xr-section-summary'  title='Expand/collapse section'>Coordinates: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'></ul></div></li><li class='xr-section-item'><input id='section-7a1bc9f5-7da1-4979-ab63-380b8469bae6' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-7a1bc9f5-7da1-4979-ab63-380b8469bae6' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>



We plot these against the observed treated values to visualize the treatment effect.


```python
fig, ax = plt.subplots(figsize=(8, 6))

treated_c = [f"C{i}" for i in range(n_treated)]

ax.plot(post_treat_ctrl.mean(dim=("chain", "draw")).T,
        ls='--');
ax.set_prop_cycle(None);
ax.plot(y[treated, T_treat:].T);

ax.set_xlabel(r"$t - T_{\mathrm{treated}}$");
ax.set_ylabel("y_{i, t}");

handles = [
    Line2D([0], [0], c='k',
           label="Treated (observed)"),
    Line2D([0], [0], c='k', ls='--',
           label="Control (posterior expected value)")
]
ax.legend(loc='upper left', handles=handles);

ax.set_title("Treated units");
```


<center>![png](/resources/basc-ccs_files/basc-ccs_92_0.png)</center>


Here we see that the posterior estimates of the treatment effect are quite close to the actual effect.


```python
fig, ax = plt.subplots(figsize=(8, 6))

low, high = (
    (y[treated, T_treat:] - post_treat_ctrl)
        .quantile([0.025, 0.975],
                  dim=("chain", "draw", "treat_unit"))
)
ax.fill_between(np.arange(T - T_treat), low, high,
                color='C0', alpha=0.25,
                label="95% credible interval");
ax.plot([0, T - T_treat - 1], [0, T - T_treat - 1], 
        c='k', label="Actual");
ax.plot(
    y[treated, T_treat:].T \
        - post_treat_ctrl.mean(dim=("chain", "draw")).T,
    c='C0'
);

handles, _ = ax.get_legend_handles_labels()
handles.insert(
    1, Line2D([0], [0],c='C0', label="Posterior expected")
)
ax.legend(loc='upper left', handles=handles);

ax.set_xlabel(r"$t - T_{\mathrm{treated}}$");
ax.set_ylabel("Treatment effect");
```


<center>![png](/resources/basc-ccs_files/basc-ccs_94_0.png)</center>


This post is available as a Jupyter notebook [here](https://nbviewer.jupyter.org/gist/AustinRochford/932fa17bbd2d9b40c6efacdd4fcafa5a).
