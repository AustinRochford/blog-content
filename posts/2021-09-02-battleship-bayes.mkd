---
title: Playing Battleship with Bayesian Search Theory, Thompson Sampling, and Approximate Bayesian Computation
tags: Battleship, Search Theory, Thompson Sampling, Approximate Bayesian Computation, Bayesian Statistics
---

As a child, I spent many hours playing [Battleship](https://en.wikipedia.org/wiki/Battleship_(game)) against my Mom or brother to pass the time.

<center><img src="https://s3.us-east-2.amazonaws.com/boardashell/battleship.jpeg" width=500></center>

Battleship is a classic game of [incomplete information](https://en.wikipedia.org/wiki/Complete_information) that involves placing ships of different lengths on a square grid ($10 \times 10$ in the most popular version) and trying to guess the location of all of the opponent's ships (sinking them) before the opponent does the same.

Many years after I stopped playing Battleship with my family, I developed an interest in [Bayesian search theory](https://en.wikipedia.org/wiki/Bayesian_search_theory) after learning about a firm that specializes in search consulting for the US government at jobs-in-industry panel in graduate school. I had already happily lined up a [job](https://kibocommerce.com/personalization-software/) in e-commerce optimization, but the idea of using statistics to guide the potentially expensive searches piqued my intellectual curiosity.  I e-mailed the presenter afterward for more information and he recommended [_Theory of Optimal Search_]^(Stone, Lawrence D. _Theory of optimal search._ Elsevier, 1976.) as the sessential reference in the field.  The book is interesting if a bit dry, it is about mathematical optimization after all, and I was always curious about the connection with the search theory it develops and Battleship, which has always stood out in my mind as a basic search problem.  Though most of the theory in this book is not directly applicable to Battleship for various reasons, a continuing theme is allocating search in areas with the largest posterior probability of containing the target object given the search results so far.  A 1985 result of [Assaf and Zamir]^(Assaf, David, and Shmuel Zamir. "Optimal sequential search: a Bayesian approach." _The Annals of Statistics_ 13, no. 3 (1985): 1213-1221.) shows the optimality of this strategy in a situation much closer to that of Battleship.

Inspired by these forays into search theory I have thought idly for many years about constructing a near-optimal Bayesian approach to playing Battleship.  This post is the culmination of these thoughts, showing how to use ideas from Bayesian search theory, [approximate Bayesian computation](https://en.wikipedia.org/wiki/Approximate_Bayesian_computation) (ABC), and [Thompson sampling](https://en.wikipedia.org/wiki/Thompson_sampling) to construct an easily tractable, near optimal strategy for Battleship that only requires simulating random Battleship boards and not reasoning through hard-coded special cases to achieve strong play.

## Playing Battleship

First we make the necessary Python imports and do a bit of housekeeping.


```python
%matplotlib inline
```


```python
from abc import ABC, abstractmethod
import datetime
from IPython.display import HTML
from itertools import product
import multiprocessing as mp
from tqdm import tqdm, trange
```


```python
from empiricaldist import Pmf
import matplotlib as mpl
from matplotlib import pyplot as plt
from matplotlib.animation import FuncAnimation
from matplotlib.colors import LinearSegmentedColormap
from matplotlib.ticker import IndexLocator, StrMethodFormatter
import numpy as np
from scipy import linalg, stats
import seaborn as sns
```


```python
FIG_WIDTH = 8
FIG_HEIGHT = 6
mpl.rcParams['figure.figsize'] = (FIG_WIDTH, FIG_HEIGHT)

CMAP = LinearSegmentedColormap.from_list(
    'battleship',
    [
        (0.0, 'blue'),
        (0.2, 'orange'),
        (1., 'red')
    ]
)
CMAP.set_bad('w')

sns.set(color_codes=True)

pct_formatter = StrMethodFormatter('{x:.1%}')
```


```python
SEED = 123456789 # for reproducibility

rng = np.random.default_rng(SEED)
```

We represent a Battleship board as a sequence of rectangular grids, one per ship.  For standard Battleship, that means a game consists of five $10 \times 10$ grids, the first grid containing a ship of length five, the seconding containing a ship of length four, and so on.

The following constants are useful for defining a standard game of Battleship.  (Note that we are using Hasbro's [names](https://en.wikipedia.org/wiki/Battleship_(game)#Description) for the ships, revised in 2002.)


```python
GRID_LENGTH = 10
SHIP_NAMES = [
    "Carrier",
    "Battleship",
    "Destroyer",
    "Submarine",
    "Patrol boat"
]
SHIP_SIZES = np.array([
    5, 
    4,
    3,
    3,
    2
])

n_ships = SHIP_SIZES.size
```

The following plots show how a Battleship board is represented as a sequence of five grids, one per ship.


```python
ships = np.zeros((n_ships, GRID_LENGTH, GRID_LENGTH))
ships[0, 0, :5] = 1
ships[1, 4:8, 7] = 1
ships[2, 9, 3:6] = 1
ships[3, 3:6, 1] = 1
ships[4, 5, 8:10] = 1
```


```python
def plot_board(board, cmap=CMAP,
               cbar=False, cbar_kwargs=None,
               ax=None, **heatmap_kwargs):
    if ax is None:
        _, ax = plt.subplots(figsize=(FIG_WIDTH, FIG_WIDTH))
        
    heatmap_kwargs.setdefault('vmin', 0)
    heatmap_kwargs.setdefault('vmax', 1)
    
    board_ = np.atleast_2d(board)
    mask = board_.mask if np.ma.is_masked(board_) else None
    
    if cbar_kwargs is None:
        cbar_kwargs = {}
        
    cbar_kwargs.setdefault('format', pct_formatter)
    cbar_kwargs.setdefault('label', "Posterior probability of a hit")
    
    sns.heatmap(board_, mask=mask, cmap=cmap,
                cbar=cbar, square=True,
                linewidths=1.5, linecolor='k',
                cbar_kws=cbar_kwargs,
                ax=ax, **heatmap_kwargs)
    
    if board_.shape[0] == 1:
        ax.set_yticklabels([])
        
    if cbar:
        cbar = ax.figure.axes[-1]
        cbar.set_ylabel(cbar.get_ylabel(), rotation=270)
        
    return ax
```


```python
fig, axes = plt.subplots(ncols=n_ships, sharex=True, sharey=True,
                         figsize=(n_ships * 2.5, 2.5))

for (ship, name, ax) in zip(ships, SHIP_NAMES, axes):
    plot_board(ship, ax=ax);
    
    ax.set_xticklabels([]);
    ax.set_yticklabels([]);
    ax.set_title(name);
    
fig.tight_layout();
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_13_0.png)</center>


Adding these ship grids gives us the two-dimensional board familiar to anyone who has played battleship.


```python
def to_board(ships, ship_axis=0):
    return ships.sum(axis=ship_axis)
```


```python
plot_board(to_board(ships));
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_16_0.png)</center>


The following class implements most of the basics necessary to track the state of a game of Battleship, make guesses, and reveal the contents of guessed spaces.


```python
class Battleship:
    def __init__(self, ships):
        self._ships = ships
        self._turn_revealed = []
        
    @property
    def _board(self):
        return to_board(self._ships)
        
    @property
    def grid_length(self):
        return self._board.shape[0]
    
    @property
    def is_solved(self):
        return self.revealed.sum() == self._board.sum()
    
    @property
    def revealed(self):
        return to_board(self._revealed_ships)
        
    @property
    def _revealed_ships(self):
        if self.turns > 0:
            return self._turn_revealed[-1]
        else:
            return np.ma.masked_all_like(self._ships)
    
    @property
    def ship_sizes(self):
        return self._ships.sum(axis=(1, 2))
    
    @property
    def sunk(self):
        ship_sizes = self._ships.sum(axis=(1, 2))
        revealed_sizes = (self._revealed_ships
                              .sum(axis=(1, 2))
                              .filled(0))
        
        return ship_sizes == revealed_sizes
    
    @property
    def turn_revealed(self):
        return [np.ma.masked_all_like(self._board)] \
                + [to_board(revealed) for revealed in self._turn_revealed]
    
    @property
    def turns(self):
        return len(self._turn_revealed)
```

These bookkeeping methods are fairly self-explanatory.  An instance of `Battleship` tracks which squares have been revealed to the opponent using `numpy`'s [masked arrays](https://numpy.org/doc/stable/reference/maskedarray.generic.html).  The `revealed` grid is masked wherever the opponent has not yet guessed.

The heart of our `Battleship` class is the `guess` method, which takes the coordinates to guess, and returns a tuple containing whether or not the guess resulted in a hit or miss, and the index of the ship sunk as a result of that guess (`None` if no ship was sunk).  (Here we use a [dirty trick](https://www.cgranade.com/blog/2016/10/07/documenting-long-classes-jupyter-notebook.html) to add a method to the `Battleship` class after it has already been defined for expository clarity. **Don't do this in practice!**)


```python
class Battleship(Battleship):
    def guess(self, i, j):
        if not self.revealed.mask[i, j]:
            raise ValueError(f"{i}, {j} already guessed")
        else:
            prev_sunk = self.sunk

            next_ships = self._revealed_ships.copy()
            next_ships[:, i, j] = self._ships[:, i, j]
            self._turn_revealed.append(next_ships)
            
            curr_sunk = self.sunk
            
            if (curr_sunk == prev_sunk).all():
                sunk = None
            else:
                sunk = (curr_sunk & ~prev_sunk).argmax()
            
            return self._board[i, j], sunk
```

In addition to this class representing game state and history, we define an abstract class `Strategy` that generates the guesses necessary to play a game.


```python
class Strategy(ABC):
    @abstractmethod
    def next_guess(self, revealed):
        pass

    def reveal(self, i, j, hit_or_miss, sunk):
        pass
```

The `next_guess` method takes a masked array of the board as revealed so far and should return the coordinates of the next spot to guess.  The `reveal` method takes guessed coordinates, an indicator of whether the guess resulted in a hit or miss, and the index of the ship sunk as a result of that guess (or `None`, as with `guess` above).  This method allows a `Strategy` to update internal state based on the result of guesses.  While some simple strategies can infer the next guess purely based on the state of the revealed board, we will see that it is useful when taking a Bayesian approach to maintain state inside a strategy.

The `play` function take a configuration of ships and a `Strategy` and plays the corresponding game of Battleship.


```python
def play(ships, strategy, progress_bar=False):
    game = Battleship(ships)
    
    if progress_bar:
        pbar = tqdm(total=int(ships.sum()))
    
    while not game.is_solved:
        i, j = strategy.next_guess(game.revealed)
        hit_or_miss, sunk = game.guess(i, j)
        strategy.reveal(i, j, hit_or_miss, sunk)
        
        if progress_bar and hit_or_miss == 1:
            pbar.update()
            
    if progress_bar:
        pbar.close()
        
    return game
```

The rest of this post progresses from strategies for simplified versions of Battleship to finally showing how to use ABC and Thompson sampling to achieve near optimal play.

### Manual guessing

This framework allows us to manually play Battleship by inputting user guesses and watching how the board evolves.


```python
class ManualStrategy(Strategy):
    def next_guess(self, revealed):
        ax = plot_board(revealed)
        ax.set_title("Currently revealed")
        plt.show()

        i = int(input("Enter row to guess: "))
        j = int(input("Enter column to guess: "))
        
        return i, j
```


```python
try:
    play(ships, ManualStrategy())
except KeyboardInterrupt:
    print("Game ended")
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_28_0.png)</center>


    Enter row to guess:  5
    Enter column to guess:  4



<center>![png](/resources/battleship_bayes_files/battleship_bayes_28_2.png)</center>


    Enter row to guess:  0
    Enter column to guess:  3



<center>![png](/resources/battleship_bayes_files/battleship_bayes_28_4.png)</center>


    Enter row to guess:  1
    Enter column to guess:  3



<center>![png](/resources/battleship_bayes_files/battleship_bayes_28_6.png)</center>


    Enter row to guess:  0
    Enter column to guess:  2



<center>![png](/resources/battleship_bayes_files/battleship_bayes_28_8.png)</center>


    Enter row to guess:  0
    Enter column to guess:  4



<center>![png](/resources/battleship_bayes_files/battleship_bayes_28_10.png)</center>


    Game ended


This strategy is not really useful for our purposes, but it provides a good illustration of how the game is usually played.  The white squares here indicate the cells whose contents are unknown because we have not yet guessed them.

### Row with one ship

We begin by simplifying the idea of Battleship to the most basic possible setting of a single row containing a single ship.

The following function generates all possible rows of a given length containing a ship of a given size.


```python
def get_all_ship_rows(grid_length, ship_size):
    i, j = np.indices((grid_length, grid_length))[:, :-ship_size + 1]
    
    return 1 * (i <= j) & (j < i + ship_size)
```

For a row of length three and a ship of size two (3/2), there are only two such rows.


```python
all_rows_3_2 = get_all_ship_rows(3, 2)
```


```python
ax = plot_board(all_rows_3_2)
ax.set_title("All rows 3/2");
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_34_0.png)</center>


For a row of length ten and a ship of size four (10/4), there are seven such rows.


```python
all_rows_10_4 = get_all_ship_rows(10, 4)
```


```python
ax = plot_board(all_rows_10_4)
ax.set_title("All rows 10/4");
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_37_0.png)</center>


We will compare our Bayesian strategies to several benchmark strategies, starting with the simplest possible strategy: random guessing.

#### Random guessing

The random guessing approach to Battleship is equivalent to the following urn problem from classic probability theory.  Imagine an urn containing 100 balls (corresponding to cells on the board), 17 of which are red (corresponding to cells covered by ships), and 83 of which are blue.  The number of turns required to solve Battleship through random guessing has the same distribution as the number of balls of any color that are drawn before all 17 red balls have been drawn.  It is well known (in the right circles, at least) that this corresponds to the [negative hypergeometric distribution](https://en.wikipedia.org/wiki/Negative_hypergeometric_distribution).

<center>
<figure>
<img src="https://austinrochford.com/resources/battleship_files/neg_hyp_geo.png" width=500>
<br>
<caption>Original image credit <a href="https://www.johndcook.com/blog/distribution_chart/">John D. Cook</a></caption>
</figure>
</center>

The following function returns the probability mass function (pmf) of the appropriate negative hypergeometric distribution given a grid and ship size.


```python
def get_random_guess_dist(grid_size, ship_size, n_hit=None):
    if n_hit is None:
        n_hit = ship_size

    support = np.arange(ship_size, grid_size + 1)
    nhg = stats.nhypergeom(grid_size,
                           grid_size - ship_size,
                           n_hit)
    
    return Pmf(nhg.pmf(support - ship_size), support)
```

We see, unsurprisingly, that random guessing will usually take near the maximum number of turns to solve the game.


```python
std_random_pmf = get_random_guess_dist(GRID_LENGTH**2, SHIP_SIZES.sum())
```


```python
def plot_turn_dist(pmf, kind='bar', mean=False, ax=None, mean_kwargs=None, **kwargs):
    if ax is None:
        _, ax = plt.subplots()
        
    if kind == 'bar':
        # pandas barplot uses odd indexing, making it hard to
        # mix bar and line plots if we use pandas's versions
        kwargs.setdefault('width', 1)
        kwargs.setdefault('alpha', 0.75)

        ax.bar(pmf.index, pmf, **kwargs)
    elif kind == 'line':
        pmf.plot(ax=ax, **kwargs)
    else:
        raise ValueError("kind must be one of 'bar' or 'line'")    
        
    if mean:
        if mean_kwargs is None:
            mean_kwargs = {}
            
        mean_kwargs.setdefault('ls', '--')
        
        ax.axvline(pmf.mean(), **mean_kwargs);
    
    ax.xaxis.grid(False)
    ax.set_xlabel("Turns")
    
    return ax
```


```python
def make_pct_yaxis(ax):
    ax.yaxis.set_major_formatter(pct_formatter)
    ax.set_ylabel("Probability")
    
    return ax
```


```python
std_turn_ax = plot_turn_dist(std_random_pmf, kind='line', mean=True)
    
make_pct_yaxis(std_turn_ax);
std_turn_ax.set_title("Random guessing\nStandard Battleship");
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_45_0.png)</center>


The dashed vertical line shows the expected number of turns to solve Battleship by randomly guessing,


```python
std_random_pmf.mean()
```




```
95.38888888888883
```



Returning the the case of a row with a single ship, we visualize the turn distribution of random guessin strategies for various row lengths and a ship of size two.


```python
RANDOM_ROW_LENGTHS = [4, 5, 8, 10]
```


```python
fig, axes = plt.subplots(nrows=len(RANDOM_ROW_LENGTHS) // 2, ncols=2,
                         sharey=True,
                         figsize=(FIG_WIDTH, 1.25 * FIG_HEIGHT))

for (row_length, ax) in zip(RANDOM_ROW_LENGTHS, axes.flat):
    pmf = get_random_guess_dist(row_length, 2)
    plot_turn_dist(pmf, ax=ax);
    
    make_pct_yaxis(ax);
    ax.set_title(f"{row_length}/2");

fig.suptitle("Random guessing");
fig.tight_layout();
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_50_0.png)</center>


We do the same for a ship of size three.


```python
fig, axes = plt.subplots(nrows=len(RANDOM_ROW_LENGTHS) // 2, ncols=2,
                         sharey=True,
                         figsize=(FIG_WIDTH, 1.25 * FIG_HEIGHT))

for (row_length, ax) in zip(RANDOM_ROW_LENGTHS, axes.flat):
    pmf = get_random_guess_dist(row_length, 3)
    plot_turn_dist(pmf, ax=ax);
    
    make_pct_yaxis(ax);
    ax.set_title(f"{row_length}/3");

fig.suptitle("Random guessing");
fig.tight_layout();
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_52_0.png)</center>


As with the case of standard Battleship, the most likely outcome is to use all the turns, and the expected value will be slightly below that.

#### Optimal search

In the simple setting of a row with a single ship, it is not too hard to work out the optimal search strategy, which consists of two phases.  First we must locate the ship by getting at least one hit.  Once the ship has been located, we must sink it by attacking spaces next to known hits until all of the ship has been found.

##### After at least one hit

We first implement optimal search after at least one hit has occurred.  In this case, we guess the spot immediately to the left of the leftmost hit, unless that hit is in the first cell, or the cell to its left has already been shown to contain water.  In those two cases, we guess the cell to the right of the rightmost hit until all cells containing the ship have been hit.  The following function implements this strategy.


```python
def next_guess_1d_with_hit(row):
    first = row.argmax()

    # found the left edge, fill out the ship to the right
    if first == 0 or row[first - 1] == 0:
        return first + row[first:].mask.argmax()
    # find the left edge
    else:
        return first - 1
```

We can show how this strategy works through a simple animated example.  Suppose the position of a length three ship on a length ten row is as shown below.


```python
board = np.zeros(10)
board[6:9] = 1
```


```python
plot_board(board);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_58_0.png)</center>


Also suppose that after three guesses, the following spots have been revealed.


```python
revealed = np.ma.masked_all_like(board)
revealed[[1, 4, 7]] = board[[1, 4, 7]]
```


```python
plot_board(revealed);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_61_0.png)</center>


The above strategy will take three guesses to sink the ship, as shown in the animation below.


```python
turn_revealed = [revealed]

next_j = next_guess_1d_with_hit(revealed)
next_revealed = revealed.copy()
next_revealed[next_j] = board[next_j]
turn_revealed.append(next_revealed)
revealed = next_revealed

next_j = next_guess_1d_with_hit(revealed)
next_revealed = revealed.copy()
next_revealed[next_j] = board[next_j]
turn_revealed.append(next_revealed)
revealed = next_revealed

next_j = next_guess_1d_with_hit(revealed)
next_revealed = revealed.copy()
next_revealed[next_j] = board[next_j]
turn_revealed.append(next_revealed)
revealed = next_revealed
```


```python
def animate_boards(boards,
                   cmap=CMAP, cbar=False, ax=None,
                   heatmap_kwargs=None, **ani_kwargs):
    if ax is None:
        fig, ax = plt.subplots(figsize=(FIG_WIDTH, FIG_WIDTH))
    else:
        fig = ax.figure
        
    if heatmap_kwargs is None:
        heatmap_kwargs = {}
        
    plot_board(boards[0],
               cmap=cmap, cbar=cbar, ax=ax,
               **heatmap_kwargs)
    
    quadmesh, *_ = ax.get_children()
    
    def ani_func(i):
        quadmesh.set_array(boards[i])
        
        return quadmesh,
    
    ani_kwargs.setdefault('blit', True)
    ani_kwargs.setdefault('frames', len(boards))
    
    return FuncAnimation(fig, ani_func, **ani_kwargs)
```


```python
%%capture
ani = animate_boards(turn_revealed, interval=300)
```


```python
HTML(ani.to_html5_video())
```




<center><video width="576" height="576" controls autoplay loop>
  <source type="video/mp4" src="data:video/mp4;base64,AAAAIGZ0eXBNNFYgAAACAE00ViBpc29taXNvMmF2YzEAAAAIZnJlZQAACgttZGF0AAACrgYF//+q
3EXpvebZSLeWLNgg2SPu73gyNjQgLSBjb3JlIDE2MSByMzAzME0gOGJkNmQyOCAtIEguMjY0L01Q
RUctNCBBVkMgY29kZWMgLSBDb3B5bGVmdCAyMDAzLTIwMjAgLSBodHRwOi8vd3d3LnZpZGVvbGFu
Lm9yZy94MjY0Lmh0bWwgLSBvcHRpb25zOiBjYWJhYz0xIHJlZj0zIGRlYmxvY2s9MTowOjAgYW5h
bHlzZT0weDM6MHgxMTMgbWU9aGV4IHN1Ym1lPTcgcHN5PTEgcHN5X3JkPTEuMDA6MC4wMCBtaXhl
ZF9yZWY9MSBtZV9yYW5nZT0xNiBjaHJvbWFfbWU9MSB0cmVsbGlzPTEgOHg4ZGN0PTEgY3FtPTAg
ZGVhZHpvbmU9MjEsMTEgZmFzdF9wc2tpcD0xIGNocm9tYV9xcF9vZmZzZXQ9LTIgdGhyZWFkcz02
IGxvb2thaGVhZF90aHJlYWRzPTEgc2xpY2VkX3RocmVhZHM9MCBucj0wIGRlY2ltYXRlPTEgaW50
ZXJsYWNlZD0wIGJsdXJheV9jb21wYXQ9MCBjb25zdHJhaW5lZF9pbnRyYT0wIGJmcmFtZXM9MyBi
X3B5cmFtaWQ9MiBiX2FkYXB0PTEgYl9iaWFzPTAgZGlyZWN0PTEgd2VpZ2h0Yj0xIG9wZW5fZ29w
PTAgd2VpZ2h0cD0yIGtleWludD0yNTAga2V5aW50X21pbj0zIHNjZW5lY3V0PTQwIGludHJhX3Jl
ZnJlc2g9MCByY19sb29rYWhlYWQ9NDAgcmM9Y3JmIG1idHJlZT0xIGNyZj0yMy4wIHFjb21wPTAu
NjAgcXBtaW49MCBxcG1heD02OSBxcHN0ZXA9NCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAAF
Z2WIhAAT//73sY+BTcgADZc6inof4RWx9JBRerHZoGTqAAADAAADAABOFqne+b9ctAjWAAAHoACZ
BoxnyHjmGgOknhxlCRU0gAKSx/GfJv8QAyuRIYdlbxF3Q0ZZ3nsNhTHogxkZ2QZ0H99af9E7BMkc
OBBoSIpfCBJoAhu6sySKjMlnxX+UfyLIi7YHDI/77e0FTWCEzQy6z1UUflgpdtl5FlX9eMIBHan8
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
">
  Your browser does not support the video tag.
</video>
</center>



##### Getting the first hit

Immediately it is clear that we only have to search one of the conrguence classes of the cell index mod the ship size to guarantee a hit.  In the following plot of a row of length ten, each congruence class mod three is colored differently.


```python
plot_board(np.arange(10) % 3, cmap='plasma', vmin=0, vmax=2);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_68_0.png)</center>


A moment's consideration shows that the congruence class of -1 modulo the ship size will always have the fewest elements of any of the congruence class, so we choose to search along these cells.  The following plot shows the cells to be searched until a hit is found in red.


```python
def get_search_cells_1d(grid_length, ship_size):
    i = np.arange(grid_length)
    
    return i[i % ship_size == -1 % ship_size]
```


```python
row = np.zeros(10)
row[get_search_cells_1d(10, 3)] = 1
```


```python
plot_board(row);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_72_0.png)</center>


The following subclass of `Strategy` implements the optimal strategy of searching along this grid until a hit is found, then greedily filling out the ship.


```python
class Single1DOptimalStrategy(Strategy):
    def __init__(self, grid_length, ship_size):
        self._grid_length = grid_length
        self._ship_size = ship_size
        
    def next_guess(self, revealed):
        if revealed.mask.all() or revealed.sum() == 0:
            search_j = get_search_cells_1d(self._grid_length,
                                           self._ship_size)            
            next_j = search_j[revealed.mask[0, search_j].argmax()]
        else:
            return 0, next_guess_1d_with_hit(revealed[0])
                
        return 0, next_j
```

We now use this strategy to play all three games with a length three ship on a length five row.


```python
all_rows_5_3 = get_all_ship_rows(5, 3)
```


```python
opt_row_games_5_3 = [
    play(ship_row[np.newaxis, np.newaxis],
         Single1DOptimalStrategy(5, 3))
        for ship_row in all_rows_5_3
]
opt_row_turns_5_3 = Pmf.from_seq([game.turns for game in opt_row_games_5_3])
```


```python
ax = plot_turn_dist(opt_row_turns_5_3)

make_pct_yaxis(ax);
ax.set_title("Optimal play\nShip size 3, row length 5");
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_78_0.png)</center>


Two of the games take four turns and one takes three turns.  Notably, no games take five turns. This is because we know that the third cell is a guaranteed hit in this configuration.

We can repeat this exercise for a row of length ten.


```python
all_rows_10_3 = get_all_ship_rows(10, 3)
```


```python
opt_row_games_10_3 = [
    play(ship_row[np.newaxis, np.newaxis],
         Single1DOptimalStrategy(10, 3))
        for ship_row in all_rows_10_3
]
opt_row_turns_pmf_10_3 = Pmf.from_seq([game.turns for game in opt_row_games_10_3])
```


```python
ax = plot_turn_dist(opt_row_turns_pmf_10_3)

make_pct_yaxis(ax);
ax.set_title("Optimal play\nShip size 3, row length 10");
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_82_0.png)</center>


We see that no games take more than six turns with this configuration.  Since the equivalence class of -1 modulo 3 contains three members (2, 5, and 8), we are guaranteed to get our first hit in at most three guesses, and once we have a first hit it will take at most three guesses to sink the ship (two hits and potentially one miss if the first hit was not on the rightmost cell of the ship).

#### Bayesian (Thompson sampling)

The above thought exercise is interesting, but it involves several domain-specific insights (the optimal search grid, how to optimally sink a ship that has been located) that do not generalize immediately to two-dimensional grids that allow ships to be oriented in either rows or columns. (Note that if we restrict our ship in an $m \times n$ grid to be oriented along a row, we're essentially playing a one-dimensional game on a row of length $m \cdot n$.)  In this section we will show how to reproduce the above results using a Bayesian approach to this game of simplified Battleship.  This approach will generalize to a near-optimal strategy for standard Battleship with many fewer hard coded rules than the above optimal one-dimensional strategy requires to generalize.

<center><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/18/Bayes%27_Theorem_MMB_01.jpg/1280px-Bayes%27_Theorem_MMB_01.jpg" width=500></center>

We begin by enumerating all possible boards for a given row/ship configuration (in this case 5/3).


```python
ax = plot_board(all_rows_5_3)
ax.set_yticklabels([]);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_85_0.png)</center>


We consider this set of ships as a uniform prior distribution on the set of possible board layouts. With this perspective, when we take the average in each columns, we get the prior probability that each cell contains a ship.

We already see that this Bayesian approach thhat we can conclude that the third cell must contain a ship without doing any modular arithmetic. 

For a configuration with a longer row (10/3), we see that the middle six cells have the higest prior probability of containing a ship.  This makes sense as there are three configurations in which each of these cells contains a ship, but only one configuration in which the first cell contains a ship, and similarly for the other cells near the edges.


```python
all_rows_10_3 = get_all_ship_rows(10, 3)
```


```python
plot_board(all_rows_10_3.mean(axis=0), cbar=True);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_89_0.png)</center>


Looking at these probabilities, a resonable strategy would seem to be to guess the next cell with the highest probability of containing a hit.  In both the 5/3 and 10/3 cases, this would result in guessing the third cell next. (By convention when many cells have the same hit probability, we will choose the one wit smallest coordinates.)

Let's focus on the 5/3 configuration for the moment and return to 10/3 after.  Suppose the true 5/3 board is as follows.


```python
board_5_3 = np.zeros(5)
board_5_3[1:4] = 1
```


```python
plot_board(board_5_3);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_92_0.png)</center>


Guessing the third cell must result in a hit in the 5/3 configuration, so after one guess the following board has been revealed.


```python
revealed_5_3 = np.ma.masked_all_like(board_5_3)
revealed_5_3[2] = board_5_3[2]
```


```python
plot_board(revealed_5_3);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_95_0.png)</center>


With this information, what should our next guess be?  For the first guess we chose the cell with the highest prior probability of yielding a hit, so it seems intuitive that we would choose the cell with the highest _posterior_ probability of yielding a hit, given the observation from our first guess.

We can get this posterior distribution by eliminating the boards that do not match the cells that have been revealed to us.


```python
def is_compat(ships, revealed, board_axis=(-2, -1)):
    return (ships == revealed).all(axis=board_axis)
```


```python
compat_5_3 = all_rows_5_3[
    is_compat(all_rows_5_3, revealed_5_3, board_axis=-1)
]
```


```python
ax = plot_board(compat_5_3)
ax.set_yticklabels([]);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_99_0.png)</center>


Since the third cell is guaranteed to be a hit in the 5/3 configuration, all ship layouts are compatible with the result of our first guess, and the posterior is the same as the prior _restricted to unknown cells_.  With this restriction our posterior is as follows.


```python
plot_board(
    np.ma.masked_array(compat_5_3.mean(axis=0),
                       mask=~revealed_5_3.mask),
    cbar=True
);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_101_0.png)</center>


We see that out of all the unknown cells, the second and third are tied for the highest posterior probability of being a hit.  By our convention, we will choose the second cell as the next guess, which we know will reveal a hit.


```python
revealed_5_3[1] = board_5_3[1]
```


```python
plot_board(revealed_5_3);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_104_0.png)</center>


With this observations we are able to eliminate one of the potential boards.


```python
compat_5_3 = all_rows_5_3[
    is_compat(all_rows_5_3, revealed_5_3, board_axis=-1)
]
```


```python
ax = plot_board(compat_5_3)
ax.set_yticklabels([]);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_107_0.png)</center>


Combining these two compatible boards to form the posterior distribution, we get the following.


```python
ax = plot_board(
    np.ma.masked_array(compat_5_3.mean(axis=0),
                       mask=~revealed_5_3.mask),
    cbar=True
)
ax.set_yticklabels([]);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_109_0.png)</center>


We see that it is impossible for the fourth cell to contain a hit, and there's a 50% chance that the first and fourth cells will be a hit.  By our convention above, we guess the first cell, resulting in a miss.


```python
revealed_5_3[0] = board_5_3[0]
```


```python
plot_board(revealed_5_3);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_112_0.png)</center>


Finally we see that there is only one board compatible with the information that has been revealed, so we guess the fourth cell to end the game.


```python
compat_5_3 = all_rows_5_3[
    is_compat(all_rows_5_3, revealed_5_3, board_axis=-1)
]
```


```python
ax = plot_board(compat_5_3)
ax.set_yticklabels([]);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_115_0.png)</center>


We now return to the 10/3 case.  Suppose we are working with the following board.


```python
board_10_3 = np.zeros(10)
board_10_3[5:8] = 1
```


```python
plot_board(board_10_3);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_118_0.png)</center>


Recalling the prior distribution on hits in the 10/3 configuration, we see first guess the third cell, revealing a miss.


```python
plot_board(all_rows_10_3.mean(axis=0), cbar=True);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_120_0.png)</center>



```python
revealed_10_3 = np.ma.masked_all_like(board_10_3)
revealed_10_3[2] = board_10_3[2]
```


```python
plot_board(revealed_10_3);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_122_0.png)</center>


Excluding boards that are incompatible with a miss in the third cell, we see that we have already ruled out a ship in the first two cells as well.


```python
compat_10_3 = all_rows_10_3[
    is_compat(all_rows_10_3, revealed_10_3, board_axis=-1)
]
```


```python
ax = plot_board(compat_10_3)
ax.set_yticklabels([]);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_125_0.png)</center>


Unsurprisingly, the sixth through eight cells are tied for the highest probability of yielding a hit, so we guess the six cell, revealing a hit.


```python
plot_board(compat_10_3.mean(axis=0), cbar=True);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_127_0.png)</center>



```python
revealed_10_3[5] = board_10_3[5]
```


```python
plot_board(revealed_10_3);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_129_0.png)</center>


Hitting the rest of the ship will proceed similarly to the 5/3 case, so we stop playing here.

This approach of calculating the posterior distribution by enumerating the possible grids and eliminating those that are incompatible with the observed hits and misses is a very simple type of [approximate Bayesian computation](https://en.wikipedia.org/wiki/Approximate_Bayesian_computation) (ABC).  ABC is a fascinating and deep field of research in its own right, and we are really only scratching its surface here.

Choosing to guess the cell with the [maximum a posteriori](https://en.wikipedia.org/wiki/Maximum_a_posteriori_estimation) (MAP) is a simplified (greedy) form of [Thompson sampling](https://en.wikipedia.org/wiki/Thompson_sampling), a Bayesian approach to playing games of incomplete information that chooses the next action according to the probability that it maximizes the expected reward.  In the simple situation of a single ship (in both one and two dimensions) we can calculate the cell(s) that has the MAP probability chance of yielding a hit (the expected reward) exactly, so this strategy becomes greedy.  (I have a soft spot for Thompsons sampling in general as we use it in a number of our machine-learning based products at [Kibo](https://kibocommerce.com/), where I work.  For a discussion of the applications of Thompson sampling to e-commerce optimization, take a look at my [talks](https://austinrochford.com/talks.html).)


```python
def argmax_2d(x):
    max_i = x.max(axis=1).argmax()
    max_j = x[max_i].argmax()
    
    return max_i, max_j
```


```python
class SingleThompsonStrategy(Strategy):
    def __init__(self, poss_ships):
        self._poss_ships = poss_ships
    
    def compat_ships(self, revealed):
        if revealed.mask.all():
            return self._poss_ships
        else:
            is_compat_ = is_compat(self._poss_ships, revealed)

            return self._poss_ships[is_compat_]
    
    def next_guess(self, revealed):
        post = np.ma.masked_array(
            self.compat_ships(revealed).mean(axis=0),
            mask=~revealed.mask
        )
        
        return argmax_2d(post)
```

We watch this strategy play the game we started above.


```python
ts = SingleThompsonStrategy(all_rows_10_3[:, np.newaxis, :])
game_10_3 = play(board_10_3[np.newaxis, np.newaxis, :], ts,
                 progress_bar=True)
```

    100%|██████████| 3/3 [00:00<00:00, 391.81it/s]



```python
%%capture
ani = animate_boards(game_10_3.turn_revealed)
```


```python
HTML(ani.to_html5_video())
```




<center>
<video width="576" height="576" controls autoplay loop>
  <source type="video/mp4" src="data:video/mp4;base64,AAAAIGZ0eXBNNFYgAAACAE00ViBpc29taXNvMmF2YzEAAAAIZnJlZQAACuJtZGF0AAACrgYF//+q
3EXpvebZSLeWLNgg2SPu73gyNjQgLSBjb3JlIDE2MSByMzAzME0gOGJkNmQyOCAtIEguMjY0L01Q
RUctNCBBVkMgY29kZWMgLSBDb3B5bGVmdCAyMDAzLTIwMjAgLSBodHRwOi8vd3d3LnZpZGVvbGFu
Lm9yZy94MjY0Lmh0bWwgLSBvcHRpb25zOiBjYWJhYz0xIHJlZj0zIGRlYmxvY2s9MTowOjAgYW5h
bHlzZT0weDM6MHgxMTMgbWU9aGV4IHN1Ym1lPTcgcHN5PTEgcHN5X3JkPTEuMDA6MC4wMCBtaXhl
ZF9yZWY9MSBtZV9yYW5nZT0xNiBjaHJvbWFfbWU9MSB0cmVsbGlzPTEgOHg4ZGN0PTEgY3FtPTAg
ZGVhZHpvbmU9MjEsMTEgZmFzdF9wc2tpcD0xIGNocm9tYV9xcF9vZmZzZXQ9LTIgdGhyZWFkcz02
IGxvb2thaGVhZF90aHJlYWRzPTEgc2xpY2VkX3RocmVhZHM9MCBucj0wIGRlY2ltYXRlPTEgaW50
ZXJsYWNlZD0wIGJsdXJheV9jb21wYXQ9MCBjb25zdHJhaW5lZF9pbnRyYT0wIGJmcmFtZXM9MyBi
X3B5cmFtaWQ9MiBiX2FkYXB0PTEgYl9iaWFzPTAgZGlyZWN0PTEgd2VpZ2h0Yj0xIG9wZW5fZ29w
PTAgd2VpZ2h0cD0yIGtleWludD0yNTAga2V5aW50X21pbj01IHNjZW5lY3V0PTQwIGludHJhX3Jl
ZnJlc2g9MCByY19sb29rYWhlYWQ9NDAgcmM9Y3JmIG1idHJlZT0xIGNyZj0yMy4wIHFjb21wPTAu
NjAgcXBtaW49MCBxcG1heD02OSBxcHN0ZXA9NCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAAE
kGWIhAAS//73rd+BTcBA7Wu6Vzi0y6uUND1R9pSmeLZIAAADAAADAAIRcKTdcx9EHWf4AAAhYALW
HqH8JyQ4gBKC1ImXhdEKAApKn8Z8m/xAD2TXBZ6JSrZPQJZbqHUXqu9KcDl/RE/0Z1dyxsifoduF
d5I4LCAjieysNMXLIWJQbtOt9VlFXE5wQdeMjQkA79A0hvYMTyUEmYHtBjTar4kE5isdGzhbLlTb
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
YXZmNTguNDUuMTAw
">
  Your browser does not support the video tag.
</video>
</center>



As with our optimal row strategy, we can play every possible 10/3 game with the Thompson sampling strategy and compare the distributions of the number of turns.


```python
ts_row_games_10_3 = [
    play(row[np.newaxis, np.newaxis],
         SingleThompsonStrategy(all_rows_10_3[:, np.newaxis, :]))
        for row in all_rows_10_3
]
ts_row_turns_pmf_10_3 = Pmf.from_seq([
    game.turns for game in ts_row_games_10_3
])
```


```python
fig, (opt_ax, ts_ax) = plt.subplots(nrows=2, sharex=True, sharey=True,
                                    figsize=(FIG_WIDTH, 2 * FIG_HEIGHT))

plot_turn_dist(opt_row_turns_pmf_10_3, color='C0', ax=opt_ax);

make_pct_yaxis(opt_ax);
opt_ax.set_title("Optimal play");

plot_turn_dist(ts_row_turns_pmf_10_3, color='C1', ax=ts_ax);

make_pct_yaxis(ts_ax);
ts_ax.set_title("Thompson sampling");

fig.suptitle("Ship size 3, row length 10");
fig.tight_layout();
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_139_0.png)</center>


It turns out that for a single row with a single ship, the Thompson sampling strategy is optimal!

<center>
<figure>
<img src="https://sinmantyx.files.wordpress.com/2015/05/m6xj1.jpg">
<br>
<caption>Image credit <a href="https://sinmantyx.wordpress.com/2015/05/29/bayes-theorem-205-hypothesis-fever-and-falsification/">SINMANTYX</a></caption>
</figure>
</center>

It is extremely cool to me that we can reproduce the optimal strategy without too much domain-specific thought, but just by enumerating all possible boards and sequentially eliminating the ones that are no longer compatible with the observed (revealed) data!  This result is particularly exciting because, as we will see, the generalization of the row-optimal strategy to a two-dimensional grid is not straightforward (even for just one ship), but the Thompson sampling approach generalizes much more readily.

### Square, one ship

We now turn to the case of a square grid with one ship on it to see how these strategies generalize to something closer to standard Battleship.

#### Random guessing

Once again the number of turns it takes to sink the ship follows a negative hypergeometric distribution.  For the 5/5/3 configuration, this distribution is shown below.


```python
random_5_5_3_pmf = get_random_guess_dist(5**2, 3)
```


```python
ax = plot_turn_dist(random_5_5_3_pmf, kind='line', mean=True)

make_pct_yaxis(ax);
ax.set_title(r"5/5/3");
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_143_0.png)</center>


There are not really any surprises here; the geometry of the board and the ability to have ships orient along rows or columns doesn't affect the random guessing strategy at all.

#### Near optimal

We now construct a near optimal strategy for one ship on a two-dimensional grid based on trying to reduce the problem to search on a one-dimensional row/column as quickly as possible.  We call this strategy "near optimal" because we will see that it takes slightly more turns, on average, than a Thompson sampling strategy to sink the ship.

It is tempting to treat an $m \times n$ two-dimensional grid as a $m \cdot n$ one-dimensional grid and use the search grid from the above strategy, but this grid will only minimize the turns-to-first-hit when $m$ and $n$ are [relatively prime](https://en.wikipedia.org/wiki/Coprime_integers).  To illustrate this fact, we show the results of wrapping the search grid for the 100/2 configuration to the 10/10/2 configuration below.


```python
bad_search_j_1d = get_search_cells_1d(100, 2)
bad_search_i, bad_search_j = np.divmod(bad_search_j_1d, 10)
bad_search_grid = np.zeros((10, 10))
bad_search_grid[bad_search_i, bad_search_j] = 1
```


```python
ax = plot_board(bad_search_grid)
ax.set_title(r"Don't do this!", fontweight='bold');
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_147_0.png)</center>


Clearly this search strategy can fail to locate a column-oriented ship in an even-numbered column even after fifty guesses!

Instead, the optimal grid to search for the initial hit (at least for a square grid) is to cycle through the equivalence classes modulo the ship size in each row, as shown below for both the 10/10/2 and the 5/5/3 configurations.


```python
def get_search_cells_2d(grid_shape, ship_size):
    i, j = np.indices(grid_shape)
    in_grid = (i - 1) % ship_size == j % ship_size
    
    return i[in_grid], j[in_grid]
```


```python
search_i, search_j = get_search_cells_2d((10, 10), 2)
search_grid = np.zeros((10, 10))
search_grid[search_i, search_j] = 1
```


```python
ax = plot_board(search_grid)
ax.set_title(r"Ship size 3, $5 \times 5$ grid");
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_151_0.png)</center>



```python
search_i, search_j = get_search_cells_2d((5, 5), 3)
search_grid = np.zeros((5, 5))
search_grid[search_i, search_j] = 1
```


```python
ax = plot_board(search_grid)
ax.set_title(r"Ship size 3, $5 \times 5$ grid");
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_153_0.png)</center>


We can tell that these search grids are optimal because each cell highlighted in red is one cell less than the ship shize away from any other hightlighted cell.

Once a hit has been found by searching these cells, we have to determine if the ship is oriented along the row or column passing through that cell.  For hits near a boundary (in cells less than a ship's length away from either the top/bottom or left/right edge) we only have to test one cell to decide which way the ship is oriented.  For hits at the interior we have to, in general, test two adjacent cells (either left and right or above and below) to determine the orientation of the ship.

The following plot highlights the cells that only require one test guess to determine the row/column orientation following a hit for the 10/10/3 configuration.


```python
near_edge = np.zeros((10, 10))
i, j = np.indices((10, 10))
near_edge[(i < 2) | (7 < i) | (j < 2) | (7 < j)] = 1
```


```python
plot_board(near_edge);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_156_0.png)</center>


The strategy outlined here is implemented below.


```python
class SingleGridStrategy(Strategy):
    def __init__(self, ship_size):
        self._ship_size = ship_size

    def next_guess(self, revealed):
        if revealed.mask.all() or revealed.sum() == 0:
            next_unmasked = (revealed.mask
                                     [search_i, search_j]
                                     .argmax())

            return search_i[next_unmasked], search_j[next_unmasked]
        else:
            grid_length, _ = revealed.shape
            hit_i, hit_j = argmax_2d(revealed)
            ship_size = self._ship_size
            
            if revealed.sum() == 1:                
                if hit_i < ship_size - 1 or grid_length - ship_size < hit_i:
                    next_i = hit_i + (1 if hit_i < ship_size - 1 else -1)
                    
                    if revealed.mask[next_i, hit_j]:
                        return next_i, hit_j
                    else:
                        is_row = revealed[next_i, hit_j] == 0
                elif hit_j < ship_size - 1 or grid_length - ship_size < hit_j:
                    next_j = hit_j + (1 if hit_j < ship_size - 1 else -1)
                    
                    if revealed.mask[hit_i, next_j]:
                        return hit_i, next_j
                    else:
                        is_row = revealed[hit_i, next_j] == 1
                elif revealed.mask[hit_i, hit_j - 1]:
                    return hit_i, hit_j - 1
                elif revealed.mask[hit_i, hit_j + 1]:
                    return hit_i, hit_j + 1
                else:
                    is_row = False
            else:                
                is_row = revealed[hit_i].sum() > 1
                
            if is_row:
                return hit_i, next_guess_1d_with_hit(revealed[hit_i])
            else:
                return next_guess_1d_with_hit(revealed[:, hit_j]), hit_j
```

This strategy involves quite a bit of branching logic and more than a few magic numbers.  While I do not doubt that this implementation can be simplified, avoiding complex branching logic is one of the motivations for a simulation-based Bayesian approach to Battleship.

To understand the distribution of turns required by this strategy to sink the ship, we define a function that generates all square grids of a given shape with a single ship of a given size.


```python
def get_all_ships(grid_length, ship_size):
    rows = get_all_ship_rows(grid_length, ship_size)
    n_rows, _ = rows.shape
    
    i = np.arange(grid_length)

    boards = np.zeros((
        n_rows, grid_length,
        grid_length, grid_length,
    ))
    boards[:, i, i, :] = rows[:, np.newaxis]
    long_boards = boards.reshape((-1, grid_length, grid_length))
    
    return np.concatenate((
        long_boards,
        long_boards.transpose(0, 2, 1)
    ))
```

We generate all possible boards for the 5/5/3 configuration and visualize a few of them.


```python
all_ships_5_5_3 = get_all_ships(5, 3)
```


```python
fig, axes = plt.subplots(nrows=2, ncols=2, sharex=True, sharey=True,
                         figsize=(FIG_WIDTH, FIG_WIDTH))

plt_boards = rng.choice(all_ships_5_5_3, size=axes.size, replace=False)

for (board, ax) in zip(plt_boards, axes.flat):
    plot_board(board, ax=ax);

fig.suptitle("Four boards, 5/5/3");
fig.tight_layout();
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_163_0.png)</center>


We now play all 5/5/3 games using this strategy.


```python
grid_games_5_5_3 = [
    play(ship[np.newaxis], SingleGridStrategy(3))
        for ship in all_ships_5_5_3
]
grid_turns_pmf_5_5_3 = Pmf.from_seq([
    game.turns for game in grid_games_5_5_3
])
```


```python
ax = plot_turn_dist(grid_turns_pmf_5_5_3,
                    color='C1', label="Near optimal",
                    mean=True, mean_kwargs={'c': 'C1'});
plot_turn_dist(random_5_5_3_pmf,
               kind='line', c='C0',
               mean=True, mean_kwargs={'c': 'C0'},
               label="Random",
               ax=ax)

make_pct_yaxis(ax);

ax.legend();
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_166_0.png)</center>


We see that this near optimal strategy is an significant improvement over random guessing (which is expected). Intuitively, it seems odd that the distribution is bimodal.  In fact, we will see after implementing Thompson sampling in the two-dimensional case, that this strategy is definitely not optimal.

#### Bayesian (Thompson sampling)
 
The generalization of one-dimensional Thompson sampling to a two-dimensional grid is much simpler than the above generalization of the one-dimensional optimal strategy.  The implementation of Thompson sampling for a single ship in two dimensions is shown below.


```python
class SingleThompsonStrategy(Strategy):
    def __init__(self, poss_ships):
        self._poss_ships = poss_ships
    
    def compat_ships(self, revealed):
        if revealed.mask.all():
            return self._poss_ships
        else:
            is_compat_ = is_compat(self._poss_ships, revealed)

            return self._poss_ships[is_compat_]
    
    def next_guess(self, revealed):
        post = np.ma.masked_array(
            self.compat_ships(revealed).mean(axis=0),
            mask=~revealed.mask
        )
        
        return argmax_2d(post)
```

We now play all 5/5/3 games with this strategy to understand its turn distribution.


```python
ts_games_5_5_3 = [
    play(ship[np.newaxis], SingleThompsonStrategy(all_ships_5_5_3))
        for ship in all_ships_5_5_3
]
ts_turns_pmf_5_5_3 = Pmf.from_seq([
    game.turns for game in ts_games_5_5_3
])
```

As alluded to above, we see that the turn distribution for Thompson sampling is concentrated to the left of the turn distribution for our near optimal strategy.


```python
ax = plot_turn_dist(grid_turns_pmf_5_5_3,
                    color='C1', label="Near optimal",
                    mean=True, mean_kwargs={'c': 'C1'});
plot_turn_dist(random_5_5_3_pmf,
               kind='line', c='C0',
               mean=True, mean_kwargs={'c': 'C0'},
               label="Random",
               ax=ax)
plot_turn_dist(ts_turns_pmf_5_5_3,
               color='C2', label="Thompson sampling",
               mean=True, mean_kwargs={'c': 'C2'},
               ax=ax);

make_pct_yaxis(ax);

ax.legend(loc='upper right');
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_173_0.png)</center>


Note that while the turn distribution for Thompson sampling is concentrated further to the left, the expected numbers of turns for Thompson sampling and our near optimal strategy, indicated by the dashed vertical lines, are quite close.

No doubt we could improve the logic of our near optimal strategy to match (or perhaps even beat) Thompson sampling, but the generalization of Thompson sampling to the two-dimensional grid is so much more elegant that it seems hardly worthwhile.

### Standard battleship

Now that we understand these approaches to simplified versions of Battleship, we are ready to tackle the Thompson sampling approach to standard Battleship.

#### Random

From above we recall the turn distribution for random guessing at standard Battleship.


```python
std_turn_ax.figure
```




<center>![png](/resources/battleship_bayes_files/battleship_bayes_176_0.png)</center>



#### Optimistic expected values

Generalizing the optimal one-dimensional strategy to two dimensions was sufficiently difficult that we do not attempt to define even a near optimal strategy for standard Battleship.  Configurations where several ships are adjacent, such as the one shown below, will certainly lead to complex and bug-prone branching logic.


```python
ships = np.zeros((n_ships, GRID_LENGTH, GRID_LENGTH))
ships[0, 0, :5] = 1
ships[1, 1, :4] = 1
ships[2, 2, :3] = 1
ships[3, 3, :3] = 1
ships[4, 4, :2] = 1
```


```python
fig, axes = plt.subplots(ncols=n_ships, sharex=True, sharey=True,
                         figsize=(n_ships * 2.5, 2.5))

for (ship, name, ax) in zip(ships, SHIP_NAMES, axes):
    plot_board(ship, ax=ax);
    
    ax.set_xticklabels([]);
    ax.set_yticklabels([]);
    ax.set_title(name);
    
fig.tight_layout();
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_179_0.png)</center>



```python
plot_board(to_board(ships));
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_180_0.png)</center>


In spite of these challenges, we will want to at least be able to benchmark the average number of turns Thompson sampling requires against other approaches.  Fortunately we can propose several scenarios for which the expected number of turns is straightforward to calculate.

### Extremely optimistic

We can make two assumptions to get a reasonable floor on the expected number of turns.

1. The first five hits we get are each from a different ship.
2. As soon as we hit a ship, we know the complete location of that ship.

Together with a search strategy for the first five hits, we can calculate the expected value in this unrealistic but instructive scenario.  Weakening these assumptions also leads to more realistic expected values to which we can compare the performance of Thompson sampling.

A fairly efficient search strategy for the first five hits in standard Battle ship is to search a mod-two grid (since the smallest ship has size two).


```python
search_i, search_j = get_search_cells_2d((10, 10), 2)
search_grid = np.zeros((10, 10))
search_grid[search_i, search_j] = 1
```


```python
ax = plot_board(search_grid)
ax.set_title(r"Standard Battleship");
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_183_0.png)</center>


The distribution of the number of turns it takes to get five hits in these fifty cells is given below.


```python
extreme_hit_pmf = get_random_guess_dist(search_grid.sum(),
                                        np.ceil(SHIP_SIZES / 2).sum(),
                                        n_hit=SHIP_SIZES.size)
```


```python
ax = plot_turn_dist(extreme_hit_pmf, mean=True)

make_pct_yaxis(ax);
ax.set_title("Finding five ships on a\n"
             r"$10 \times 10$ grid (optimistically)");
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_186_0.png)</center>


Under the second assumption, it will take us 12 more guesses to sink all the ships, so the expected number of turns to solve the game (optimistically) is


```python
extreme_ev = extreme_hit_pmf.mean() + (SHIP_SIZES - 1).sum()
```


```python
extreme_ev
```




```
40.18181818181814
```



Under the slightly more conservative (but still optimistic) assumption that it takes on average one and a half misses to determine the location and orientation of a ship, the expected value becomes


```python
optim_ev = extreme_hit_pmf.mean() + 1.5 * SHIP_SIZES.size + (SHIP_SIZES - 2).sum()
```


```python
optim_ev
```




```
42.68181818181814
```



We will use these two figures to benchmark the performance of Thompson sampling for standard Battleship in the next section.

#### Bayesian (Thompson sampling)

Generalizing the Thompson sampling strategy from one ship on a two-dimensional grid to standard Battleship is slighly more conceptually involved than generalize from one- to two-dimensional grids with one ship, but not too much more.

The generalization also requires some computational optimizations, as we can no longer expect to enumerate and store all possible configurations of the board on reasonably sized hardware.  To illustrate this and facilitate our eventual solution to this issue, we generate all possible configurations of each ship.


```python
all_ships = [get_all_ships(GRID_LENGTH, ship_size) for ship_size in SHIP_SIZES]
```

Even though we can enumerate the possibilities for each ship easily,


```python
n_ship_grids = np.array([len(ships) for ships in all_ships])
```


```python
n_ship_grids
```




```
array([120, 140, 160, 160, 180])
```



there are more than $10^{10}$ possible combinations in the cartesian product of these configurations


```python
np.log10(n_ship_grids).sum()
```




```
10.88882175214102
```



Now, not all elements of the Cartesian product produce valid boards (the ships may overlap).  An example of such an element is given below.


```python
ships = np.zeros((n_ships, GRID_LENGTH, GRID_LENGTH))
ships[0, 0, :5] = 1
ships[1, 0, :4] = 1
ships[2, 0, :3] = 1
ships[3, 0, :3] = 1
ships[4, 0, :2] = 1
```


```python
fig, axes = plt.subplots(ncols=n_ships, sharex=True, sharey=True,
                         figsize=(n_ships * 2.5, 2.5))

for (ship, name, ax) in zip(ships, SHIP_NAMES, axes):
    plot_board(ship, ax=ax);
    
    ax.set_xticklabels([]);
    ax.set_yticklabels([]);
    ax.set_title(name);
    
fig.tight_layout();
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_203_0.png)</center>



```python
plot_board(to_board(ships), vmax=5.,
           cbar=True,
           cbar_kwargs={
               'format': '%d',
               'label': "Number of ships"
           });
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_204_0.png)</center>


The following function tests to see if an array of ship grids constitutes a valid board (has no overlap).


```python
def has_no_overlap(ships, ship_axis=0, board_axis=(-2, -1)):
    return (to_board(ships, ship_axis=ship_axis)
                .max(axis=board_axis) \
                == 1)
```


```python
has_no_overlap(ships)
```




```
False
```



Even eliminating sets of ships that do overlap, there are still too many possible boards to enumerate.  To address this challenge we will switch from Thompson _enumeration_, which is a more proper description of what we've been doing so far to Thompson _sampling_.  Instead of enumerating all boards compatible with the currently revealed information and choosing the unknown cell with the highest posterior probability of yielding a hit, we will draw a sample from the posterior distribution of compatible boards, calculate the cell most likely to yield a hit based on this sample to use as the next guess.

This sampling approach means we only need to be able to simulate random games of Battleship and check if they are compatible with the currently revealed information in order to generalize Thompson sampling to standard Battleship.  Simulating random games of Battleship is not particularly hard, but simulating games compatible with boards that have many spots revealed can take a prohibitively long time if done naively by sampling from each ship's possible configurations and then testing to see if the product of the samples is compatible.  (I have tried this and had it take over an hour to generate a compatible sample with approximately 30 cells revealed.)

Fortunately we can address this issue by intelligently propagating hits and misses from the aggregate board to each ship's grid and restricting to a subset of each ship's position that is more likely to produce a compatible board when combined with all the other ship samples.

Before walking through this process, we introduce the machinery necessary to sample random (compatible) boards.


```python
def _sample_compat_ships_block(poss_ships, revealed,
                               rng=None, block_size=10_000):
    if rng is None:
        rng = np.random.default_rng()

    samples = np.stack([
            rng.choice(ships, size=block_size, shuffle=False)
                for ships in poss_ships
        ],
        axis=1
    )
    
    has_no_overlap_ = has_no_overlap(samples, ship_axis=1)
    valid_samples = samples[has_no_overlap_]
    
    if revealed.mask.all():
        return valid_samples
    else:
        is_compat_ = is_compat(to_board(valid_samples, ship_axis=1), revealed)
    
        return valid_samples[is_compat_]
    
def sample_compat_ships_block(poss_ships, revealed,
                              rng=None, block_size=10_000):
    block = []
    
    while len(block) == 0:
        block = _sample_compat_ships_block(
            poss_ships, revealed,
            rng=rng, block_size=block_size
        )
        
    return block


def generate_compat_ships(poss_ships, revealed,
                          rng=None, block_size=10_000):
    while True:
        yield from sample_compat_ships_block(
            poss_ships, revealed,
            rng=rng, block_size=block_size
        )
```


```python
def take(n, gen, progress_bar=False):
    n_range = trange(n) if progress_bar else range(n)
    
    return [x for _, x in zip(n_range, gen)]
```


```python
def sample_compat_ships(poss_ships, revealed, n,
                        rng=None, block_size=10_000,
                        progress_bar=False):
    compat_gen = generate_compat_ships(poss_ships, revealed,
                                       rng=rng)
    
    return np.array(take(n, compat_gen,
                         progress_bar=progress_bar))

def sample_ships(poss_ships, n,
                 rng=None, block_size=10_000,
                 progress_bar=False):
    empty = np.ma.masked_all_like(all_ships[0][0])
    
    return sample_compat_ships(poss_ships, empty, n,
                               rng=rng, block_size=block_size,
                               progress_bar=progress_bar)
```

We plot four randomly sampled boards below.


```python
ships = sample_ships(all_ships, 4, rng=rng)
```


```python
fig, axes = plt.subplots(nrows=2, ncols=2, sharex=True, sharey=True,
                         figsize=(FIG_WIDTH, FIG_WIDTH))

for (ships_, ax) in zip(ships, axes.flat):
    plot_board(to_board(ships_), ax=ax);

fig.suptitle("Four boards, standard Battleship");
fig.tight_layout();
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_214_0.png)</center>


To illustrate how long it can take to sample compatible boards from the full Cartesian product, we randomly mask one third of the cells in the first board above and attempt to sample a compatible board.


```python
masked_i, masked_j = rng.choice(
    np.indices((GRID_LENGTH, GRID_LENGTH)).reshape(2, -1),
    size=GRID_LENGTH**2 // 3, axis=1,
    replace=False, shuffle=False
)
mask = np.full((GRID_LENGTH, GRID_LENGTH), False)
mask[masked_i, masked_j] = True

revealed = np.ma.masked_array(to_board(ships[0]), mask=mask)
```


```python
plot_board(revealed);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_217_0.png)</center>



```python
start = datetime.datetime.now()

try:
    sample_compat_ships(all_ships, revealed, 1, rng=rng)
except KeyboardInterrupt:
    end = datetime.datetime.now()
    
    print("You gave up trying to sample a compatible board"
          f"after {(end - start).total_seconds():.1f} seconds")
```

    You gave up trying to sample a compatible boardafter 59.4 seconds


In order to implement the strategy for sampling compatible boards outlined above, we need to think about how to propagate hit/miss information about the combined board to each ship.  For a miss, this propagation is easy, as all ships must have been missed.  Propagating the information from a hit is much trickier, since in general we don't know which ship was hit.  We do however, know which ship was hit when our opponent announces that we sank one of their ships, because they have to tell us which one.

To implement Thompson sampling for standard Battleship then, we track not just what has been revealed, but what we can conclude has been revealed per ship.  We use this per-ship revealed information to reduce our possibilities the compatible ship grids _before_ sampling, then sample from the Cartesian product of these reduced sets, which produces compatible samples in at most seconds, even when many cells have been revealed.

Of course there are many situations where we can infer which ship has been hit. Consider the following board.


```python
revealed = np.ma.masked_all((10, 10))
revealed[0, :2] = 0
revealed[1, 2] = 0
revealed[2, :2] = 0
```


```python
plot_board(revealed);
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_221_0.png)</center>


If guessing (1, 0) results in a hit, we can obviously conclude that the patrol boat was hit.  We do not account for situations such as this when propagating hit information from the combined board to individual ships to avoid cumbersome and error-prone conditional logic in our strategy.  (In fact, Thompson sampling accounts for this automatically without a special rule, as there will be only one possible position for the patrol boat compatible with this revealed information.)

We implement Thompson sampling for standard Battleship as described above.


```python
class ThompsonStrategy(Strategy):
    def __init__(self, all_ships, rng=None, block_size=10_000):
        self._ship_strats = [
            SingleThompsonStrategy(ships) for ships in all_ships
        ]
        
        n_ship = len(all_ships)
        grid_shape = all_ships[0][0].shape
        self._ships_revealed = np.ma.masked_all((n_ship,) + grid_shape)

        self._rng = rng if rng is not None else np.random.default_rng()
        self._block_size = block_size
    
    def next_guess(self, revealed, n=None):
        post = np.ma.masked_array(
            self.sample_post(revealed, n=n),
            mask=~revealed.mask
        )
        
        return argmax_2d(post)
    
    def sample_post(self, revealed, n=None):
        all_compat_ships = [
            ship_strat.compat_ships(ship_revealed)
                for (ship_strat, ship_revealed)
                    in zip(self._ship_strats, self._ships_revealed)
        ]
        
        if n is None:
            compat_samples = sample_compat_ships_block(
                all_compat_ships, revealed,
                rng=self._rng, block_size=self._block_size
            )
        else:
            compat_samples = sample_compat_ships(
                all_compat_ships, revealed, n=n,
                rng=self._rng, block_size=self._block_size
            )
        
        return to_board(compat_samples, ship_axis=1).mean(axis=0)

    def reveal(self, i, j, hit_or_miss, sunk):
        if hit_or_miss == 0 or sunk is not None:
            self._ships_revealed[:, i, j] = 0
            
            if sunk is not None:
                self._ships_revealed[sunk, i, j] = 1
```

We use this strategy to play a game and visualize the results.


```python
strat = ThompsonStrategy(all_ships, rng=rng)
game = play(ships[0], strat,
            progress_bar=True)
```

    100%|██████████| 17/17 [00:02<00:00,  7.06it/s]



```python
game.turns
```




```
46
```




```python
%%capture
ani = animate_boards(game.turn_revealed)
```


```python
HTML(ani.to_html5_video())
```



<center>
<video width="576" height="576" controls autoplay loop>
  <source type="video/mp4" src="data:video/mp4;base64,AAAAIGZ0eXBNNFYgAAACAE00ViBpc29taXNvMmF2YzEAAAAIZnJlZQAARKBtZGF0AAACrgYF//+q
3EXpvebZSLeWLNgg2SPu73gyNjQgLSBjb3JlIDE2MSByMzAzME0gOGJkNmQyOCAtIEguMjY0L01Q
RUctNCBBVkMgY29kZWMgLSBDb3B5bGVmdCAyMDAzLTIwMjAgLSBodHRwOi8vd3d3LnZpZGVvbGFu
Lm9yZy94MjY0Lmh0bWwgLSBvcHRpb25zOiBjYWJhYz0xIHJlZj0zIGRlYmxvY2s9MTowOjAgYW5h
bHlzZT0weDM6MHgxMTMgbWU9aGV4IHN1Ym1lPTcgcHN5PTEgcHN5X3JkPTEuMDA6MC4wMCBtaXhl
ZF9yZWY9MSBtZV9yYW5nZT0xNiBjaHJvbWFfbWU9MSB0cmVsbGlzPTEgOHg4ZGN0PTEgY3FtPTAg
ZGVhZHpvbmU9MjEsMTEgZmFzdF9wc2tpcD0xIGNocm9tYV9xcF9vZmZzZXQ9LTIgdGhyZWFkcz02
IGxvb2thaGVhZF90aHJlYWRzPTEgc2xpY2VkX3RocmVhZHM9MCBucj0wIGRlY2ltYXRlPTEgaW50
ZXJsYWNlZD0wIGJsdXJheV9jb21wYXQ9MCBjb25zdHJhaW5lZF9pbnRyYT0wIGJmcmFtZXM9MyBi
X3B5cmFtaWQ9MiBiX2FkYXB0PTEgYl9iaWFzPTAgZGlyZWN0PTEgd2VpZ2h0Yj0xIG9wZW5fZ29w
PTAgd2VpZ2h0cD0yIGtleWludD0yNTAga2V5aW50X21pbj01IHNjZW5lY3V0PTQwIGludHJhX3Jl
ZnJlc2g9MCByY19sb29rYWhlYWQ9NDAgcmM9Y3JmIG1idHJlZT0xIGNyZj0yMy4wIHFjb21wPTAu
NjAgcXBtaW49MCBxcG1heD02OSBxcHN0ZXA9NCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAAS
9mWIhAAT//73sY+BTcgADZc6inof4RWx9JBRerHZoGTqAAADAAADAABOFqne+b9ctAjWAAAHoACZ
Byc9/EUe/4AG2qc6+aThpBBRCwKukp7fa/Etl/WEUZs41IlOPXfYIL4Aa8xPnr8xL5GnERvmdsxs
Oq6CLcxGd3VglmGCombmrcQYxlNSTuu2FUcWrShnMv/3Yr9vCtVSBbd4S+IgXYiVQyxbFEqjqMjc
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
dmY1OC40NS4xMDA=
">
  Your browser does not support the video tag.
</video>
</center>



With a bit of extra bookeeping, we can also watch the posterior distribution used for Thompson sampling evolve after each turn.


```python
game = Battleship(ships[0])
strat = ThompsonStrategy(all_ships, rng=rng)

posts = []

with tqdm(total=SHIP_SIZES.sum()) as pbar:
    while not game.is_solved:
        post = strat.sample_post(game.revealed, n=1_000)
        i, j = argmax_2d(np.ma.masked_array(
            post, mask=~game.revealed.mask
        ))

        hit_or_miss, sunk = game.guess(i, j)
        strat.reveal(i, j, hit_or_miss, sunk)
        
        posts.append(post)
        
        if hit_or_miss == 1:
            pbar.update()
```

    100%|██████████| 17/17 [00:09<00:00,  1.83it/s]



```python
%%capture
ani = animate_boards(posts, cbar=True)
```


```python
HTML(ani.to_html5_video())
```



<center>
<video width="576" height="576" controls autoplay loop>
  <source type="video/mp4" src="data:video/mp4;base64,AAAAIGZ0eXBNNFYgAAACAE00ViBpc29taXNvMmF2YzEAAAAIZnJlZQACem5tZGF0AAACrgYF//+q
3EXpvebZSLeWLNgg2SPu73gyNjQgLSBjb3JlIDE2MSByMzAzME0gOGJkNmQyOCAtIEguMjY0L01Q
RUctNCBBVkMgY29kZWMgLSBDb3B5bGVmdCAyMDAzLTIwMjAgLSBodHRwOi8vd3d3LnZpZGVvbGFu
Lm9yZy94MjY0Lmh0bWwgLSBvcHRpb25zOiBjYWJhYz0xIHJlZj0zIGRlYmxvY2s9MTowOjAgYW5h
bHlzZT0weDM6MHgxMTMgbWU9aGV4IHN1Ym1lPTcgcHN5PTEgcHN5X3JkPTEuMDA6MC4wMCBtaXhl
ZF9yZWY9MSBtZV9yYW5nZT0xNiBjaHJvbWFfbWU9MSB0cmVsbGlzPTEgOHg4ZGN0PTEgY3FtPTAg
ZGVhZHpvbmU9MjEsMTEgZmFzdF9wc2tpcD0xIGNocm9tYV9xcF9vZmZzZXQ9LTIgdGhyZWFkcz02
IGxvb2thaGVhZF90aHJlYWRzPTEgc2xpY2VkX3RocmVhZHM9MCBucj0wIGRlY2ltYXRlPTEgaW50
ZXJsYWNlZD0wIGJsdXJheV9jb21wYXQ9MCBjb25zdHJhaW5lZF9pbnRyYT0wIGJmcmFtZXM9MyBi
X3B5cmFtaWQ9MiBiX2FkYXB0PTEgYl9iaWFzPTAgZGlyZWN0PTEgd2VpZ2h0Yj0xIG9wZW5fZ29w
PTAgd2VpZ2h0cD0yIGtleWludD0yNTAga2V5aW50X21pbj01IHNjZW5lY3V0PTQwIGludHJhX3Jl
ZnJlc2g9MCByY19sb29rYWhlYWQ9NDAgcmM9Y3JmIG1idHJlZT0xIGNyZj0yMy4wIHFjb21wPTAu
NjAgcXBtaW49MCBxcG1heD02OSBxcHN0ZXA9NCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAAu
zWWIhAAR//73iB8yy2n5OtdyEeetLq0fUO5GcV6kvf4gAAADAAADAA4SCLMzbu2wEQuAAAICADQi
VPOG7AQEEYBOTYrpcvzn2E2TFVCXvS6LV0auZBNFwwCPZB/8CagiT+Vpp230TwtlgZosQIqj+rwe
fUUZutt61kLxxfm6M8mowkQTukkJSr2xB0Irdgo2+WvRL+B8kSBNr/c7CYI+OD1rzvd5S39feUWH
WcRrBnnYjdm8IdsxKocNJM+66Dt6USoII0aN28qyyRgABVZFa5IZ0/bOk+9UP9lkuFOY3zXlpl8c
jntHk/S1CVELZA9fCZRlMepGrETHyDFeFertfjnMWCkukwUbovJMJYbFL6wTduC17TBIXNRfVvQX
VvESV9OW2BHTJLkQIpUzTKdNYbY5U0VMsQEx1cpWukGteu5W0SMFdYghwNrJJ07m6LoICqQILSps
WQ2QzVzmAJns0PY26TRRMO7w0pfVZlUgEJcOiqKtZWIR4fmVq/4sXBlpr5nwt0/bLSoiBc8u/ICQ
2MomBahK8DrURhEgIMisqKoCauWeuDeSig4eDjRFJb40tQZr5K0cky0oHHb0aaA2wxbMPsHyC5yU
JwZNdJmynxMiG2gs0Sj2iA1/MxcOZuJcZzib7zvTqMRaBZHhg4vLzT9BReeHRXaI+BH3Buyl/okv
AiFseVqS5qF+mk//hViPQD3sooU628CVN660lb5t4SzkOQYCnKDDWRXauR0SNyxxW4zJCmCD2I9+
nVCmP/Y/iF4AJfASD+darQsmpuaM0/2YcLN/PP2pLHkWA9t5BPMcX2M9FeBFNqb6glqJWP+dVF/M
ZV/+08jmCGMtnuz+9JajcHhlFe4Ov98FMibdIGd/JIxHRyTttbFoE/zkQtRj/tL1W0GgpjqcG4Yn
e2+X+r10DjmLI3g0s8pbtR6I1jo0seHDEPMtglK+SYdRl+DS5htWO6jJ9CIeVYHe3xANeNhSbAVl
oFYO/7K6vl8IJUNPIJ98Z1aIiZhGQITN33oyFsvT0cY5A1J6I3p1S72fsyKgP5xKvJY8GvVQFswX
/Bj25+U0zAoDbqn/d3DywbRJJ2mTBJrXmIJxa9CMhbKJqFfYZy53IGamEk7pyQO7VvJd0M/6Oo3L
aPDNI6W6JTQg9NLc3Pf5zYcUHBF6stoB8HuUpZibDgn0tgfEQdX2C3wxZUwm2QdInt17lN8RGnly
W7yb2+ZNzMIABwZJ2a/6S1EH24PNqbGa9JT6xBSpylfyYjoucO7qJGPJaevP6UlILkvOA+t9HGdS
E6N/z3HEa6HRngOPQ9q6slQDkpBX6V2WXP0x9rNm1OzAFY8ELv3B3pq9MAkvYYz4TLJYnub/y/rl
5H7fW1NxoM3KJ8pZ0csTM2eSfGE2uf6SwSdFVOtD8D3IrwRs1d1TvJFy1XNbdRB8lkY2Vb1flcAQ
pBrzRywm1EZI664DAS4JL4irw9TGh+fJVfLcGsqdn5RHKHyVWMHy//+YtI1N1rgXqTUDKpVWhZu/
NR2rgzyQuaS5030NR6qLr2lWORkvYd4myW9rP9qlY7ue/V7uusngan4e/t/93sF7iQCsK5OVvKTW
fmSWf0s7wmE6/Mh0wqRyWk+3t0MvzsYqr5kLm87tXveqIT5G3IS/dLIL1a6qQO4MqGqFt/z/So3H
B5XlaUMeu4/l0SYTavGa3yq5Hxy0guSkvyJmpKnvlNBueT3wmoKjnQ20Bwhm6gxtnJHvches0hO3
bZsayPOAZP71xs670bkgjDoRZiRiaxCWQsAQcSztl3GOtzMf7LZmDavMqWMeSTwnvBbGgtT3UO0m
xQE0k1drCezNnVcZSIwSj5oPbg0FRGPVqnvZLtiOG1zTSBOhQuSTtFECVsc9PK7wKaAc5BwRgtfz
s4UQ9pbytk0abGkoaRVjH2ArlMQQQ1k7HNAqIInfITwbAAr4NEWdcTww3S/1nlmTJoYNh1Q2EKxF
TSBKxSq0O9WpB55x/f36QILOTfyzm/6FUzXWHWOvOR7c24chV1/rHO+i1shvj/z44GPLkPe3aJc2
AASulB+uABCRbsmeo4iQsMXxkLRhDXybJZBVavJi5hez2qJETBdSN42yDC5dSv8EHZzFZGIsfn0k
YX+Hg9dJt8Qy39vWz4y4fatBSfoQjQe1X7OnsxvKh5IbemlFp43n895jwYm7BmE8jFyEuBoBXLra
JMGj0/JXsFobEsrd0M+dreSOa6pOQScNbeJV9WC1jbtiiUJe7wa0kyz160LvPVnRzY9/ZtUvM6aY
jUBqMzpb2uXsWbPIc1hd6vMImXnC60HIJDXmu5yBjaZvRKiirqXNQnRvfO5vgXpZpIy6g+5VW4kB
d8uFgK1jJ2xDYW63eEBP1jMnA77w5cGzwqJCKwFa82em9t2Bb9vaB6uGk6MVP02bVkgHYel/l6Ky
01dSVKuqH/jJO7GdesQMxYgGQHlyc57UdQAoVY8VMn+0iVc9g4NuLpi77OjO+zBEWrM09by3R9I1
lE4VlZOMOSAhHMUeom4l1SAKyGLa/FSvZDzsX2r1HrTxe3SYaWrkEAb0n0YnwcaPGW7BwlGCj6hO
/ZhhmmQfQ+JqbXyzBj6ckLyv1qvHG94USyh5jb22DYbEFyqfv45aD8XK7OMDWnMRuJt5Rwvi/q2C
mJ8QxeciSbV+ZL+tYVdJfoM1EzRTP9ZBpdXlrdmSu0vxJJeRHMSXwzUdDn/w6w2cBUEfmEo3wchB
/wnpnaCKOMkUivXvwfdGrL+VZQSsQvp2q3H22SRRAWMGwaXFhiPJx7qZugqrVP9cpjfN4Q/aZloR
4UyMfwwX5D7wXTZ6l5RdJ1vw0C76xTi1MMQbYfVvNJgDgb0SzSLCJ1Fg/xV58lLgZi/OmzstS59q
Po2jGPSeUp0vhJYVbWRQ/vMSe0hZSow8RIkb+Wf+3MvyjTWC8YrSnMlLw/s/zIXoUZEFnFl3xsId
aog4iTTU4YOzsQB9mWpARWO108WoQ40VcW0/SWdeWoOAzHTRAvXWJnXV6e9hoR6mVx6Ogrl1rR1d
zJDo4CeoTHN1q9jXRAd3DTw6NxvhcPp4lwWYnH0ngm8JjL993vc3PGpeWX6cLfriO/qL5ePNlbUf
Zq9au8knLsFERbRVLwr0Iv2VqvtKV8wJhWMdeygrzkwP7qu25jSMi5NUSNk94GtpT2PrsZzQUxGJ
PPO0AHWzibMynfPsNpjrWiHmCUc+B2SUtBdCP7Y8IqGy4yl54v4s0qNqQjQ9Q6zdavJ8oghb4U89
bq/4lDOw/JKLF8ueH3jqCDVy/banO7Vkw1fdcOS3+g8W+eKX+xjJlt2Flx4n6VoHl0ZvH5vawJyO
D/mPog2rNXj92nYbZnPZ4IpwJNbY49huauOyJFkgVsdkTow2hoMNwM7QMKzc6ukg/9Py8zxwGaUJ
S2+/5Xjzq3WJykTdndA6iVfnNVZwlzJfORGtFLj7ORTd2H+UgHdrJv9OHml0uqI4X0IsDHj91AES
0+8kYIocw39+9uhFNx73hiB8OM3t3f0DTO84UDWH8AXDYjfMB7S3kfPvrm2Rhf3wCCbFWfH3ajIw
S62R4GjHRCWiksmqkUlY/3rK1nChJoODxIPEfSL8pD2Fnha6RxfXnXySG1UU3EE3EnbEs5E2uW5C
ymfbxKlaTk2zpL6e9mK+7W9Ic5noHQWJu1y7McP/7x3u+3AjYAe0NtvDjD9LfXtw+QFQTMSVIij4
SYZea91HZZ/w4FLXJM141ML5of5yXhC7n7uhSqg3ypUffeSIY5RyHBOR3BzFLw0pAK2Ll+beXu83
aNECx5HDQo6iegPWg1xerXfWmw5HdT2zzVmC/GC2v1LIRnfYbdR8dvzjBvcMYXIwbIbh14Ht7mRk
V4I5Zd+D95ojJ5c0SP93iQkHz2AZGi6OEkiEaClRsSkaUFyEXdU3oUaRr/HnyHkkQjf0MJh6YbST
mnOPo7Lo++SM1xndiox0ihb1LmqjRFBxDjaV4qedas17c8hPdLzYnoqm7JM+/K9H/vVFNBgSu3Kk
EGJewOy3T+8fZj4hYDcMBsyjh8bl1+Gl16GQNns01Sm82otJx74/ksaGs6L1gS/9fu1IgRit0cRr
TVubjyt8bA06ywOpUDcHc92AO2hdwSXrv+J/24Og8MfZOWxkNcSjh5/1xpfE+ZbhLFxE3aQDOP3G
6kntWNiPTSDL+dJT2oXcM9xhScwwgGwhq/uqLVH3bmY6AZTqDVvJ+iqPFTIhBPVmSu8BACdIOZNj
7rvGKER/hiTMn1/O8SDem8cp//GfWH3YbmFjgnZJP4SwA0KWzg/jHaDvMoqcjIx7L5E1difiEcW3
MwJZ4LOUryjg9ygsQsrzxh+6yj8xnYjzto2/JgW5MUuYO7VIo4KoVTm59ym81CumxdX/4z17F3K2
GcOaes6KuR3osf9BaVwnxRJcbVW0/B+f61jIfbv0yQET0x8/GNZ5XjQShC32IP7TqqZHhhQnFuto
09Zrr9O99fO4w3EjCRwJPUSSzINCRxt2E8eZSlxyUlBAa8mf/c+GSuTsMCwdWY81Y3u7sdLa1Pia
Mvd27lP8XClxoOWWqTvpYamEzRwHwGHhxwZ+tIbBKuFSUUHySkSI6hkvhpsbI7a0whYYB+1GTtM4
qPGA9WSkxPrvHle+A2zudpX4Z9HaZiVJm6gEdLDTF0E98WH01BYm78p27lANTP8gVw8362ngaFii
t2AKt1+EsnFerm/Cgi4xoNcAxBNwsbBuEW3z48lTyWhtkmbTTGfsXTbkPn/wdnyMxCcNHk/wXSoV
MZuzgh589EdaQNAH74Pc7CLSWokutR52ZOOwPmIUA6KnqVW9kb07zHH5VwoVEYveJ3aimle2ARuu
cOKT5of9blljsWJtHWHAb10z9NJmslw9+0dMHx5YK0o2t4ejpcV5pPe/eYLuhPO5xX7Mcy+xHJ4J
YAolN5bo/LKT+0fB4+wyfjoOLU9Sg0tdNTj1KFv0SaMoMV2e1b3cdAT/9daSlCn4WrTQEyNOq00v
2e3zzdf6RN5rIupjWO7PU3MEki+MUfnQhyYzOjfLme46jFb7u14rgJucbb00ePEN5S1eul1kw4Ho
DF+b8AuOfV4KPnmllYJE1onyzNk3US4wzDZ01Rkds/2LayZnXxVsbPRAASX6/zc8eMbmEWmrL3el
yBk4I7WlLXjIBQdtcQqarA8M8Y1GiRrQ10ItNJ0AXG0MnvMvzKjd+i1Xfy3ULYuC6mSei78CoW1P
C1NCEB0zFUl7suXhJtBdW9gBbOVMlKifmemZFZ3PQ3gtsMnE/mbW6xP5F/JWBRTqVYM/DB+hLbdN
Z/sZqa8BQfz2ORezEx9LA3EGN6u59JvUFHZghBZ3cs6TDln6FB7GcBUBXOg0bhhRQ8q1B8fidvuH
/5WebMUsT03Rm9h35lGeEMET7h2MdCxeGeVL7iz53DvmaXJAj8Citw1amovMtSACRY6ty/HAN8cR
pSa1BZThw0Ov1kN3J1I4m/KNHH8si4M0c2jHQ0nTd98WfS3UBshxUXv99Ujp/1KuG1fjZ29oLNq0
TobCryEuiBvYKD2wI/0YdgOrVGayJoNXEySmGwCyxg2dAOrYdG4SQI6wN2Mtv2GADfcztKmP9uog
SfQLdGZFjhXcgUzHZj+EknnqbpMJnWoRI7Rq1Xe3hexHPMXOsr3KU/IjBz3uwLhcSP1u64+YDWfF
8tzMQIf9h1Y+1KJfpzIieo9dTtVNlS7NZ0YkUem3DJqZ/T/z2J8wUVjhMUC9PxzuU64uJeF0iJsg
hPGs3mT57XfZfoWS1AB4T+0oYzQ5hxHp1QMs6CD5YFh+5/BWX0RwEXLq3n+1RWgxPTIR/zFFdJpd
oP0yVr2p9T0vKFkGKq6vimlNAaPVvhruQV1oJNVu4ebis9/Co2Tr5rG9x2BtwvUZYFydmuVXWWrk
ugyHwzdYyn4rNePAK+ArMzczDu7Njn6zjQ2U/1RdgacdxvJyxue3n4G+X7oNbckbBKi0c4vF00fs
RNgoSepOyqlDXJlRpFgTtMEa8XBkRAFsiuS7oAWEKwGs2T0LlddhFl/HmKXvwV5W2okKmYkpgucP
c2dO3YXKNN0GZ6Hxz6hQCDRCodJUjuY6BHjUuiQedlSRBXRmDXzDjS6wPycePq93ZAMMhvdEDR5H
O6gxWyJ9BVn8VogZIZ9UUtJ4boh372K66Bwo5wuKRacFYlS12/Re6gX7FLEA/wx41DsyOUCbjgns
b9/uPODdc0ZE83oOzgiBiVwkMnlZqbZzVR7wK4oPRntL+i1tBRMHN2aga9u2lLbiTwLPxSK9XDKj
Y3juRL8GSUA7TZCTj60i5fXXU5P5B+KoixE0K8njhhD3TgllvOz14GXxUuSjFjXzbU16Lu3ua3Kr
ICGUtYc8bz7Gr5IRnieJ7pCN4G022aKpkUNZlAbk+UoKz2cCyqicGIOqdDDBbLxmFU5KYSYV07MK
v9bGH96cDuhJ9OgXG5LqdPGVfda8SONBq+OffagEjQTjJ5N5tcHU/xVq278jc1nL/a/ku+vjhIWV
+L/jXQn1yh65FN81H3YdQk+wAJBaDRn7qsj96rao1KrJFtSRjlstSNLxyTqyE7VqnSBOsrRq/6ct
ytDNc+oxGPpDMLjEAlkb5kKKr1Gg0jiAlw/2yXLXXK/NN0Bo7LkhAkXTbc1fOAtKAKteBfS3xsDN
sFG0yaCk2jjG8mQaXcOZJpi9NhyncHmQY2r/sOUkCaVki3pwQnjF7iqqHRQEu9Hb1jlb5W2Qk8Fd
k2KptjLpE7tTH/69Kf0xmCmTvf7Y+ywUXgK+XN8rUwKjhFi6FKXq2F7eYVOzt2Tl5jmbrpsPSWVA
ACkKu+aMvb/yvsffbTNJOEuyAheVbrUUYALp0vpJas9Z0T0H+mSRGdab1RXpqRMtjiN/GIdyUJ1Z
wBSe+JcY4vNja9Xfvwyz51OmP0HXgiRdn987y4whjSkuPoUdIsdfMIi891CI2MawuU9rnj/A/RL8
PyYpJ1gYlcciMbkWn43dQzsYEfZFQWsK9ZLqjkbYPtG79J2d5RD6CE9/OZhdBCRynnpbg6/akD2l
fG5sX0DbI0+oiaqSY+QyJ+OrSZhsMYpWet/ZMJLJckFR+BgZ2Ln9q3cXD1xmTYeYDdCe6NNkvoww
TeRFvDDWaYYK4riUef3p9X+zE8IMrxjwa/2Xxz2xJLvABACtEgLGjlfNegWqi/qIGqBe8bPghCSk
yop4cDKV64W5cRgKivLLhDQaiXi/06e0TW5ZGuPBv0DIYx/3bmDnJSmFce8P8ebyUpy0dpHeHjkq
uB5PWufP46CWaSdY7TFGcSNNjvqEuAfYHwyTXby+2Ewkp3UxBl6bUVilXV1xNKNDEtwANKoRRb73
/rLN+SWX9u1UEh6T77v41uSoGSphijh7EWIJCxAlgUBXA4tz/FXjDIFiNLGwZAGHZ6TIKk3V15W8
fUWO+XQjt25LMdQlDgp2MK48/K8iBnsNRVkJ7HI44IafZPmT6J7g2iSqm5+vvPLkDbamDsfT+wM0
FcWAHTg50ykuU+OnsrnzC6JktBytpf23T4fi0CkDR+KKcWkktUSSn8OdTurD/ze50aS2UOL2o9Oo
/U2Y4GeQ36w0sKOR5nHReio4fWHxvQfwvu/x6eFmtjSXN/ulJRqqbdNuAECvlZF4lexGGwZNG+N3
PBRRut9lIm8SrbMIDUcBQ1Qx5I0Nh+WwKVQIK3evYZ3JFU2WXHkXbQYKTBvYD2JtGK2UABryO1O/
gsXkwTUn8dBPAkBJEdsS7953Tz6J4OYuOpNs83Ta+8q1GsEEK90YYsLlPjXuv/jgf6pNJfnv/Dwo
I729WG6m2FnAxZuksqUn3ao0FOFSaPhaLP5nNAZ7XffhfgA1ys+Ug0oC97RDBVmvCIwZFbbx9t/e
kCkKBVozZPXx0pSYeJFnZ4CzUGVPQGyMhzTFs9yAhKlZRPg1uqox1bQ0SosMHyvoAk+wrWOWuOBK
h//AVSSkXicauYY6nZIDmoJwljlBu/YVpsFWkweRiMp1jn8A2L3f2fR3CR8PrjnQCEd/kO1lDPP8
uGzmlJq9wsB+S3j4hvp4/7IOPQgU0sr/C1zfGiPZSDMfTIzE+tdI5FQxZQ8dTCHCbRWnvVn+o17U
6lS1TO/NCTuNCJ9SiDkTpA2NLvYHgBdzR1LH+tDssfvKOZz+WRWKwpCpZGNCRwt8DDKKR248mSQa
rhcXpQqA1UTkwLPqBaaEmh5b5cTmpjlxx6Pt9dYS+xfuwhtCj7/ctD+P9s00eE94zcIBPdL5b/lS
rT7VIVoOEhUCzAdJBQE8xvlhmvAAbiL0vYA0KiA+gtJ9pG7oSFZPhzxnP7begW8TE6YB8cUHho2L
+kW/Z5LRX+etUKY2W8miaHhsKWzbOFxjceBW2OsBUTtld7XOPWwZWcgcT8zJ8xwkNnM3Ok5sML+A
JUYtTw9BLNH/j334xDUuPZ8VdBRg6u3IjwqB9YTqVP7vkU9QfS+mHMqsebMr2LFefNuo/S3uzh7v
tbrZw8zU07K3dJl1TfvZ3KV4XC5TxRNXDHpZ3xsfDe0Ly8xwO2UO+jQu+7P+SP32qWeZKPI9hEjk
16ovCLL+KIWgC+NhWYZSD2vtXqCr0A2LIArKYDNFNrikoYuEdMsv8rgQvmg7KesPDbE6M2QyJzO6
4guFbmbXKjObMtLxMIRk4rNY/XAFSRmjJx74IdDONwDAg07p4qdk0g+a5rVXJe2o9rXh63sTui+L
OTnF/Hf82asPWka13BYhwGPuDzO9coPO/DR2fF0L5aKjvAxxglH8ELf5i5cmsQvI3wJVsIepOlrA
WZIQ77HjzyT1cBPolCnoxZci/lzNc+4Os2ODdrSSqEif4rzcEDMQOIrAsTPQPX10HObLNZQthtIF
Cf82QY3PpKGj9AR6F38Vd02BLIgJEHK2be2JsgK1aiMv8RJK2RJxgtRLp2VCBMVyWwfyV+vqw8hd
DjbE02/Qu5Kd5LKlxY/F9blt+4q0YuHQ5AoEd5pXjbafHT1iLvy/Bgj6g7z2ky5EVFaSa8MrTfeY
bxvundUEMEvUmDV8ZnF6v5vuda6P0zB2ZN7kFPDgYkvzcAnH284iBBVgMOOwW7SzuC3vxMifiKZp
GzwPls5tkj21fshTACXxCfa+R1fkWIekSJbLzsv9AN/ROJsrMyocSDa5ijwsK2PRjbE4ADAL5Tf9
/EX+k8TJKo/OAxDjfj3RsEgofSSYtZtFaJnIs0R+lYt8wY/FpaK3YSw3L3FH+ttJ/Pe4mb9OsMsf
vBdcTuC+lhOHqEqtfRifbwo41osEc3CqiqziddIEf+V/WOwzs+pP3Dv3NQd6Ky2nU24kNs1ff6mS
pKh81R3IFgU1KaJkD8iunv9XZMOg5jc9NcnAN2cxuxYbzS6mrubFudMw4GBOXvhfVzkgA7Bwa2Wi
ijiUZ2bCnYZ41a9afxwBV9SSxiXAERhB/bNrAVUQ0aHxH11TxqZ9NylaCT/aSHG0KnPTEC9yIpKc
v6Cmka6B4Y1SxT5b0yFheWAQTib072GBL4SW7bbkD7b65IiyLkLPsr9HvweMbIyscNtjEqiTwQoE
jIh+YJrJKRRVqNRPsIfMjHgj4zmt4ACNSgq+Rx8guRamejZnFeCNCQSU8L5RVEGWdooVI+weNMGL
YUe3lh/YoHWNja6Ep40q2+FWwIIiKkNdt0KOuNXhW6EQDHXmpUWykq8hELX/WLr257ULABLsxtSp
GWMQ5bZN9nLNDAWc1aiZY4fE1W/K/57ycSRYMfiks/7Jiu6eV8j7g6wz64E50ODj1tdAZAdwxRge
0miDzN1EboFKV3T5iU/+ofAYI2E3gRVlG/J+3+eQ0i267IqMJ7zbGhwl0bEB3EvwpLTBnOnnEggA
QBY2E8VQ0MXRtmCIuqSsm+tFjArg89EF4aOQ6c59C3uexioDO4ysSvUpRewx4xqyGf608cbolKuC
ZwSwqGdbMVYkOHQ9Xni+mPEpgfktL+SgUR2v95ieLGqr/P5dVdV0NjWy9sNxxbNQBx1/rNVret6y
iZ5+Dm3pooFPL5BNjOJ0k3kquU9SkT3ZLkMMcvJGbVXxikrV6IHGyAMim+U56G3hF3ey7lyQBfaR
ctF/NoXZ/MykxBioYzrHLIBxzvoVmWVtSPIsDsfB9tJDCrMqWTy41Y/mz8Kv3gjFjfGVmj43ZbYf
RL2Ra+oKYyLFexEZrrPySfSXBEAjLbFUa/fB3/VgfUGmAv3Mcq0KlgbpcAhDN0asiKlEJjUm/Q1y
cXFF6Y7EexeKILJo1mTPay4B8yTaMsnr1sPrQ3nLHlBYF+E7LzL6PSKIlTj+6jgZV5+OEKdt5aAy
hkNCMqona9DdR+fQ0kbPGiPWcUvfqgiGjQnSm+8t3Pv5MWsN7y+ozvMfHN2xCOyPMmORnzMU0KnJ
FFgQDJr2xzgpRDNYwfHahxhRGp8KdgqMkpwz7VFgdMa8y4AQ48n7esKYQRVx/PXtQlN8d7EMOCtS
x9ziC18CRPnGxeDpUWLcwYFCX1mE7yT/KD4LYP/u2isI5fox7X7wqqcQU5x1QV7v3RQtXEg/WI8W
sPCBqNagVFD1WIeKD352h+fw9d41W375Oov1i2vjYlaM++JEGJi2+X67VRld+PPV+l2rVoYeTjgA
b7LNfk8SD8rUTunDg6ZFttgxZGXjbO3NW0TzMrAX5RMQblNEwU9nwG/I9/CQVS9OD1c10jJknjiS
Rc6baxkG/WKWlOJEzeEg21CqcyrAo4wt3V5tyI5uTvKYE2LS96fxBUo//VS52W+gxPFuKfs+4ggG
wJKoRPRbwrU826e7078siae8Sw9a6zyDHk8Ur+mfD2qCHW2FSHiS4x8GpzxJB9zhFhoeeLsNuXMp
SkH5lVbj1nDofsjAo5zNp8tfUPzYr4609pFTmftciMDbydGoyYT9ffDZgtvAn8sefA22/mi6M01+
QD5FpbYjEodX6b5VHEGX/JzaLTvzBbMzhSCC3JdUW39qgO39E1X4P4KPP3QBLvdBd3pbST17rhBU
jev41ClllxbroMk9cfb9YpVDtBJf2XA3nb4J2HKvoFy37XEIvD7Z7CWSUG737lKMzEBbqTng0N+n
u1wLsa895VW1q2KkYQ0J5YsTdH77OLFZ5gHDsN5mHdPBIqBvl6Favwzw5e+HDvY2O+9gSZ3Biop+
ECTBZq41tta4kuK7wD8O2pQgSnoN8a8p0GyHFCnCn4GQC/wjBCe2QpRiwpfOnsIxufwHx1atV+Uv
hQ3KLG/Y+AS1K2sUSZF7NDf47VXH2bHbhwbiCi3rKqN+MfpNtNUZ683Ui1knEuDO8Lhx5RO6bnqi
fNZGkG6XRR/vVPj2ttNdVIYQlhSCmW82BYx78tQZDGQdNqFCyQMi/FhQ38rOPLzkaCEmPh1OU8Q7
e52K9QjRE0vqdlWfIFXa32vzUgP0GKtGSKCm2wDbLesSwCbbYembP1ohnGrcWBRtV44t9zSMx1wU
nT34oyElXrhY6yymyOvmqMNHnx/bgmkrAKGt5opPA6Ax5X5KFXQGNP0SU0peoa8C1i0/glvLjTe7
vQuTQvRSOy2cLZkG0OpTcSRpZYf6i20YcqTYsbHhqpkTuovWS3pFjyOWlIXalXuUmJ8nWBLZxaRI
vrYMEJjsw9gqQUidDH2zHa6naPbfTIni7af4yvpxDrk/vGYitcYm1/F+p6FGcGMWqXpQ4XC5DTrF
8qcWGdJj9n1saMAnv57PYMqdmHD8NWuxTFxrDrZNq1EZQmFG9U7IfNkJZqx+lZdHpKgKDqQJtFBE
2dj0mCzRHgobb1xteLgxoSpC+YBG4Gl2kLgvdS2KsPrfXyvxYI4DLEaWz2jjTLWbxPyQJsVmUvqf
581o5TRknIZI9DI4dLvHmr5mlNEgGCBOHI95Ct/9PQGDYJno37ZZmwEfyU8HtCnTplTrsFHjSXX5
hMOh3aRbPWetBOQUFbUftsn8cJvaJWwefDjA8JOjGa6KQqZMojT7Hs1l1AO0WmHebRnI7PiqwziZ
6/YsPfbHFAC6SzlCjW7yqnJLiy4CGY5+S9xMYvUOeZ10FE8M7KSVFhKb6FAc/dPnODP/M0ZlKM0Y
Y9QBD6XhB8C4T8O2SY9mxI4zGM5b4RquzLyKpRo+WiM5sQCaR4RtZ7S7eivwmr/bhF80PFzH2zYx
nhQJMnZzo5uUemtiU/60Ju9EA3xlBqkWmh5iSRxfmIYY6huHFR3I35/bHTrP92T7q/i1B7+Hu0zl
a9/iVDOobU/kZkJTmObUDqtq8I3vo4xTCB+C7ZdbOgyNm6eDcbcGgAzMoD2nDRvC3QI9rnD9oQPD
BcHpzimg6871i6c9tQAcKQU8e1o/Evl+DL1JUoyk6pPn9KGohIvsOGHtS9K95J6aoztxkEiNczhd
KdgFquwfKrhuqPLGv4N+OjWGbObUFrRYM1bS+7EhQi3nnReM6jR9Wg1e8uMSVG6BZfvW+WHOznUo
dbg7TvYR/qSamSToJTmdrILcOxpo74SXr8zSNkg1LVJV35V1Bu9abGpbJVdtUkh5aW6DnLr8m5lv
d43N2U/rcInD34r80q9rC0F+KyheuX9XxO/pPl8hNGKVFV+lAAyPCz0iSzBcaAIssnGcmB03bISP
FNbzm+o2JAtcoe4UPPwFxGV5fBcNyWv5Ir0DU4HqE10TZ2Q3xCBvlLnj4paMTAQeIY3RvxUBVlKO
75BqWJPlV1gp068SK+Mrgd7pIvAtgxFEmKimcnZWA6xx3y9cV5elQZN1WhXv+GFqtfythotJUZcJ
necziOfkU5Yd1y7fzb2OZIJ//xHoGJUBMCp2432F7IcWw6kHixmD6Bzu5uu+t9D8/7+MgqyK4fHR
z6bT2PeHxM+KycIcrhz+rE+ZWpZjAyfyxChYZ+9xxcHe4PaNAgvgkGdK4iImGhfi2UgUKG7C80lT
Ryh2k2a611YQ+IGatyETGVTx9Qc4wtD9AkuiSV6u8BQaHxwnZuPRRidq3afPXeyKfF7fIpxbCkLI
ZzH2K2PmwvnyIw8mPUbp/I1bn0qUjk4CinbSRWTtJh2eFy/T0LfzdVDR0Lu/WaRZS9ruVuRVyFYv
+vuxwOhdtpzUn4R3Zjq23rqoo6cyco3zRkHF3p97CgUW5Nnz8Axvpeom8tpYnV6S17FHpuFoNeyv
Gc+zEWKjs+Fs8uvIyvK3vv0cc2nJQDU1mWklGJWN5T5gm778fBv8EsPyjArN5QLRgIrOQUz3a+eF
Ww18EuG9jeNFoZPRT0oQ8kjixHWF4kyvBRLkWzVSS54TlP4DqT+rpj2QzWn++Vtdqik1GFe/t9xm
9XjC8B3oZO8LMd8P+Xthyd0bSGv0/mxoZTWmMQMgWVOGWmEIYEOTabV56UL9cmOjfEU7wMbd8m98
A8nWKUWeM58nascyeV2+EayW3b2fPiL9AZm/qqJb5+pprToLnpo69qMLlBuBeP8ELvhfBKwugByC
AJz4MKSidYRQ9pXnf8JLE26vXkqXtEzRa+6REJUPZd7cljgNs2Po4XLuz547CrDlQ6YCCvX4cTcP
LhDZG4zNBI7Q9rT5tFhM6dESFO3ow0nDut4fenYEZTQX8QssJGQdAj0C1K4s0YGRk4/sJPAsnrIB
vVQWWfohRpbprUV7FdAQSIX/DNYRBGWhbcRUxI3zoGuYYyHQbhbPyCVTN1E7tjI7UVZUoxrFwV1e
DVYnQO+FZf2sfEhVpdCJN1Do6uo/rFiazBgAA1+AB140xPIns7ZnV+P1o18oSUpqVpTphdNCy9I7
kXsK+C6J73b2u4vfoguI6TBemCttwSvyjgYVYLdqMejX5oMPfe1MifGzBBSx0yQ5U+Z7zh9geRW0
u9BxR/h5LeBB3/7nlLtKiBJdCaMqVnyrtjqWZtf7mlFVxFPPrSjmjP90IzcfdApHnJZPQYiKWGAy
KMta3EVQtgTPXur/hW8ZMw8bgjGbpWHowXuhvs+XmI+eSebrtEWo9NVcFqIBj53GOd1N1NG2VXwQ
MN7zbxp/wJki309Y5Mp+oUZ+lzxTA00qHcq201HtULHSzenALAujumLlwfxtzMrmUK80A4HeChzL
j+O3tNZvuu4adi2zDlOr1mby59q206W3nVGjwZzkMuENAWt8Zhx1KpI2NFpIoo9ofgvDnfA2iGLc
eNUPcSrRVY3GZt1UbFncCP2fMMhcyn/rCxacFr0vvEk6i3Qus/TVJVtTwMJmT+ohXdZ4DsmGREG9
o0ue6bS6vWfG8yBNo/f40Nusf6QXX+SJ6SzTPdT+q+sO+xkp1fnFuODOo7BsvKZXmnZb0/7EhdWr
hmWF4wO2u+1n7sBA4/k1HRLOTb6UDd7RcXGC/6HmX+ETZGhgQguuU9eks9tyrn+0gcNGjZjL9cpu
Q/hUN0gClwAFLKcqKWSRRitTVxhxt6MUt8HOM+wctTJF6+zru6+tMx97edTNAQIDiLGVp+KqEpjo
xXtHHZcIPLcERBLHEKccDUKffMYNqjoE4y6M1f950h/9NOYUXTdSys2pvRuBRogB/k644mn0ns4z
V8g2/HWq6a8eRQq9n4DJu3CCmxn2STTpWXXeBQPCmmM55F1XCxC9Q67vp3hBqyI2eot5PVnezIzP
X1XTsJp3PeA89CKn735zlX0a85tsRZWtBOQTD9/csMIFPC2I3tZK+ik06ofikaLZeMwG0vTfzCJb
ZYZB8e5D08lZLX+usW0yrBgJT4Cpz3BF1uDf9tQwPgfQQ+IDRSSgsKKOO0TKlV8Ob9m35ni713SQ
JHvlK9GC7JTNt65dnyiEfgx+PsW56lnHj8u51Uo9AkA1ZiCJByv7U5OAx9AdgMVhizOwrJ0xVzPf
vqeIUexWH4pdE809Xhdiics8G6TEvJ7cphFBVXdZtQPFyjszkqk3GCJ2OfZjSorNZ1kVYdXi6mGv
Z6zbsXvwaTuJFRYoTxEHYIZwltsQFXaAmz30DW7NAlw8lFXM3g7q5WJwdv+7ETxqejj5p7iBFIOd
92/HM3wtiP900iXlTqzI6gHEV4UF5TMTExePV5c1WJlYquPITdlgkjCIadIrYtoL44rHPwTAnoOi
Tm+JLG/0qpIrI5QpBxCmTjORz31NCJLJFCotsh7cAZLkDxobbWiOv7wCTiPA14XDp4F1UHyAuUKa
C+78OUXOfuZYHk8NG1tvOOsu4jJ4y5Co7Hc+x1Qi0XfTWb79wEZ70ApK2rdZA4QbApLX4wHArVbU
lv34LuQuqJRPCT3uePl37FkIfo4Vf2xQ+l45R9MBH8GF59NH5wqp3HX9jbMEgY7h93scbAc/KtX0
J4e4rzXi1fbxbBApGcdGl0iEvN9o2HxAS6Aef7c4sMmelQJM36Fl/RWfhv8Qpq/JIgiOqoUHKcfX
6aRGAUldmotNdNNnnpcVn3eEq+v4a1iLe6rZE6+oNBh/4CN5/6Vk2MFSgA89yprdJvO9TUjMogXL
pTK9FoivzNQVyIR1m6cw7q+RrC245pU8+zdD8BeLkvVqzj+qS3HLBMLHyLuHSlBvniLL57iT/4P5
2IxreM3oV01fm9UyIA5ycRwUU1u086TthIUkOreYilUXx4IqO99xSu5Cl7WqHAYWCLQIFMcmLjW6
fIm6QARivekAVP4fkTYJ7hk3ADuYnPpaFNt/AEGJd+XGd73zWdyOUmevqAhG5sXnTd6czCH3ZWC/
QTPiJ1wjCN7DCr9LL6ijnFAZ1pQZ//OW8IJbHEBnIosTk1uD92qS+3AZf49zKmwF9v9JUrZOyypk
BQnoGqh3aF9DIVYNY8154LcC0F6p8FEYNorAnMYYLmLze+8Rh8iSSjBY4HuK119iqo7sWZQs+HIg
AIGWx5WcIDcIVe1xXPPRBv2nSmGMBLq/3MlJCZCFdHAA1P+WK73jgfTE3r2kmMIxP7ioQ5Hos6az
mc66z1wyBeZ9x6qVtQ1Pc7fI3yOnpjqdFWunfsoKvTv/wUpVUiosJbyoIeXwA0lrAcvIVjaoYAAA
AwHpg7oAAAMAAAnZAAAS+UGaIWxBH/61KoAAmBg9suIBK48rood3+yMY3cILm53OBe8tNMeA2zJR
UIQXbq6uqX5fLlrKWsAAHGfhMfIdFPqMlsQlvkx9c7StGqBL+qxl5Ht9oUFZC7FCbEhFxLBtwMs7
wv+1NaPIKbKtXiM7hGy25VhfT4voy0rbLdQcQx3SRS9zlhwe7Du1RJ0HsMNWlSa6s+J6Q6aVJDpW
41f2oLXKwl7V+ZCvru5Zpj5FzgyPyr41SHuk5CgbF5qanSOaNPbuLwal8cRtz3tNygai88C8lLlJ
dgLZYYN83c+Ngrjvre/kjgfohHz05zC2QekkHPKpF1qAFk2AApIRzHHbL58KlhSffFFX9rXUIANZ
S/SF3JhZs2RQGi9FH79bZYW7JhPI/LzwJl9ZzAQes49rv3+BVpL+AMTQkDuGJOkBr/OXmEZj4WiM
ipobVjeoFlyo1smaYohhp7VrzTtaAt/Wnbzu0/Mqcua2/y5Yhc/z5vz+3AYK5GhfCU66+MWGYBPG
7653fVifg06GuacM3oUsMFrSYeVBlSFLqC75RM0+uKTabiOFjylOAGYhfOgRuCIpch6JGmf35DnS
QFP4CC7WkuI8lPScSH/0EUJFYNwVVbHMzIJosloFldYdXzVg41h1CTN4gQrb17Ue9TTtLYRx4B88
VRRfiNr5SIRU29VijWoAFAgxqe+KyzKcp4jUm8mfgadbSFRow4IJS/Uh7NqEJmdYYfrIn0VwjBt4
4+PPJ8k1H+8+O4ke0kt+mLTtBaJ6mviNZcumdmF0NbEOxhEW8O4Xi8ZWhgM0ESk5tfqAnqboPdo/
c41pjA7+jJhqyqkBmk/zKfWfvFAxwpkifUVy670J5cHpAijeGLBVpMVbSpeNml0uQ//St3dUyni7
baoxTF/EjPi9Q05qvi6fmXCQVlfRJPSuGsqlMtgReaem5sDIZvNft40V5CMTMWnWAhwdm27b0QL2
g8NNu44MLMHBxdyFlB4S+sYaV0yJ5Tr/j2l9llEpXr1FOklS2t1GUEVoPbgdvBEk1KRoqK1FWy2n
/hL6TNnpLeBhw8SP1LdJNmwJZjDEwADg4rifIAv3KNbW7z90n/8vpx1bm0iooWt8+QfgTC2AkAh8
xRzbIDM9HjOGUWNceF4KT0im5fVWK3XbrVLuwECuAWykPuL4GuHDri3p1Jtl8/VRL1Albfy7t+AF
WwWxq3JLhhax9zc0bm8ULnBij/xmX4l8sYhLqMH2c5xAvDhT3L65Gd3wfpeQCR1P/2yCVvyCmo/e
qcOzLlyITGWo4PaMqudgmY7IGRPNVV6Cr6Ot6BFAyWr0Kin9ht47t0X11j4vvH3PjgMmeR2KWZNA
mdbadK4T4u9p6B9jwWORPY66WWSKCTfT31tDxeS/qd1NmwRU/yL/ISqeLQKI3XKTGGrYKnaj/Qb5
yJg4FzgOhgYW1dt7TSIE9bauAUzCbdZRxYIk6DkiMKZwWSMHfzj4VLPS/SVtEEJiV/c1Dq7slbCF
kBL43UuuiP2MLV+fdnJVTDdPobnkvwRnTdrX16fgTfULPPbcYMU2v7Jo04clP1FcG+9vPoe9yIpQ
p0G39vwo0gIgO4ZrS7kjeKMWg1clRR4p0fkR+EvBB7oeH4x9ERRn+goYn+S0D9eHSDbiLQOMEfhH
jiP+tZEQ84gErYe4Qx/HgtDrUyBUd6jGjC+rC2oCnb05OLElJJXl5S8pXzXlU4WDm1JINOXSZX2M
Hf96LgB0y1fdTGXUkvRhzXGmIzJkRFFS7c60gdoUQKrzrWZTeS+uTLBYb1TS+m1y9ch919X772LU
BIUKpzEvMys+bN1q5Ner3TBsagyqaw+B6r/M+ZT372Vxj3B5kEAkrtl+g8ypY97U4rMYMBZqSbI1
T+ptGWp+J/9axX726/VWMoBM6mCvyi8KGC/wQW0b/JLK7tgYKy26mRbI1IXLg+Ola+Cru1gPekrz
XjmfIGKw6m27c1RfQNqw1TgcYE0gJSWlluoA3eC9sHi9zSjOyCbuISe9HlXEYG25CLajUjDSU0+l
FKXMEPrU8Mf5yZ5RzuR7imnAABfVsXWrgEwtGYRoRc5OW8J7aa0Pv6FTsoyo1cggtWr7b+fnUlHi
zgAFaiMoIwtEyymOiTDDvuFPBfR3OeajNbyPx8e1QcaHFWoEkZG45+j0vvAwivP/rQVXH0elNEll
KK9bt9UiRMXUiCTQinQtLqmjQPJcW164TkRpuVJuH+6Yb3Q6i2tMNDS5IKSyzZgUUlJzLYlcc3ta
Vi6+5lsiijNvH1aOZLn5ERv77PW6sy7iUh2RawdwHU7M3a+VG0rhUV+Wzp0BmINITc7FNF4Bq7eC
RNkabE4beggsgu0F/EWnaZlq3siDphN9Do68soElXNqkFJn7JfP788EB10ZDUUHs+8dwwXdvic3U
S4YVL47jOP94ZShPQZv067PvEKnVrjIN7s6deRqueoku0bl0UuUxX6r7F4uSnYhnGJ4qWCnb7jic
7Rw5VvWURRiT/BdLgdrWAUZMaYqSK/QCOzjjwvUuhRkntWd2pIqhaWsKSKUc7NDpos2p7C9GAnke
2tMm4hOw7BrrQm3irfqrJ4u+z+YlylKP9ojQ+DNTbiTjFTssBGWoc/P/bjAA5vwLU23DsAp3RYVS
DS+nAaQf9QLuc9yK/svlEmeEhz0zxPux/lYawAwZ8WDYxP91KGqTdNULSxK5jYm9mIwe3kmk7124
GvMAym74WZGtYgAVsMugMboCcPMhd06rxaWOMXg8rdOKSodYho/hmJbFB70+sdkkNcCbcRqRsFeg
aUYRiAtgn/V73wjpjl9TBlaov/z0FGUIErVjEki2IeBnvpnWTaH3r+8oISRPK0UJ5SpS2IWis1FG
V6uozOX57RT/rFM0rsS4FvRXSk5+9kDDTIgJayQOlHvwJlnw5WgkdO0ggXK3z4EDZKsH3fSikQmS
wJ1wXGewaP9IBZrE3vcbpjpuhRQWobo/hn0P3o0xIbX8SNThXaGW4uSgx0w7BgS5Mae/jKkvnugB
dqX9UYtbv7a1nEHIrjsqHreQswnos0E49ff2CNg60F0r+tp95qPzpoyroNqdoY+IbMzOrDKiSWYC
vgUkn1A1Vwmj43G5+tz9YoYqd1L94qsVUQ/bK4ahJ7EbtlcqHsTBAUjVgisM3sCkXM4vnrI7v8Ok
jREd4RqluV7+Pl2cTC9LAV+pAJaq+7p1W88eN1sE6hUKNAJJ7NOs/DNDFaHExii7xetdI+x03Qb8
OablIter7FCuk56OsTrya47Cw6N3C1kNcdbkFpeJ0W5zp2eNtliu/RuQmKBxCZwmy2PyIluIdvAF
pspVgHePyCCuFGy9dI3lAthpZqDj1IUtZ/mZfep/vyRT/qj5oDBan1dk/gkmdYv0qxVij2Fu0mOg
vES/tbIEx3rZJOFK4BW9VuodbFmm0cYZH1VZNtlw+daEQzf51Ybd1zNlOOtGKb8fdMlGKra+8Wk5
A7lw+TNrgSG1R6YxEnpu7S3dzikPfrItXY71SYiun4Ls4pnPGfpJheEw0XeA6kG/eLuSKyjqxzX+
nd5YgtD6HmARp1zPpYzXsICD8QxjYzwdLZYa5nY2Ddi7eiDUI+EuahM/wkaQVru4D2BrJ9nOLy+O
e7yD/T9jkXYBaBcD5QeUvHwvDslNtK9I3OPRzwIrqSUJXbelSPLnwZHdKjQMjsUYtyYFXCp+JxtJ
+s39yEvnz72LsyPaj9xa10F4Lw7Tt3xBvL2/tCCduJY4yHb2aCLznr8fJ1IscUbQrNMQDlrMVhxi
x0ekSN8h3qvMmSw1OWjEYa2LYOBSZo2/OVRv8mKriVfYy6SrQC148jNzvVEOQ+mlEQ1JxzA4yvoD
x40C8lKoKR7tMaPDPlKEQCbtoHgnC/eqWNjYiLRKe1QrRZtP6+SmDcDKjbykYiHWcfZqq78VRCqd
XZUDAZezG/Dii2ZzXiU9lWjuxlWqRkclS0HheW4sXOak3+VM6xhh3O8Qu7NlrgSnGH2jxnZ3U8hC
YAxso4tMNEL3FvlEUBRvKzaxEtyoR3zgMlMXoDN6ugRa7BluPP6UOP09jDA5xpcTgbDP0EkkDgRl
Li4gMuG/xUGNJxTjNHnqnh8pGYxkWMhWO5mS/4DbMEd/RdTsaET1+qv9x/+sV2tTzoMJ6hRkypGI
lImFxmTjiZs9X64QkZwt1XDvJGr+UA8ZLX+CLEAncn4FXzQCwJAwqIWb+ohjkb73YHmaQj0NtUVQ
cpIJt4e5G1mnEzV9+GOPt7mb9myUeGV3P75TdclypRm+ISd0hVIcVByoQAAXrbWvlCDoj20BRQA4
0fkD5khQgp9UjumrjaFwDfzUqcK51EKY2oJxoiwncHtYFCr57iueK289ZT6Hbt/5QWj2d4FrB9Vn
I8la+tma0abUjz4FwbeRWrgfiNDPgJilNgdibG8GHpTGNH8BFWXPbqqzE8hDxqWdosKq6LiVRiLT
am/JhIjAwyq866JogGoKxgZ30ZryCrO9mBukRINBf/Y4kMGnLX5SbQKg5ITHpVbF4lXk2Ki+TqSg
fH5F7Zsq+rjGEItsY6dxkM8l8Nz7QDmNrufAmmu0v8WLxi500up/VokriPWrD8rU//AxsNzBadaw
iyC8vvcUUQMeIu9Hi2OvuQ6G08YK9p8EM7TZfhMMSAtnsoMKgCyfhgY39X8YwU1MIOAHppmeEpv5
3bDtAf9b3hS9A6+ojkTR7qyXxJ1hx+BXAkuy84xcdKA75+/UtYgjj3aQLbXHG8c+mY2IFw378Ovh
0k1RgonEuMQdwNWVNnHarOd9HlxKba6VL5E4C5/HwPPhG+L3YZy/F2BJD8KI1B5Zs7xZlB7/miUF
X6HwOPFyVSCX/tg8+k1jhgFJlVNfVtfB6Ycu3bMhKi+zcN0OxI+boNSy1hu6GBpdTWsCHEqtmAAI
w0FftTYFgpkfb1gY7tqPA1gZl2Hl/2cxITBgZ8AtkDQA/CGEJAiPS7fDWvrvuwQ+nMwo3OsDGmDh
G73KeqOupy0nZQC9cQOT2T1hnDGd0DlqDGHN4RPnbSh2por9o/lv+rJ7kXvp7srEd1x6xwvNTBWr
sXWy2121DjXcTuJZFsRQyyI3KMQ1I+381N8SkMhCM4dJuh7HEQIct7RqZ0lCouvhwph+ZtCfm0/h
IQ2pZa9HEsh5xffAQL0+72Cjr2M29NqgePIFoqkSAKlpt5x0Vz0rFR9Teha+6UrBVrNjCjjVmYYH
vzEDfy0uQifeniZFlturCbXGn9PRp70bKg5U3QFNF7irmjwfWSdRzgPZN5qLy/eY2NRDoJewuaKz
RRKhLItsWWfZNoU01g0APPzZmrAPPTtgiNt+N2GnPXIktcZeEgKUVwWS6i6mPnzEY0bNpBYugItL
YylOlH/wNCAqNY9JqQyeQqWcv2Qrkh93lsiZYnuWL+gLFVxm/QWbNtrCNn7ZxhLe5ZukMvjhINJr
eG6VnbwryUQT02CiTIKjEHcVXI1v8owY2tSjtSb02Ic4SIy/zC9QGtSVW/rwv3BuzlbUIW3Pi/x4
zgV8jufUqwRgyqLuMmUfjSZ8TVy7Fgj1VpQPC6/twhqan9GnDuhc4visIfIbsFY+ux2AAGqfL6x2
G49qgjf3udXTcpiXdrvOhRWhD0FGslzH+Oc6LjwqKRzIYgNog1PitsreiaCYbzjepSwRQjA0VqUu
gr7AhKSAMTBGh0URWn9tgZmdt3oA94EcX77tN8ePGuOTUR5pOPFbbRbpPRRrbTtkNB0OW0AxsHLy
I80VGrukOK8pR5hG/3BVecdioOcxnzAIUHPK1wfhx4wt/IpDflGx7a6acTftY0jyCBgjQXmp9pPV
NIRRAp05uuwkgYWHRzUt+XppWpxvCOyAwXzYgqiVyW1MtPvTYrLiPDzkrvP512AYgyDiWIKCMqLs
Wc0wk2klIfZ1RPOzdAfd//l/r/vMQKcbgscX7i5RegDSFlkaiZuxK4PLLT78kagMZGiFaWFIWwZU
JxyjbOpGUrO0AtXHqD3Fl5AQybU+RrypZDUytwlEIBrELoyUiiYluppJEHlEZaQpQH9h3J9fcFdt
zW0VewhT+ejGVp3YY62GJFHw3OWzLs2U59Jh4K9P+V0x1pKK02o/5S+rzlhyh24D9nIKHkHe1xEE
KYAUFRpRQaii9Pm5YY+tN6yZ0ELuPMDPU/T1EjfFysnio6eWc6+qWz1zUUo547+3AQJ61kR2ITIx
1AjI4l24GXOs6n8QreTmhU390dkHoX/I9DQSvMi7v5H6dtxVwCPBFfFFq32Ig6stRAe0UWkQyaFw
JodyBGvwpyzx55TzoiGnZfr+V/F4FtMaBiQ47Dt6dkdNFVPtuK/KtMk2wwbaYDQnQyTleV0Pl/M2
tFEbMIHZ1PZmd8/8eeL5Zb3eUaqqzSNfqagpSdT5v4bh08hAjPk4ZsLIajhHsodtKFtqQEwdcRd6
pzb+MN6wC2qxOu8IHrL5XHemW/8CrserbHkjugAAETFBmkI8IZMphBH//rUqgABvNfpADbIL0Q3E
wKdv5lNyD3kQjMDcTBIY5W+jPYlW/WxABGStLSDjneImLLhnmCRr7R0WT3G5SP7HLBMUBuOkrqmC
nvtBqJHslW2s6K42Ia8ZDNJmGSfgaAJaIrcasvyqnwxPood6RLzXClC1MHmMCZIpT+YciBaHNrz/
TZi7rXkm0UIaBrgenMCL1cbVD83HFdd7PkPtvezFhu7rPOp5bCg8e/pTdrKiGlg/9CyUyY8xqhKY
gt2Af23Uzf9bvm5qNpM2/bAo+BGyFMcxh/W9wodd2HuOjFGE4rHJRuItHxg2pcDgdKcNp4URPxgG
NmI/SCbc6+ErU9c8RIrxggAhx7MyFf4+f8FiNJHYlMdHLvCFmkNY5lLvEVXJ/RGpyjYw5gtZ0Fqi
vwYsZgGkM44P2E6HkI96sGmlGVFjqunSUW2hkASuiUGIc504TCNroLWiFBw98QZZTC2wINkf4Yg0
oa+1XLOrPi/5U7llHjOWGcoAP4nuiSzs/DQTQkFvFK/z5YhslnrdZTG2JSwkJL1PUobxhpG5SzVC
2vmpfSqQfxM6eBj/n9YqMhiAPiIJBj/mxkXyEel65opBmLY9j7652t2CWd+wZnnmLWXwAD7URhQ6
gA7lYzsm5eVpJaFEaMv3zEQJr5/O+PMs06yD1SnHsSgOTwta7RzmZmS5ZEqs7raW3HdwZirMBpjV
z5N7aX6jEeMnqll38ZauMcS/6qSwpbnO06vSVkmelL4/QI7wB9FMWKkPC24P/VZQilAUnyHEGRNt
biEzDEovREIA2eUqMnokl41/BdRk9rc/Y201qcwVGpJBcbAIRQ01MUOr6jsSlD+zdguQG78QMD3L
jmM3uJ801YN/Qk0f/Tb8bbUUTZAq7NxCGTK6ozRgcaLrgCroYmo0Q2ur0/JQdpfczAX6Z8wid9xL
/lvYbnBsqn4mEJyuRTx7vkCRriVTRKsLbF6CRTpoioTxq9FMamkiAUd30gu3s9y+RpG/NGdNDuy1
D1fGc4IoGSMQ3bzh4t7wpf/5I7I6aUPMWXzGCUL/Bu3sCuOhJtsEhuyEUo07+sgqYCN+73xoigJ0
R5+mBNmmxuTR/FQq2hSBGzVaVfwS7guEeObe4oUs9GV5SQCS/XiY4C0oVDmJk1ptvhysaYYWdYxO
IB3ErRZBaSDL09xqwuMS9JUc6lSiUfYHcFunJSeIqe6fZ6rmQlF/KeQDF0RfsPnbIwZo8oKIzSdF
J7ULAdml0HdUGV8nCgHi2eDJlnm00QfoUn1X31V+ko/8KmwXjR40rFZONvdHc7TTMVY2AAADAABa
Q4htD8toX5LiEEumcK4xLHa8DGPFBz6m5ffJkakSufh1EKuaK0iAU1ZkMbT8r2QoaIX81Yuhl6Is
d/xjl/dN1LUWvDhQkxnY7fv/ZLZDEeGu7O8e/Qu2yW2zv83H3A6eaNIU88eLKZOwHtdYAfhSa4PC
O5u5+EeX3JEcGnwK6aCU/aTz2lE/Xyby1mpcX5Yy+Cs6KPUuuZcgdaKZP8KP5igk8MPz+uHnfroK
Gdqzft6K3c7NLwHzJvhn9V5kj1W2EMXnLBkyiMzHlETsia7j/4eBI4vfhefu46VmPO+jxvXj81TC
zm5S3hmcHoulLtLryf48TGempe47kcXE5M1im+DsUQhKYSXdn/AUtP2bfKNlsRIm7bh1bCtkhLko
RRt5qN/B7CGjMAdIUlmbbWWcO125bmCUDqomDVOd6jlvyw4b7Jm9i2pOVwFuwAEPzOv1VrTmWYI5
+rdxLQZmH2NL3ykROgNtb15ZvFPo+Qgu2eJz1FAx1GAAFp751kciGJ1gBe3JS6cUpXJfulk9JaVp
l1yGRHsQsQxjqMyVUD1kVETNhfZB8mdPcVhfg72plbs0nGL1M4RkhmrdN6F6Mp6AswF+6kI5j1LQ
yl1mqpkPTRhx8SZb0uUKd1ebenHnpGa2egJfZCU7Mjq91gjuzNTQaUyrfBlrJIXvwVnlgmo08biV
z6hwZcDaHspVgdt63Evjf4JbGkLQyUO/7ZzkIIJzkQosI/5crqXqrLSoQW5QPtkK2u+Ts+ZOT/mq
/mY+y6Yn5Nz8NfOCJzhbNfUBZt0DcBhvqZ/vthCHrLnSQK4Zz3uNmOg94tMM/VcYtmdBBhMhein0
HXITNw3D4T7qRCuPSUVhjH7rm+g/IqLvxPDuRdTvZhUo6Ao6HG9zHQlddyG8Wq5dzrV0D7RaQy0g
b3sfCmOp+jNYHrHS+00i4s+WwAWec8VxrwENKnteUzSXa+j4fjWJqGemcSKJrjM8iz1s7/jHLXFB
Q1Yc3/nTMj1uetFuxrLv/QTIBWjW1hyCxS+NkeVymLD+snSu3yQvDfwBlNUt58BmwhWJbSsuLzc7
jkQ7g/suDA+xk18saMvsA8neFZ5oyeLaN1gsBpY/pZvMev+j6y0QWcFtjlr91/leTiN877sLpktN
2F0/22IxDtpRjRWxTAnV/bCIs5pwag0A2sX6iiVtPrZnhgaKXqPxdbp05UnKDrBMJ4ECPNGwYlMx
xAj/gA3N7sJGj3tOJ14ce4Gpq3K7mpvQ428SOHUG72tFsJZZCcf4bhVZyo4C+iENv+e/M8QsHbKk
iXdyT2J8IEOjLJj3P2GEcIT8Qh0PxuCJEmwZ9pdK6JVpESZX0ZEe6QBgk0LcYRFQJPPLox/Hq2rM
BNkTsAJBzdwkNGJvNXfF+C8RqXagU1lK4XuAzCSDPkVLZ5fxRztZIn0lxg02Idjxn115iBzS/m8E
tyS3pvKJ48f/7mA/3U1FLDidgmJJJ1+bbowK+ceby1F0Ul//8lzp+q4RAXULa8a8KdIf+Au7jIbm
5EwYs8I3JWiPAiDb2oh/Sg8QCWtAGhJjZQEul9Em0Bh+i6HrfX7qYkwkkyX5Y7jTN2wIF1U6OHGI
gwMIadbCKTKAy2tUz4OMvSR5AaEepN8Rtiip3+eXhHBF9r2rvsIw4ZJqBHh5L37Z/+Fc/hKN12tM
ZFwnWkfMdFAarvnyMOb8ouEWx1ho5yNjesEnZKAb+Lff8ErN/gR8VZtYOLLjoBH33nVpztOIZttE
GExD095RySsc0c4WiFAW+mfjeI1TAWTghYFqYhbllicUNkrcr0atSaYHpVlu1BbDHL3lSoVpbMhq
3iV4Qx69wZmxuSshCTzhexAaTFHAd1N3pv9c3Vt75Abwws7z8Y/4D2tgqu9LCeQhA3koV1uynp3q
fwYO8kmACmyuYO3hj6ttKDIx56Hf02rQVYex+cwBRkbX4045uU698gQRiJVQ9imHlaCIRtj1iDBI
9cORH1v42dQCsZguB834ulf4D3u2S+9w6YqLN28NcdOhjSNyBileNDbhHAYv6kanl2AN05gV09te
hmjKi73TBr686joK0mBiFwY0FCq/7ax2V/rTTQJU3yDYL+YOwszqNcAZRBBl5E2tMxYEYSGkWdnN
PAq7AuTE/RqRzWXkEYGkg3bbRPLaEqAaSqnW/SCHeUXLFvqyR+IiEnk3T2iWSJpCLVfQ/vXOJ5Rj
PQaLoLqkUVTCuOt2KxbG62H36fCrdlXMXt+8rrtmCtZNgfXB7uhiVxUepxnDuV5yn0TULnO2gw2c
8FrgOQxsCLRFCNKImnYNzsFVMGF3GJFJNjTzaoX2WxGJ/+LDrmnV52Fae3R3rVyQGnVy0ism+VQW
r/ri8tdXJZAKi5RjT7scVlaIr9Wp3+UA/9ZWeKN3TkuvHc7EsTeYpfiWouV1iAVtNZeB18us6KWo
pNB24dPHxJMbqfmcdp/9cCuEXNjLor3Of7QJpuperHciSkFCPYBMt5idZEpo2ucKrdZyisB+OlkA
ht2oErhIZHdVTxNUNl/symBDyzW9q3a8ybLhcmug/B94VeIZhyANh5MZoXCC4TtzAVJdv/Uawqix
n8W4ghrYQ4p0ttakOz02GwdGkUPlDRIpVdiMcjhDUT2+bpMLPbTof2qtBX8fD6L3UPORE59HVK6k
NndHtoB+AjjVT5DImTuxIk0am+ts00o0nUNUJg0o7p51jHUn3MlIHTsj5K4LPpz+qJ4uO6XijS6M
nKIQouNldeybDEKac36z6JtC2FRskIziRbb0kzH2dfCaxzw7UekGkO6KSc8rjjcdPM9uKi9siF/i
mFmGu/+fb10l9HZbqBXKxUc9dsI5VynatnxncKhpm7Cvd/LqksOVu4dYYQlvUQIvrteX98vuwBi4
g74wMaFOoN8su0KU7GMHeRNsSmCb3OGVkm7UikzlN8Ee1ss/LOzg/u0lNvPq7Z69PYBwMUrrmiC+
b3fk7RfKa2O29xvrN1nWS2045aNCTB+VdgHhTn2qajeo5ctzxgWqaTdL2hxcNh60/p4xfaauk3PS
fp9mC3DBQPJ83NxBH4qSich/HgY9x/ea3iU6WvxD0Z8X6mb9TjYOoTgdRj9xIGzZMwm65v9IDBJB
jcBWUg1kTrjM3AZ29xEhbr1j5iK7Jv1sMJ3WagEWsSucXFfw8/5e0u7wD5tQrA2B7pyT+GYFMFMV
riiDHYZKQU563sHrSTr1bf9i8mVf8wja9h4TEicMw9OawEvp+M00qrVHmF0Smrkd7zsOJY7bTBeQ
Q84SGNmmlcq48gnN1Vdlm6u96t0revr6WCZ4SKp0J8yHUM2lw6ygicgIrwCAHlnEgmXpvHVVse1d
rHq6etBChvolIg/2hw1bwYCVIGoBOLaVcxEmCgPq5P0UN2xoVEAtBU+hu111h41XAT1vMQU0hGUf
6XGlAaWWQ2uugYN4rte4IxmdgXSTki09V+VGxTVIdFICzuJn+7SiYooSmpDhE41+olmEaTIFOz1l
W9RJrDFYPZhXtUKnA/cgblPUCPPzcz3DTvhYdkFKe2QIHGrUQnqz+uwfMrksNz7Cx8Jd4iMFL6wG
pB2fp4v8An4bPD5+0X+JjodydP3NkE6i7/QYnTI2WkM2gh5iqlMJr50wbzI60YOB8IToOifSPXoB
NWg32SK0FhUEyXhs9oQUdLZgOk0HMvI/aHGoipPLgcofIikeqVonrl8kwCQfTRNG7mhhdCixh5k8
1XfgWzYPS8310i+aXlO8x2LJEvRBm2KeTZF7mfTZdxzdNFF2T6RBLlLMQnk+BVPsCXF5QcMEcrg/
xFu4NVnG9a93zxZsuG2G/sSyJpUvmMOKRgemmEPblEbq9Pv8WYwPTxKmLUVIef8cs5IzLArMBKAu
trENs+4/r2aDJN6q6qaChWwmHuJuDLAjaySmvZWwfkIPfjg9g65LqYT6jYY8H+VP1806ZayvbQD/
Oy9SagT1Foc8w3OMnF29EUlRHUXSHwQGUQ6UbLO7wmG1uRpYKpxLaz8XYvdEhSJH4QSMbdITFjc4
euNCxSzEGhAhpJ3zN0s8KZ7MCGDSpnXzJ9ihcexQ4aNuTjAtYhnYCKfnHHLVqOHOnNl0Q1euAjHU
/VV6v0YFD3wKb1p3XeWVlW7FY95iZMsjdofbwbkBNdd+oWXewStUB0ii03/+FsqqGHtqP+iJcH/6
ifbQGhkkQOxnOr8nEHup9tW9LF+H8H9PizNxvwTr1uskiJ/s5AOyFukmJrZEPP1aDEcsFVdVlyVk
Ijo64BrzQ7c+OcKR5RZTuhrVQhNWoqpWRN4ejLzbTK3dYO+8WL/+W2QV9ZgvgLhRFcGb7sEX/cVL
OHhiLMCKCvoiRwW8UtHOZNOm5GLafQudtJMSfLu0YpxaUf7ua8ms+SWANL9VrH4EczVMYuhaZoQs
MvMRcdj9lVkrj3lUYubsRQOxjhFnGh+PqNSN+c92iFQWDzXscdZjpkFffPCXLW21uh1su6X5BqdY
AENKC/pJTzg1q1C5bbthVWTNO6oTXpGZQHchL7H23HKET30WG2dWyCQAVMEAABBpQZpjSeEPJlMC
CP/+tSqAAG81+kANsMTXNDiDo8MQohENU2fVuGtDXtZ24ZSk4h7fD5STIhBdriskfLx44TfaYEQ9
wsHmolrRgTGGcy4gE7XgVh0O+2u2hZlpOgW28+qfoT7oa981Lu1UU8T2ex1pTrOjHziqBzCroGWa
LuMyTvVaPgndZk1XtwMeUe/rwf1JUqUhBt6dBT6A0Foj5MTmQ/y9d2VsbzHsNCbYt1pA/GUATF0c
M4xtfvKc0+nbIN0SK6QIH6xKUUM3MnlMwZL1ZWRvbOvQPEV1Gj27Wb4UWk/wU+UQILs6FakdbGpt
m0FpPlSoFNTCkqYH+ceuqNbnYcYhENSxMAxN8l8f1AhsmC93PLUWEMrOHyTrEPaV4//CL+TWfrxM
ksHDGRPFVTTP6x892IVQzfvLxNeIp9N5Yfb2dl8vIpqbtkgWRw4ZlEDzAkOqa9kpPWnqhGNfNbfv
pABdstugPSndlrPFNlrmpAqC81XDYECUukgpYqP7q5Gd5wDxuNToKVZFU6N8vu0abIk+2B+ElMCU
Xfm8KIUgjhFHqdWIOmdNyB5j7oeBqaZNqbda/CfQkjN7XInJUkNWJ64rqpsfrp+Djc/6tz+pTqPl
Wj4o/7oVV4k4onmj3tSF5Ir720YIIUaLUUbDmeIV8LCoc0BdTmHFmAqFaK+Mc7opjEXmYdgHzSXa
bVUUUErHQXkVlzgOmJJo/uxIHZ/+Sl1s63z8HZS9St4dzyDXevHE3zok51a34saYmLWM7f3FEppz
iTCTgnRgiIqqe1uSGYTbfizpbCY3eVy8HgwD+d3ItGfggIjzsp8fKupZTplm4d6jMQDu7yNlKzpx
C5iATgQiB77LoskdQEGC6xs5PolgtOeUkiBiI+ihb5ewjEh/IaxbcX7EtaZbPuy4aPgPbuo2onxg
tFT/+ky/jNA+e5VvjO+NQSO9AegmeieOSwM90vLIcHB3Qdd4yrBJQbKh45XMbmlkQrGjEXsvJnWi
oOh9cRTIhXzsIuODY53PQCto8Ff06PdItnK5+iniql47gUr3SFU6jcJf4eg0822oyWaVogQqxV0x
7iBXRrPddaWqB5590V/O8KaXyHwMMImAf0PAt5cfB7xxcyPvHWvYxgRRBTDZ8MuxGwR20y2ilv4k
tq48ztYzGQnb2xeC21xwU9zx0gcwL53IbR8KkX6gvoTSaYAuzLBosgh3z4hNOeufgOKUJ95Yy1vi
crPv5ElWXsiw1+7whkXUIVQ1TZ3app1KLf6w8xV/by5RJmasFfxJTfVIIIadwpzZ8hJ3JdlYrlwR
qRt43RFh/NfBO27hKoLY1Mli9p3jN6NGn7RCT5GfrkdK+up7oRcUek3chetIUUNozj+FUO2bOcYC
gwR0MkSPvDufSRxavbZt9+BaJqhIIiYV+Pmr1hr/oHNE/8DcV7hh7W/2KzF5lRh8b657zhvqTkji
r5i69gtrUEvlqAt6yNVCWVKazycoFP5K7HztsS2MMA72cu/Ja/GtVv2/+uXJMII23Wdc1KBwCg8U
z43ntAylkJKe240e04kP9pdIZma13qw89gKqD+pthv+TkG6yIGm2q+JdFMbDzChRbH8AJknusaPh
5UjdLHHGFSWmUVwzn8btQnBeNWZ5XRGBsVydSTVRjos8aM8BigFmUXJVH7KeI4YYZAZx5DiXJsKM
isxTQvo3dGlvyaRp4c410setBJQ8s/rYzc1KABbSdQyCWEShv/G2ooIY7+WlCc/9o7TPUjXSGyPY
vkFce0voMv2JWxRIkjLUejSTuzFMuGwbHW8hGN7ei6ELPlUy9X35qZIrC0tqyM4K3aC7HwbJKaAI
xVh9jJywhj6BLgRe0wAEqcDstuVJIsfWh0ZWgNH5UCErbHZWq1WrWVZWY7WztD7X8QgN9esd+sL6
zbqcZr79gl7qWbdYnOYtpShQeFnGdz1I+Zvg2uTGxOn81/K9g5NBtybR4WkM0qjGuXgF467hZYZz
e6732ao6WWWj8sOn823IcsInes+PvJ0pn7vRn/pY/j1wiR5GxCYeo73RJ+2OLUSU/0xjw/z85xXa
bl7PruRrI1yJBe1NOaO81z5Nk/G9CHlCnV7oBW4QqvXvTM3TzfQGgLM4jPWspn7FMUHlNICPXa3G
1KV+wlQ8Vew2VkIogqNuzcMbNSzEtOMpNTUMy6Lht55FbP5vJsrDhKcaC9WTWOq/SJdU/SzE820l
Mm8lCtAUaVlR2ltSTxVlL+SrC6n1d0a30o4GQaoagUGm/5cxnkdRv7du9iKGHGbuaWLnEVkZIElK
/cf42wce9uti//ccr9xsaI9d/3Df2JyLY99IUVvXgqjX0qPwWCEJZuJYU3UIgVWR8fZatndw5XNH
nbjK2xkTF72N7Sl0WJkLEM4m5SAwAhINBByXSE4VLiA0lel53J68lrX4+brzqZt+n/4XvepAvv9W
hNiBEEA1lF9eRurPbZcl0t0bGtCeSfqnDYtZwww/KweuL3FnWpkJUTklY1Z0vP5ROu26AkRf2qZj
IxUpmI61fJxAr91ujOih19X4SF9iDLzJAwFKtFo2tgYvz9X/o7rU+2nhaREn6P3r4EAnLLdYtBQz
edFRBIyjlT3p53jo2GlQ0P24e21P19y8w2ZQXDgSif7VrnMstnlayZ0TGvqix+gN5qXpq1uiPCfh
DMUOjDO+ohA/yPmoAPgTs5HaFTXssRbrO0AUWC8p7FlvGR1OkZQr8q2Q2CB09zY6fwJITVXVvvD6
EoYIP7iMcVN+xFZPM2vQo4IkScuBoMRiTzuzeCLgx/IFd1yp5rrSItQTVWoKtx+7Ooez+1dN5XbR
2KECr+loXdrCEiaqfgff5+nZGUlT9p/6LgP9Z+Xi6+EI8kVz7HRGygTm4CcKAAADAAUICyaBS/Pz
vE6u/VM1Q07K7EkWGhs1afYmKUiXSFPGCHtb4YecHQWBfGNKHYQ54WKflTD8g5y5pNtZgWMQJrGq
AFy81cpBU9TkeBJVxwxY5CPPA6UcfEXTMwYcEBVVXzh6/nrv7JihE4B35k/X8rTH+yACkgNDb8Os
fpDffDeu+Sza6jYXcEbT/jDfhipnMFqzcY+gH1jQrxYeQw588CZWA9eB3BZeH35JmbI7FxR0cf9g
z+oso7+at1Su8nWvrOxazFYJ/8DVgUBOIZoZ10vkq51HS+JH/a/T6hagoCHqfmNN1I1/4m7U2pz3
aMbGSA68K37h89U/CEWXiyFTt0CVzGphtSiSwpVUDOzXYxCn8FVCfaChfdQhEyboRMWGhCS+H33S
RrByK22AXPpIhW6+L8gGMdHpts+C5JMtyDTtgqNpUbNorc80a5ayitxoF8kwho32O2BG1GMf89+z
LK1+3rqkrL1N3kdgQUpPBdGZuGCUg67H3qIEZJs5AUBjpUQ7503LhDAMQqDhoewfZyyKet8Bf6iU
6OVrD82N6nCrTRYh8DBAP0mc903u+yHbEyZ/xu57RCrzql/+BP1KO7h6qCrWQGEwSWoKF4XEXJIk
NtriM8smFgJ+CMmSi8g5+w8xb25GpmSdlen4EOzHRJ4xmiwPU3woz3ktEZbTuP86WA+05GeNnWI3
Dyhsp6AYfFLsD9kJMSUSNIsPAgrRAqT0ghT22EEbxqXF9ZOdUqbbjTz4A3A72UpoGZcFTcW+OOsZ
i6JcIC7r0qBzNOpu+N9EhdMXLb2AGhAxuTlQ4/JSAfIB/h0zEutGHBTSJ2UNe7+b8s2+LBDFV+zO
rl9gy29w430PoC/USRYbvJ8xMXqJ5k5wGM91S3J/iu6CbqDHCAqQp3IOD7FCF6wECiRroGS3vj7W
7kkiX7eMgbWV5/OTemybb3fa9AoaSdRp25jakdzq7bKFoHEex6vELJnIXiUSj5sOQt/VH1PafDbS
1mQzp+dteSrqwpYhd//DVM1LZ7CWn8kMNB9WKvsVcpHerAZJE9ZwuHAqkK/igj5XPHcbF6SDRLKM
nCEro81fG+SjL1FOBS6mwiZ4Uh02Rv6vZgTR6VInYj+3u8kdYh6nIdXzAiGMSBMPMwpgZYsNRAt9
W6kgqcAZ2UkzOWIxdPbWqys1p0yuCtL2+jj+lK418fVjdSAcRO5Nzouej7u8GwoGpKprpx15pgFU
CuqQmNQrKdLUJENCeO3lWp/PIIFOccLfibK1wcVkEbg0BY03n7lP1CineCunld8IozwpFu1kdC1T
VmIjwptdI77gYeeJOk+8Uigh90mvqXzMDd2aAGhwUaJmQDHtv+PWeElPjgElV5dDC8YRYCHUsjBH
4C7wN/HQPaYn788bGWW8j7Qio1N8kT+UYH5eJvmp8+MXKAJNWCrmdm3VhRfO2kBrFffwtqeIR11d
92PaydiJkr+JenyHEOuAZVY/oE97odsIzzRVUHWuofwtJJNM/CkIJPUi+AGtoioNmRzK+MunylDf
zf7VxaeSLCOVBCeoPiPOEevP1gwTCjnsoKcC8OEVnWZ4+OLQkqOpWWF6zQIwR7NUvdBDRbMoPe5D
j4fXuWZ2Mr3iQiiejnqOqzZyQGv5k5bH3rZh7D4ihr5OoxI5wnW/MpBzVOo127L3LAgom+7L0CmP
0qsgFVbXJjsXq+BHtjuZEIxOXfPWnXpRZedqOkyFDK9wqIL8WT1WU0A3pEqgPVaYq4YLcnDtzmca
8eXSqaECL9Qe5nkfFfjv8GdE95t81EyDQun4KMMbkQcsU5uMqw/uwgSZKDa5EgHxK8VyBt3DDsxk
GCcCod1GMzQD9QmcloB4tUW4uorKGm9Fx1hmyjnbLLoVmAtHlrAppjj+we4eBghoWug8zgmFh8mm
9prN/XhSY3enMlv9vPNronXN5XHkbizGmsCJwjEDsUd47D5QH7/c+9S/e+VoYqy9hSd0hWWbvV3Z
rqtDTqldhf8z1XfAvOP9HK4bt6KjL+JtHPYvudLqiaxph9SCUZ6+LUVBVWtVt7Y/F3C69ZvCIiQk
8gUfZhND77vHhQek5gDjNf1bZi+IMDK4kvofqSWe4MV0XlDrggR148zXESmcAk68kgIzhI4E08Zl
4PfVFykvt7zKzsSwWddYTqE1sWUu3s9FQD7fpHBuxZoml9oBG/d2PrG2zMbWSyAFNinKowfMNWEW
wya1s5Ae31KLkBHwnI+YD0IQMzUIhJr6MwcGrBJ523x/otUJKwEBUUKpG0HRj/2X2XQ1V7fizr8Z
xUWmdwjnh/6s8f/9zml4t7SYQUz5F6I76UcAexq+c7eTyY3et1Zr0yoP+uPC5IXLwZz2uhJoZM/S
gY4BPypmb9TZTfPvp2tEQ8QMSVTOSCovKmB2zgkqKE1NGRS8vZzwY/itYnSMxXsw3sCScjtBDC9r
rxyy5JJ1PQbvkTeCv/p3NvehMhzlmEM9RmkcFpnzsoRZBz2c89vH4qPLO4ceNYKgz03udfkDrjNw
JMmhTg48Hemc6TFeJP6HFw+TbANrekzVsk+aMJIEQWQ0fhhMCGInmWCWGIj4ONUxjONmabsUMni7
nQxulB5vH0eyW5EIfbrD7E1eYCa4ufq9BIhcg9ggWufXgY4Ka1Y8X8IKvkQKAbsoi+ovh5qCMuvA
pw5flTLMBwKeTxzq6juPIv0pfmFQIj5b9Pv0lfADegAADnBBmoRJ4Q8mUwII//61KoAAbzYdQA0+
HM7fGlfUsLgtffLJoiATDnC98Ehf38vuwktTG6y89L63pWloUFbR1yYZ2vhpaapwiWu55tRTcqOK
Rp1xAVeSU2djnQImLUxUDWLLAo/FQ4/5EKSoOqAPCA/e9vGYccXOyTrmTVkiHbChxibGTBi/6w/d
N+wbgjEGwyNXhXSjACVNOJ7l3yDpcox0dPWdGKpGU0h+Arwp3XqOdH9sA3GnQ60RgKNT4f+GYUrY
Os3qnANu/yrjZ4d9zJ7P9Rug+Mj0vTIbAbJtkoRGpryYDA0Dg8sdhTiVZBSKpxN3H5u3/ScjflTl
/HUhUqQY4ipPpGNrkaLlFNWfq/aZm4NsaWuYetuv6xPbOkEc4OcrqGyju9g254ZtLPqjGgoXL6mT
FWe1eObYgJBkIxBrTMVwA9nOyVbzfNoUCk8PYT0wUI+RrA8ILFqYAl6pLP2wKDjl48obmwm8xUFr
3zssutUpKgm6NBFv7lz0zwH1U/96Vj4rCaaxXe+dnvVbVQdLwMC7ExtUJwsjzpEk2Q9IH0oXM/aj
A3YobY9Sq83dLlvF8aP/oR1tflcr1fZFDUAEyiXrTngHLFjyhDdc2/yiOQ2vlJnbZH7vp+UKdiHY
aJaQhpxSyg36iULuc3IT0fkncVh97eJ8vaIn4CUh+C9ir7zaCLOEOZcUJw5lodNV9lexzC+WPEnO
wRurxlwfWTJoT91FCScMMsKCwCo/lLH7nSnMy+bD3M6fQFWcwN47oulrIQ2ANEo9FDM/zwf9yP2m
ze7m6OwdUO+Rr0dCvGZQ5zkSqMUEsVw0Z6kN8XfQdgYf9q1b/iOPsRVj9oxabnFrHF7m7UtBj5c3
bTEYBToiXBZkuEw9FkuZv+jRnfPhYxi+OJnxIPr/+rDmyLG3sir1vz2FGtBgdxY4PKjSIUf8QZWE
IN6i2kpNCIUAwKbAzSmwm6olw9NXqQdIv9BrXuEoKHvbaB7XS5b/2Cu9goKPDTAMqWvdqnH0w4Iv
857t7Vc3Ew5UqZw/eFQHtmjN0M85aFP/5mKsO5aV2FI0B6Ek4LkT9kVB29151vKNBWCL26pRzIbM
MjEKThM3akrdWWJI5fEX6ANqVvB93vi/nCpkLE9M+m/uom9KsI2Zl2Bf2quLoDFLLsnsBtCX+DyZ
1R3AFGkWeboLbroaQdaaMpk06QqmY1qx2YBJGaQpu0njibXGpPKhR+XYF/kanoebu06my0ZFRH3m
8SCG0grbFzcjER51KVvN1xSfGCSf+mBMkOnLtyXW8YVBnV+OWiCQ/X7Hw3TS0rL46+pCqtzUmRQU
R4h6c0tiWg7ndj99h5aTtK9KCORLKJfgqDHQQlmTp+u+oX6FlWH+veunlSVZhuJIh/htIQoKUNsU
sqgw4Zd2/IpI6iv3xesAq8x4v/JZw4dvLLxDSYVmvcH1+u3OfCD1Af426bj+qSjzNkwXb8pD5iAx
Wwdex5Qi+oTVQc7IJmDrohYbfHCgdrujidij6mo1xE41m/QIcSIAaR9D+d44tXIxdj7Q4itPWboO
NAsuSbqZYmXUXEdKzLCqKM8QTuXGsnLv9YzH+xrk/szVAuKyxXyy6i/MLOIPCeRGYKv129MX6k+I
uqz+a6t6ut0yUD/XGdZ9oiQcFOvsBuEz8op3sNEmrkM2Aa6Gm/2Q1tmWzazwJac5z6ZC9hadV0Ci
z0EY1pun3YeHY7vfYRdtKOEt6XP/s2j4lofSaPl1SiVZKRQtbm6K5HZ4Fd+dWsTuIfMbNcoUlwtZ
5qCoox/4LnkYbG55XKkA3q5V9jib48i+ga7JaKyGa2+r0tW+0k5Ec/T+YXOsa05hQdn8tiL0kPaF
Rs9Z4e1n1HQzK3IlpQ02fIwI5gfG0fHe6ZdCP1JUl37o2VZBMZrjYG7qOPpCdCB1qQslLCR+RJ/R
zWkVdWAlw85pIuFB5sk65ItUt7I149co5m2ZrAxtEeipJydIblqBhwYPmWIBobDiPCugVTVh0IFq
prhX8qgGQfKSjt1cYKwc5wbZiCullUwHN1n56Wjf8PdRF8oCwG0MHoR4RWb8M67TErAAGPWTEe+9
Nqv8GnvtNt8IgH6DSfaeZGUbfMAQ9gWD+m1QF9g5lM9Lcle5VNzKjHarBA1gglzo7Ew3CH96SfzZ
maAXQTnYzO5wWK/uVr35euSVj/xCF+Xz1yvhoOblxKa2gV0sktNFHUT1/PX232F63RPLp26gaB/+
0wAtcvGptComij9fzLy+5LtyTNRvLjqDTfXxOpF5pDO7JQ5mi7C4cBs+lYAxKBkhgHSbFkbVz8CS
MYuf+gYZ0mMoOCqj6KxtmKcoPpvvk5Zn/Ql2gNE/lfmtknbbIBFVOyWytNDG6J8ZtxAaqUsBbqLs
v+hi/3hFoH3aHN+/8o1LlFUdWLPhcD2jn52nGY9yxm4vZVwCfwllW5p7+CUPonQez4l1uho+oqO2
ptgg7zsTDwtYsOCuTc/mrm7IdAmmsf7G8z/tzSn9MijGIK+K7n0dwFPQQ5CPqN5rdnfY748xliuF
/T1jgFsQ/75PXkNodqWpMHL3Za3ZknqLX1Hn5c4EdEUgZX8Gl7MGw34n/w4LQEy31rFfWJ/Z1jQ7
T/v1AXCYVORSETMnagXpKRndj6VNZ0ONwm/uQpThQj09sW4xMf9PRwkf49cGovZS/7pZREPm88tX
Yff7wOHNPE7xaStcJUrhBe6312WA9qghX9kFfldQXJRxesLRZVo8hj3p+hLi4BLTpdGNuNvoZaSf
IE/hKko/oSK4guXmq4RSS4DStePAiDAIJW5AwJYvwsRUCIH5oOmKjFvi9tR4ruR2jK6oMf3sOvGl
N88sPfDr1Gmo+ICvQ7cfnr1VhS7kYE/Lhfn3VLwlDe0/dnNuobfVbODl4BrG9zlpChfri5G+RMss
AY7ch8US3ImezrMJaYzyq0KIPLZCMGe/hNa6zX45t+vVQ6iEJCK4UMvQDodOVJdZBOl/sWuZ36w0
xvKxFpWed/kel4TlRAmINCu4fa8F2lX9ob5oVCPF6lRN7SPkEYJaqkw2Bb9Esz3zbNa0cbBVZSz0
iWg0PhyZvECt1dzu4X7CeGdX/saI/vwO2t4x/fQNVq6w1WUpk1adlOgc+w17WCZAMuCcf7xGLc0e
yYXY078LxQsrWV509Qy5Jl/s4Cu8+ntxxjbPcFJn+zxaMsbmocdWPL5nQc/NETGGTW+mhtFAfIJC
8fm5rxgZXeyrdTuDIt5SQq0LU10dyzgDO7y/9yav0ADZEtD6CEPWuEKVloeUXsFIBIejyAyuB3Y0
dp7B74DcSZ3bXkFzSZewZch2LYyRSSqpkfusF5Gy1uquXu1y5Kf8PTWEfyUV2f3bltQb4JAfSqPK
/FNEGZJ9SYUAXzo4oeTljgKsqT0SsjiaMTTsIaHlyeej/yRSPDCFm4nBc56a+7wIR/hhcun2338l
8i4KByY7KHiEZcNee1tUhwXO3qG11xI7x3TXXAsl5wDYNEQaZ7KPROLcjhKCsJCv6bIMs9shPYOJ
92oEGmqWfag5AFuhiRb542ct6Js8WpYvnxZgDynQiIdFmKiIQ24sAvwXMhbI0xamtqSZ15G88oJO
ihExzfC+xdWMblOGoGNRwRbavy0gqOg8QnfMCGbsZ99oquSTdTms5Oa1sUjuDsUTh0Bm9BndOz16
+sSQT1CFcOjVkTGcy48kQMKqJSychKHVH6niWLkq9RuEF8pNIaoCD5yBy4e8N7r7iQAjneuZIAon
nqQQnntMA8ODN078wufCZHfzvFazXeVMkxIZdomhzr9ed0aM5tRxX6++ajETVata3bxH0Sn4HmTD
ijukS0cwglEOsSdMKXO5mySeblgDkSxrhoDaxz7cr4hpnMdJbeews//NKFwesVNGYo/6zWjODGWl
1Ir5MGSpJcCqPW0YEExe0Wn0gGrl/DlsWh2PbXcN8N0xHBT6+hj9J/N79A0oAX2dNNwHfkp6CrDx
tUmZtY9O/37iOCKLniGyehGgvEyUXwKdTMsSEyehHqEXa5CDHKJgn84hk8zN5nkshkgjxMnSZRUn
1sbXm+hZPxSADLe9PvQrTpFAb8I9cVInSsOMFcPu56MJMkxezKOvwdF4O8OpbASeOF3yNkeXYcy/
xNfaslcYNEPixJ4pHc4g0YE+tZk3t1QYy2VJBTdB2SmKcpWIl9Uw1Anyxo2yMdX7RRwyBhbpMAHq
mOlKd7NzBHiNDJ6o1d4pGO6joC9iomRdDJKMH9QiCZT1IQgd6ovxvmRwgwQkrA+csW0bFnqnoURo
RPsHtq79hYrn7HPqsb97nF9dq37CgIUt3syfex28MXsxOrYCMtgZilGGFqNECb2Q2VcSCvb4keTg
btWJ/ivYFEq8kCBLpPAp1Fj9Wg2xfH0w33usaBN0YwgwDP9Dcr88ayFwDRCTP6j82R1WJjmnVN5Q
gEik3H/xQDrP3gm19Sv5KyhyxnPJgf3PSswJy5lwMLrg5FzndVFL4QFA/Dg7VnP7oczD0+rIa//G
wydQ5EZVzZGqnTUdFf4aCeuHfpk2vc7I9WnXPUqfZm6l/LmvWpy8EwLmkGTx2DUyrXLsqU8KBAQH
dG1Xu0x8jcmzxXTt68auXwTl7Z70/9MoTDPXfnh+2nS99U386S5cWuq/xKwPSAGrrgtx+AC8im5U
w8On2YnZUYhzLCJfzD3LqprmYRZSMpnsnAtRmqFyFARIoVsbsxLHOiQK5fvYAj+s51bgDzR/A+15
GmJc+E1oING+1o9WZPZ+yyWtyllZxHDbx7Zh78FhYDbK9Pz2uVz8KOUUkbT6Lb+5+7GN6B08dpkO
v2t/Z6+P8xzV+1ayqcd7jv6BNL40anJm9/LC3gtFkp4F4oaCygXLZbjxE+zZ2+Ykp4Y6m0cb3kvl
KWcdObO7pFWEXTo5b9mZYIhQdG/QwQgAoIEAABRmQZqlSeEPJlMCCP/+tSqAAG8pL6gBMppMyAcZ
xddaMX7s7EZ2RSNP/QgmEtuxsiaFKY3gJvILuCeFP/AhPZaYruz9NpilETkXC1dyMz5Fq4YqluLx
e62K4q9Xe91QvTJxK8YWu3rNxsPwWIbyqKqjLY4R1rq/Hp1j6lt2QdMcs7kmloQ7L/+gR22MBU9c
/1q0c5gB8nyqV3nvPPLODrDc6cRuTKm1KSBTc0DagBdyhmpHBgPpU1vEC8wkBvS2LXT/k1TGc/lL
U4FvwOJGQTNMt7xuIUkJjdVQAwIkVRW0hMIaCFCuEt/6rI1BjPqSZMlaAk5klYcDeihch5QvFFdp
sBPOc3ucfqYyq9Uvi45wmW3qm9+N5jCvCGc1yT5ZMttv0NlLeOBDXsdkf+zOp8TsuJttq/bBB1u+
jz+pnNvSIbD4+xxD4Ys0xqCVKaNpMbQyM/UkUyTaHooQkVYE5FviZWSl7VlRKlazyMvMzFx7jGws
tl+B/GvtC+8iYvVxOip162LMmWxPKPhZxhkQQHN9diHcVKwyMKHgRNqrrIhmh+s6AfPPSYwrNul1
guykJx1jEciF0JtQESuyg+695c6sxljl/iwuMyYFgjIu1UH72BjKugGs2lwys1bavmrEeluA9090
14X2uWAUta4QP2zWMj8VU7vPxKCrg6S1IqWnFeznU0ZH6fvUHEN4fu9K/q/MY77Ktk4WrAfWKCZ4
WKcziZpqa+TNQISSa94jS1Jh2RIa1DloNh7PTL0aYB+ycuODK95YhtvcIrKDA/zWzoJddTiSuXbt
dG81lq+KJNoLY7tAqJ+IMQfS68OiHNwGHmCA62qIqOqzPaiB9oZQaGHaoUa1SqrMidJELRaZCEuP
V1GaK3Kk3+t3lxjbyHObyk/AQ9mkPmLWubiZo4LcnsZHr0U3lLVOpr19QFc5lyoxzBcCda3UYd3M
MhKdPXX+A6G5JkHGK7doFLgHnMx0LrG/tmpcLMuQk4HYBVisTAQ9Rqirq8/dUpWgdxkf9u7ntZNU
suh2gRJJLbg6axgzmKIYlFjfttu/yf/5J+jmKjMmo/Aztp6uh9UpPhd+De7J9zpFaovlObDSdeze
iNSUYUNOk9jEBXeRZ+EoVgyM5h6j4u3Grt6CSqY5AVJP0j0o6aUDDnL3Q7GTaczly5ozWYlTLisO
BAAzSkcVOFmiV8RBy/rZXyrGaVPyiHmeChQQnyiUi+7R8FoF12dg3+jNsAh4gZm9E0l1McwuYIkK
np5BInNRs7PpRXOYHdmoUD2TlMspEFachsJbcmw5x5fn72iBZHor6FX8iJ3Vj8BeVtkaO1gIxwcO
9RXFw3QRwndQbrcDZLQL0FEARrvIh8ZqRlh4SoMrG6OksJhZwm8Y66dbzujGT3Ly76OeJ88XegB2
prdU2lxdUwetr8GfnqHUsh4g9VwWjf0x3CEJgOtNgyXTusp39PPyFzkkTAQMSjuQqqg0oLon4d8T
kcqSk5EWk97GCHvEhOGJxlu4UkEENeP8RlRMwXM6PuzQZE85MRKfUNJ/hOAcqF4IRV1VqxXAUHRB
q39A6LUzvqvIx0TBMuXXvDzPyF1hZrDzZ+rDsug1BrE7RHr53t+NJVzGPtt01LgGFaukyq21xouP
sZ32+/X0P2OHR0DOiSA4ha1W6oTQ6Y0hj7Ls3y2YvnEwEu3rJaYS99wiGxtilzPZ8Gq1Bdm/LGU2
I/2YWDTBjLyVFBPCaEa1cqzLs4z/jiQdvg2G/ENXg9qDzSnZFnjfA8cWh4c8/P1JRAMfKkoPfJyO
zrkbrC6ToLixxr1D8711VDB/djpKFK1MRKvh+HNo4ZzZR4UrgHLLi8gmndqoD692HUDrZAfU+VS8
iW2oaQlcUTiOt6K+uwP8SfV0r0YBeZaEce614OpL4kfAhEb0TkeGDEH2Ng2j0TZ8y1JOKNVLGBKT
HAckYt4jp9nOdC08B5pGomGYopaGQRNN2Vs+YvJvok7Isea2uJ8z62KE+xYV4FbLQf+xji/I2XuI
2lgl3BWTuQQLuGbvietQP4pU0kPtryxWFEgQYuUhwGsOmXjqb0kLc+o1sQy9lIcrwri9NBVphj5w
m4zwzQOB4mT2iV5FvODMurMrbwJ+VUIvfUXdq5bKU79oPbnLsWwKKYkJpHMN8c6KDCtr4i3CWgSr
tBRSh84TfW8LVFqJ1y3Wdbt8ZU2AWRCSoRsfjBwhMDd9BLto/+MapP/4NYUYO6SliO333QVARYes
PfQ7LFxKewD7OSe4Zqf+p1cBKiUn51iPMXAQ0ckS/Kejo7j/BbhTtO5Uhl8R9W7hAJKlrHBYF8bd
kO7S8iJbN42DMGO6l4insL0YQjJ9EaeIrIT3lczYpBFtaER97ZyhrT1ZJbh1Rl+1xzL9b2yLR/Di
6ShNYkvvbx/8R360lHm024hGewfHV/R8mOII6unwrAURbDJuxLy7uMl5ZdW7cdPQrrl2DEZN91RU
uqdy1cCeuABinoAxbQw065GONw8KKSy4MmIuEgc5boQ58FmUDw1xih8eEUI3XHkCLdYHGbu2fkPJ
l0cHI97DhMaJdXzzVNd4IUVr4v3nx5WeSh2jE+uqIlqIupXyyD8PIDgSg500VevPoWcOnKiUCk4x
jdDBr6B2846jLR4T2q5+zrlD71i0kx06IS2WusPlmirhtuisHWNSgZqcrf5eA1j/arlM8XeVzti8
9btUpYCh3yFDz0lejzgO99puoEsAILdqog52MM4eMOoWPbo93ZPeP6fpE0E/WsYL52tRgXYAHFMG
QHh87HT25+nW7/eZEIx+4ZlMlnx7B/UmmKc/DSV1Rdfw7uQl/DLUk62Rh3s68mQGcL0nnbjBY/tN
pBc9XQASUkSSUQqST8aC6aaLyhu1faXmneJmfdjbzdgRTIp3n4hmpstv+Qun7UY5abosbe6TarqH
xrsYwcqVGwdsY170G2HXhnl7L3cYrpkqW7vRpEB+ZPDAOnGEunX0ThewKxnwNDOXZBuHycGj1s6y
VROE8i7O2qxOF2puHTYEJ0TOdvAXBbGt8SSKckENnNJbr08Z9ZE0gB9ohDFoRXB8U7RKeUyMclX+
SpLV85j78fftURYXv7yFCgp7uGwuLL9vO5LmcH+TMTxpMUUDHvW3IoYhCfHYudjCFJ0tka0WIWqD
rqZPM2kQkHbAWTBy7OTssQp73yl+5ysIkN7GKo1PWwZeKHNlYCYlKFxw/QmEQP6HSswUltpVVKGF
sW4d0ZnwyeUNTj1U4NR/2d7I0EyY08XzNkGA53zmuyvvJa0vo59jUWaISB2oNGqqL0ZT1a4lDCzk
JJ1RdXGNRqCnbMVVUrX9KgEQXrlb+8ESE4bBNOdntuWHvKRHo8mAXE1E1oeZGUV0sxxxp4FqgUfA
X/Z0Xk1OLkGIGX0bpE7a8s+59DUHM4bV3EjkbYNdCk5GW8Y8Vg9QMihRfTqJE3RjSA4Sj8mQ341F
redPQ0qlrzZN4TTKq1O67+n8AX+NJj9kgB+dHlG+f4/15ojaAOEuLBmg+mYeMD/arfF3+Ajz7vLD
VdGqjDUV3SB8nrwwDT3+scQ7Z+1Wn0eppsExfduCpqwgurNrnoz5u2mNwzBeLHrLDLk02eL7/ex1
bQX4pyXILbvwH4kfC6IAC2rx7BVLnoU1hM9lGvNfyJCOMyBfY8yoAoFVmCOrS60QQcpkSyWlVwGB
XRTu+Y7Y7O1tZ8inyt37b75ISV//dMxISPe4sFkC5hhFK+QsKd5iwQ+pVuKkvra8GdLkmZ+Vpvja
5JeUn8Dh2iYAUB3YtK41xfy3qQ4ZR5oUkz/0PeRMottN7C/VziclewqwgrzioWqZup1HafgduKA4
VyHO4XnOQwD7VdteQWhw1IIRt7CDBkri89Opad/FJusMRyGo1darzLidJ1Cw22ryH5KdzSwQYmP0
xAi+6Kg95nMFZDN/xxFD+pVksd8EaMRZiDZLUAchTtPRctBcxkYXSKpQwzgzKs+8T/oMquBjtJ2E
6KxyPTnSHk07B39r7wm0UV8BqUDAkKE5Xt96piRRvn0TbKu0nxkg/d5vO+01Hh7z1Ih6ATMtWSov
kzzKrMViEonBiKrUhFPCyXwexUxQB0j+wqoOm3oJtxql1esFj6C4VUugqGta/6jng+YZr9zgbWM2
UBU9VoY1oNa/1W7oxXwMGAu4VCCs6S8htwuAMwKQBA9GElwGtFgmCSAFAWAKXDPhjFBoL4dg8m5k
CMPOTAFlphLYahe/1qsjx7Grg0Uv18ep9hGq+OuoxjeGXUn9oJZBgGS3Qk5h20zEHlpLJEf5M8v2
iwaoBgCZzrbqm3x1RKy8x2YetlRvTrmtb047FCI8QiJsLheqke90uo47EgcyrmJxijFSaV9lbLaj
YZgKp9Y3u1AYKv6azssOaV3vOIC+zbXMbvYyxjoxwkKWDcnO/DUbWfZMFQkc9sweLJgEPcsK2MZw
m1w9/ev+7jjBxiKLp0dJSVo7U8OqCFgv3N6ow04dYk/j0AsM69cCWK4TNNjMEUS21En5idNEEMf1
YLG+wbqQaHC01hcEXuGxl78hHTuqcSo9xaMOYxLtW0mFDMMpS+kzWlcaGF8Lzazyx+9gxH1oA9ta
UAQM721IuTd0r1jZirCsf3K9PDi8tKXzmc9XKnh7a/qvYE+GRYWDJXbHidUck0/jWP3f1SmdkKkn
UR4Py4bQdyKeeBSctiGdATHPv9RV+v9TPf/mTS7DaiBZ+8Ck5Vf80Bsy49H1sHybi03myZlQ9aC2
xiDpQfCQBlthv7O9JViU7Z1W0Hk31hociBcHuWCsn/JdA/3nefT1MQELQcQ4mz2HS5Hj2LHHXYZH
QZKwIYpKcGnq3wlamu15Tt5A+68+3g5H6nWQMCEertR1wAVHAaRXnKcKFX75uycxjnlLOLJaNIO9
NZlestP5ONsEZwDT8KQEYjKtQyibAW7/LyJ5j3xUXokvGLt6llKFjt13reCcmIJAMLUu4iXM0Mls
cnhgn9AimId7lnkt2JZgPOuP8S8Qom8Oc0BcAPYBntgFZR3SW4U1SZipdtW8gcUk0edOgsVY1Zqw
9GBpbUR62JdTZLRn1Lst36y40BmUWRtDGwZjp7FsEPUM96lLRpAp2O5t0Vxb5C1LsVbF5XJId6g6
jrI/eWRUKRhH+Z+IGXuQjkkwHWUYYpnIfH970/DxCtTaZbh8KtgUUklw8JleFwAGZWg1W4OvjkLG
eXhggAkCLKp1WIcKvO5C4I4ZYQd2kpGg1YlEs7lRPXyrkqYqateKAE3JVhpaFzzUKR3p2ZHBOK8x
374d0t022q4RE/QPo/XvCGSSpv3u+f3eAqBegT442JH4ZKqJG2L21S1kUg2wnrAiK0SesA8S8eic
GrHUwDOhN7HVWGKTd6w4MT6uuQ2b9ror6lzwyP6eCVr+AE+wkIZ+BwS+hklSIhxkP7G2EOyXT4h3
TJRdxM6DOh2h6ZLxj45URSK9ZMM4/Nhp8YtSbP7nEv1S2Yjya6wmW8y/nS89f1kdq2vPnjcvUKd/
h2JnKRzNlk1CkDTwhQJ9172S6M0Y6FThLblIRLnlkDKMHj9nBTALXfvzQMYskC2mwd0bSnfk/jWK
hv95e6lIxhMq7UHKldyXFmQ+sl6W3aYZvA8hcez9IQKzgHtmVHsoCXNU5B4IZkP2TAAUGTkyKO2M
6N0qzs6JkzReO9Fm/KsGwxzYTK7k0BpDjC3NoXBXIKluSkKOF91SWn7zijUwK+zgbXqac550/gtC
pqbfHHJgquZxMm0uvJImzgszFNIB+fVbPFuiQCY42aLn8hHMg8UIDlplSvcuDg8FRU6SN/HdfFVA
0Fk+8D/FXr3ge3Q+cBNCYZautj7lwcat9c74XvWEXyI0JPfnkkBx0D0USdU3wtF/iCB1ybdGXGVE
rXo6o5FJqphbmFtd0Aw+IkuQJFEWoZqJlTribgNn5jocEpGSWGVQJ6DKhW13jB6zXfZcmXdlUis6
WTNQ9yVEYI42AVwxkQfJT+CBjnCHo/rfoxTyz8K5+vWnRPuAkgsKrnkZJLam3yXMnMO4fKcclqOY
wyhOSy83hKT1aBTjiV0Dbt1nEVi6idA/HcmJyQnznDg6uXrkFQqUel55UREvhrdO/UonLPd+pVOy
hM3iXh8EtYk7r9BNd632bLR+KMT0oSOoXSS5rX9TuASPjWxldflzUW04R0YfY+PeEbo//9OnpTRe
+UF4hHdwhFhqi9RgW75w7FmvtEhYi8aAna0OwQfXpcnfBEZC1DRHKG1A6+38auVqbf52k6+CP4YL
3DW51WfsskW++UjaWklA3ajJcwWuiCPKvMcYVzjTR4xJvxSuWhjeszSSAV7rsOg+CDqN0CHKA2Kz
POtCNjNWSOOemPKsof7QfBRr8tPN+TrE2JmUihdUP75Fa4P+8Jp0pf/uoK9Q2okEulVroL/Bfx2u
aLERkhadyVgNhrRJku3i4KYeqicwx5gZjjAYts+3CT0/95nvvQ5PajZfsnf1FQkRm62o7zpMcybw
V6E0KJyk4EYe5IhQ2P1qce5t4vj6mcLxqQdpGqk+1yzGtRF6+0gBcQXU/dNNj6YL1aARaaM4vdYW
Ql3CZmHd+Qd0TO5rj0h3eOpInrTcXVmS93FHReMTMUdxhSwV9Iuso6JkhmuClI2CHoaMV9ONYGkC
/dLRXTxI/ExRQ4AAJk3O3Q5DFj8azuueJvSuzMsZjKqz6ajDd0VKtlpoIc1QR5WO1h4hXd/HPhRr
XPBtXtNjNgL1Z4DO9AEvuJJQDISJ2jj+O3ti7wsY+r0v0ixVJxZbB6T6afVcbyoXwBpqAmmPkZl6
IklAqkVOMAQ54jECjgol9WnFrGD20yaAfjLveNtC3JjdGLhdaePVfIN2Vi/vIimWHbT4OzQrzh+C
xH3R9IafXHR3CDs1QtaSxqBtewE7kWS02OzFbcMjzVlpUe5yYW1SgZLPNv4bD+OuubE8Thg982VR
d34I64QAPSEAAA/uQZrGSeEPJlMCCP/+tSqAAG8pL6gBMtrM7fGlfUr4rQkeesW/KZu53q9ywKSM
CghMLjjmmCtNnSdwEaGLt2QL0tbb/15Wk7/fcrC9KqkuSkP6Pf5J3xc/ZERzYH1QPjjYdKwCvnk9
x73YLhzzeWYiHnCQJm8a7Qz3/vep6yw1YFAP9eohEWNOcsar+FHQL45qSrOK53tNycwML+imKGwG
wCz5gjTSHNDxTL3Dk5YTpv4QJy4j6PUWg4DRoZ6ExlvI4TwOXFFHZ1hiJocAaaSEzzRyIt+MWzgz
azzC+FR9E+vybBqMfL4hCjplp5S3hlDn8ucOu6y66stCko7TazutV9EZx/LB2TzLUJrGP9vSZ4XR
qUypSsi/GMv3YzdyEBqIkHzblTDvy0alGLAMeKtx/Bj6RqGgt0ay0JHy3eTnDyi/164mQ7MUadrn
1rmTC/w5GqiqHEFsFWrUFYRVbL5BS6CJ+df5Eh6WNCjUfTYGgqCWXSkwF7f7Mi0GwMsxNuwcUWRU
+fM/jeQKD59A5TA7QKGfVULEHlDVTnb03yCvZnoB3MViqHlwuX32mShPIELB5qdnjVJmmLnTvKC2
du57Sekj+7PDt5iteZe4XRtHlwO+nu5NVJgJKzdE9i5e/1ohB8nDjuujy8P3T5LN8IB8sEd7BfAp
v1yhBTcTJ/ZeeMrEnEFPtmLZ7H3PYYnfYxc3KWEfE3CduvhY8RiMSCrT2RwQKPXiqYDh51sFoh0F
5beih8TNlWZHsQXYHerKdUuycCkmyD0O9UCnkbUz4XpPjMoOZ75JG4V8vpWgkjc8eqXBA8nKV9C8
eFNqW4uPv2ZmY++/Qvs3YWZi/BLGR34rYstg1ev61tFG2fISK1wnj2vDNdAR2UDTqTE5wQt63UMT
CbjMKT/WhZn0YRcnGFuSi0iinvOGbabaMBhnJvOmEk3FcInjaRrZueyVCzjdkW961HBOjFIjX0Qq
hc17l79DfRrgAV08+cD2BQaLGX7zH6O5nRrcZpJ1rn1tVylzECAQ2yJ/R4rZlOolAy/ysyF1llO5
1Km8tvWA8upGLgcjFlw+0KiRr4/oLF03ECI/QoBCkecg2l+DNgPmrrolX2rJbCHoFhelgzmTEoWy
Qd7khL2yMZOavftQqTpXcMXeOvRKvj4R+8OI1Z8yMSO/vzJij/WQ2gYkWT7boLN4QKtru5KeYdjf
LvNxinCzdwQe87Myb695B4mAdR/8mXime1ZjfO33DM+zeuQ4h+3D3c6E0GEA9fWjDEdk2VMmc8yP
EUCBg2shVs+5B5VMbUG43/O4JMK8t2YesT/3OAz0ZQO5GXVFO1xRiVtFyVMg9e+Lnw+AnrdKfQiS
oCMdRIxeysdHY39EzztnbzYkwS+D2/3Ej6NAt1IZsmQPTUT6A62Ao5YoSciqmHljc8/Iy8I48hRY
dUqfTAHB9iS6HlfjsKj2/tiMEUv49n//Xe68llU239Tn9CSTB/FYSuY8v+ule3SYtsXPIEeyYnu7
uu+uvkWJsSkd5ScJjzHKCII7V2q/X6r6Y6UAFn8b8Y1fDpEeqPifbDVIp0m5Fm8xTIqe2jNsu4gO
sHjV1FggX0MZqA0zw11X8q7z3kaBhOJst3HHiWprQu8ewOjatqFUeRW300oHVRJDPRkVPvhL2VpK
/pRi7ODSh4fdjoGBdAky8GlBwu4TmJgLo/GfkyumYHRyEDSUGglBtIlvLmT+GyUBPdPnXNeDKehS
TZfs5Exg/WZnwjCaiL83zo24pNEQHUxJHuSxVokjf16Hz+lE644X6CW5d+W+zwHJm2dCaQzv2n6U
WbKbmOsuDnV0AGndWMBYc5h4vSyXbe1XL7Z+SIgCp30PEoIrZKVeb1Vy6zjT0PWHWREoqeWWwFxR
CXl1Et0xfMnfowVn52BMqujQwpwA3aJoVCuUQu2QwVu1Er3JsH2PmOY2lXe8sjK5H14P0igWMbxF
Rh/dValw0ZQOC1IdKg6Zu/RtwJYeclQw3C2bDeJP9FLSTM2vpdY3ZM3uJxEDvX8QevsVmtM5uCpb
RdOtzTMgZjqI9+LEB8OKbeCijxtfwlC07NRuIFljl8ap9AHEMG8b3IH0bX+2cGjQTZlQd5JgmofA
Bt06jLN3yZn8eaWKurikV2+ikewJMTAnETndh0zRrDgJTY1R0xjRgAbB77Qo03c+B0OelV6YzGMN
zjHpu7KKLweSdtIEbFz6POCMss/tnEihaQaVGhnYQfZRo5vG9vezt0y3QX9iTbvLRclUh0IBRPvR
S7tq+wZXUciZRG+iVwa6mqMt8oD/9yMQjVADc+dLdfqcZmjNxKiTFNGmmraZPzZ7ftz5YJfglHBO
AbznJJV2z0WhB4EWpipCaxKMXAyJwMvCWdkgQJyraH6ct3o9r9UOvnZFSr2EZBMBz3FPDUhz62ax
En6lBhnLqWkoUDz2HH0yuEZpnkZk9kLS18SYkcsOSB/qCZhNKECjqw9k47+dSq0F3In1nXfkUPeI
ThDljWQuvDSsiHlyeGgxgmJGA7Lh8gIeWjPksRZV5Nm21284Vc1BVvbHE2RGQl+70m3L0QGr2Gqr
ONyGYAyos9D/M3o8BjknW2bQl97NI0TA9HNzLLHei3CMTxBpb4I/U7CQyndil+UnXnHNfyMKMpgA
HO3KsoXN+YoaLfwNNVVhjB5oiZv1asj+Q8vU/4vrWzlK/RXPujxOUPFBvyfZaXTxXfAHlg/Hc/G7
wXcEWJAWemlTvvuiACFWuR3K2GyKzglmu6xEhJoPLD2jd8zHhDbXtjqyGcoOKC6N2Jl+5Gsg71vl
mZ7JDBYkeddmtiZpAOnquy0QeQ33IOt450/wq7kuq+hpqdxDXBwTvBsIyPsGTbNvbEijeGGObvu0
nv9Nb7K26Cx64Rq0f6W5epFSHZUZxOgyjJEYT5cEh22J/Fk3pXuj4M/q2huM03LrRAHaOYc2+w7I
UGNaTWfe0I0qixkody8RAryLc8bhCmqhsjJ+8y6CxqN3mRXyMXULX3McftcIW7Qb2yx1A98jPx+s
pPOL7IDNRZPV50W9hgDoyU1MHG8RFhcVqpL/eTbv84VVoRM5V8r+Gby5oB43oU5CslY8qGqGpL2a
BiHEDIQX9GmZgF9sGCOzvdh188StEuwx136uzPsZuBys+szrp0UA8SaOhCt4OxVu86nBciRJsNPp
e3y+hTn29y9V9flP0A713Ep4p8VQr1q/vbSjJE1pAhz9q0Nd600CJmYOAPL2tsLpNrFJq00mY5GQ
Fnmjm6xXCt8suJ9RosIprPD7PIoGKOz7qNFbcltew4RqHuqNST/sSgX5LRyytr4314mGU6f1vE1e
wkcD7qXOG0ezy9MbBvvrTkSPSu9HV0EVFSlObMqRiKHl2oJuxAn5b1fBilz8X4btKhjEk8IuXxS3
3zSVLKAwUpMhtnvkFCmtUBFO72XoFJmUG8bXBCbcd4t9BuxogWGRtaedWAZFG553CmvIKJyo8+jD
1PzZP8HnRpFOD8jXc3m14bfG4JKRYvd1ZpiPXcYLNVvV1WCYuT1DHJml5Mu/lPzY3kC4Kas2Xsmj
l22NqjTp4JUBRfSbEfjG9qbpf5HxfF7AaUS5/dgCroODjMsSoJLIzi9tMJ/aruXcIENJ3ItCaDqK
d8q1Eza5vmni67WeZoFuBsfCBDCUzDKTw9OpMYyvXM0fkX42j9UbC0Slq/EBedFdTmw/EY7OdUHl
ncm8BdcmzeugnFU83SfWD5uCiiiXxjl1uEXKvX7cem577ijGazmyG7+cDReI1Mne6t7DxyYncrv3
8uxA03HS4F6NO9Vs1gTWqXpU/nGM7H/KYx3922D16NQoNrryCHxwUd0I40qY16CtKWBLdJmV2LET
PKGKfSdi47qA/bWJTfg/BzXbAwOBZ7hWE7GKuoW9lFldxq4X2z2VVfuoslq8yLKwOmcNY14ubolP
7sCb2cbImjiCMXFQpyyeQEseFKscFKRy8ZXbcQqNNpnpBP7Z8zaAEklyp0WNMHqU0oLkuZxJBaC4
1jo6aaPMygSBKBaOWKy3VM1/z2KbLvKdnrHK6xyeMEuGkunrXzocg9OYbTZXP6igjO5KLW4eOUez
GHuJ/JiAAOKTuCgrtnOQe+oHhAgCWjcv04AxVlGuThLkejb6h/3e5IAlf5GS0DQsDb20MhW+T8Jj
xoOcejNb3zByE9vmg1gFgZ+ElRGHzPKc//qyMUIkXUOIKjtUSHAZYQam32odLfLclccIKsaIns9s
Bkszb2j5L6ixK2egIAr9ZrATfjDpTcV7TkpOZBqTTESPo5GlH15GdoibQ7yBLmSw89Bj/D5VZaj8
4HtQAWbRCLby4rUzaE//9hMqBsVqWVRRsTfY0CXvb4K05A/fa9suc4PN3B6iuBJ8nWh9XLsW1wmG
FZ8CfK1r6Rts8ar8PWB7SJ4EXor8WnJarybWcc8yg7Imp2c7g3zRfUq2ztjwjIh3LMD/F6KAA4/R
RJyY3SwgHDHyVhkrAKF+DF/bWSaVXvNss23vm5ByQ2uRdbr9IuvbRsxnRtC/QZrPyv/Vf962VDgg
1fG0t3bbUmugrVi5HsvhycbqF9vvFgt7prhsB8Xm0dHQfYIiMefSw/d2NbrtrwpFUkWNwddPHP+I
2hkA4JnsKCirMwed/p5GZgInAOiuciPMdVt+FBmHFA+Ue8wNnqDyxrXuqwbdwoN36LiKNvK9UJk5
vUSNXtmbZoBQpEvkQCKmGfuf1+7dkkS3c/l3njIsFQ5QzkE8eVZQXtlAZpNXGPN9YFgCfavP1g1p
6Z94MQgwBfaOLFHrvEo1uNn+XyI9HOmXts0iaMmRS/ksXJregms/hJ1XUK5lXucFsKjWqEM/hXds
95tAUq2nWdGJnETlklkQQSjXoiOoXxwYW0+EEU+cLhPxCsR4GvTTFnPOUUg2eJntBpJ3XufyLIGw
+GaIyIIzbQV+mkrWU78tmQSWDz7ak1OcJGXCYcf+2/dBDU9ZesC0qk/5M7rMKrHWQfkuJBg64b5z
o6dTIakOs+jq3i5OTxf1T2ZV87n0hsxylDXQ/AtMZfRU3EY9FoMKrSF5Dn2hgxqGORxMzCxN/H9H
VPMwgcY0tz8OFm3wih/ESIVxPnN8Fw9lXg0agXErJTE175FntON+UoZxk6bBKed7XNtBgeCYSoFb
Lzfi9oy23R8LsPLJAYWkEd6uElMcN7xrrrNgZNMoYvBbaieA/go+9JkqhS6vvXlbnyxdYrRiRGub
KBbF8GTMpQxYBMl1eR/KTR8Rg1tdpDVUvTRDzFM+p8RJ9IrOt2Bd/LTqqpFCKVOtEPra56AMAqMK
tJqhp5mrrOf7BUXD+Pp6bjN5Huw0Mf0rZgNtU0Kb0zwF5qqeuU+hhqAxTJSkX2nxFnrJP+oxJ6Kg
XcUenGVMHpkXix5dOBMiTR/p/RL0V38CEKSt0P25XqE5LHcowUORu4AD5wAADs5BmudJ4Q8mUwII
//61KoAAbyaMPKj0ACDBFg3jbh53HN2JexHo59jsvx/Xg6ByS7BVM5BNzzPXD1Qu9yhbDutMI1Yg
yofWmUKwKEE8eKfWeuvNWx0UKphHhBZg4LPKGN/bJovMyLT0FmueB96Qg17i8R+NMCYT5f/MqnSA
JiukcwndwQJjiuaRP8qOdfGjV66bxl/TYgPxz7bl0WDon8jHnGzrkpnwA6vT3lCvj1c+rMwY4J3O
UgY9oSm8fM/a4p2/AwF9n4s5b7oHT9H4POJ5nSEtmv3FtscusjF+Z2DSMXGhsau3fPJ9kexgFrC6
JrhaB2NcSysH4qrU3HjoxJlQiL/TZGG5nXIMBGylT8JWD49RrSM1mLGLXNTjtS3oQfH5a94QPX+z
iESaqBE8X1WmCvOaMm070eI5PTLjPhh3QlseHXvcVW7kcmikJxO3aCiXfnXga8M01saixgKz6bnE
qbaGveG/VmmmeTqcban4DnCXxH6ZZtmtUbrAECP6lQSFLq+VuqTUy8lvujZb/oBN6tIWk32wPns+
ALMOJ7tDyOI8jukVuXCPJkcdO+/hLVQN5P7+e/oaJSr0lXvh3jwFKAOQauZZlKnkkorSTNBiqq+7
0/uGWQuEDq5iduJGTLPhut6k/R/8bpoWbZDCSw1yAsd6MzoiW+pXlSJE1560Xe7sjPITVb8U4zI4
+GtJPBaj2JCX9eJaxF7iy2fklivKsjKFO43lKm3QUkv/9hik1LGkMHfJ4ew0XyIWgEMMjeCnTu9C
1ssGg+s/5RAu163urndAgXq2gxR+Z2GQ2HzTcpoBA9bI/4OlLj3WETGtUs/IsYR0c0M6k9zr2EB2
jOVwBWI0negADVVANlcLgGR/9c961mhQlQbh9kPcBZ/jop9qs2dN83f7kkucW+3jxNOke7CSkOVJ
2kFTFE1Vsnt0PMCzbzsZcxcdFkdEsiUO9wJJrPQ3e+XppAYZIwxKlPDpxGz7OXX8dA6t/N8Mlt23
sgG/e7PQizjfK+mnIN2rRTbRFi0EdYjBupjOcOiAn7svGOfQZDA6YYXepI6XTgDHPy4eTL1YSlzw
m8ZZwSGwXDCj10iaU/clOt5JmTtMhvLJ9OGNs1fopYj6oZLdBT8MrPiQwKVhJtP+mvQ8K0qdN23z
DDV7w2wa/GphiaHS9LBCeXqlrRT/77PdYdlA9GVFqfdLR+jvSpYgBWEWXG7NciMBThjsPg/O2Xh6
0zLnY2nqeuqMFRabVLziGV4pIoyn8VnmlQW7uNsbqv76+9I+kxFeDLqQCUqky7w4n2zziGhkP3WM
RCNGsa25IncOl+aa7OAxgD6D3hnGorxJpVUfHSGZzn/O+77Wbt79FdLC+DTCqxUc3wgK0leddg6q
bdUfgaUaFdU6oRlLNQ/2fw1SVmIKfR6SoUcsbhQBjxw+Wh7cXjdaDKBbPuWk7Y/1OOCkADIRfCSp
BO+2sfSyYsozYeVECGfDJzO/w+prYJL6YXGdYl6VuS5FPUWanMkwr+5PP4kW95IXFIXxzjZXCWZ9
IdCFzo2bM33SZXTfPfloPmuXs8KR4OH0dcaM2YEA8wGgeougkqo+bNaEIAdD6oIj1jYfH5rP07sb
4VIL9XZ8P7g1rWdHnhmjL/9scvVUkb7WTGH6H0O6B4qtmgHUQqYReBXraNZpht19z6SAqDTCr2ap
H0kw7U3Gco13Y+CLhn0QhGuOlnJznApNmONSC6soM0B7N1VgGXUnWOnwpZ1z7T9l1OgdzmqBEGNv
O5ReybyAr8fREFZQuINRN9/W0hqPUPdVwb1DgtYL75TD5gEf3F+8NpM9kRxi94W132z4kYYI4AN/
GHPpHhC6h/Zz6jJZhVfaV01o9zSoWmbzz4FX0967O2ItNJlq8jDy9rZLXPqYYCMg5X5QrAOe/eg1
ma7jI/+g7wEbXWHglr/9pQkKxZpvc23C4SS7Q5E3BpZtOhoypcCBhZedqYHpY58Bz452Q30Nh/1P
dz0LlCpgjw8xaOKg45vmjPi51yeMelVMOcuUGBU6JXaxn/puBh7nZv18rgwBtzXvxHSQtGXHzkX1
zIsN7qhgw3CEQXO5vt1nT1lzEKkg0TKbp8oSU6hYMaVwqnRcLZZ9yiYXhPva+mJZSj1BRdxtzffE
xwcvz2ymysApZroCldOjWckFMl0Y86jVm07qQBHsn/Z7CVFtzM5iBd2rlz4pYDzesBU7jAUIuGqn
JmcAKVvadfguHivN/YYrWR24Ua3xyeA3XCggo7OBJ/DPZ5s1HKuqjy+xhbIGmwpfnTXzUoyDS2O8
08bZFFwmPD8krdeHZDymkFMXNg+x/x5eQUFZWS6ct0RShJKRue2thOH44kg+ffquXexFzl+uSo5y
3lKYz5+Y2JJAYKik66/9ECYa+VCj0iIWQSdRyCSmrm93fqC9jEJsFtrHCiMKVmsb829ZEFbpJona
3xfvzkMv2dOI23Kb7htlOan9H+UH3Bj5/8MwGEHA2JvDVNxEe1rm8LYXuuhi+9kLFxWZDNqsoYy+
lZTLBH5yFgLYmd91wdtdndYoCs4W0MhYtHPcZx70xt6hq913D6mPq7Pof+vD+F+Zz299ogTQWLvY
bSHc2pmEG0mQI88uJoMnaBlIIBruFiXl1C21whnd+ICw0YppULCVEthePP1eqJ1WhOSW6JJbzWuQ
kCuW3U7TcPSJkSLSYmiNhMlA+Vv2gU7GMtYCkWkMOp9sj2Uk13EdQ+bhG1pLxpW1TV0Dp6VoEO7n
ljtjTnuXoHwSE9686ZGj6FCrWsaEUEMLdoso80+JtLEss3I5nLSRjjk+rW1Ru1oSKxh2bBrCXY0/
aBl7XlDxNBWrX3/NZJL90/gKHqyr9n0ZcnJgkjEgmc7reigKdGo/Bc0YK0MUa1Xg2LDz3GNrEg/o
ciXO1smb3Si9WcO9KY4TSjR8+SeGNRZgAm13J3Xc9Ai/fQTwYjlF9jWzsJo/YWlKINuUClv/AKx7
NyOyw2w1U+Tbkfp+JfWIOPujKI6sgbmyRUaDmplft4bnj6jHzFV0ghAnVYAzxPtN40PXqlCOy49B
TJ1wE5sMOlxrctxzAk/4dG754YLo8ICEEzP+vPaq+zuls/PzuS5p+bhYUXl/Yq+lNopHfdrXSKLu
4l3qpkVVOv15p7pOPf794uotgL/kSniHqs+ZKSPiuVfjhOv0sppRNHEaVnrsfk8Byw3DFcHntjAO
D7TADlegmuqL+HTzpkcx2QO0roRuvs7ME07HjOWGF4nGZdNN52KzthyhHkmU9IfQw45YTckJCvxw
UVdSIwrOmdez9weBIW3kZUkcFao2I/FN7rd77UxOp3RQP6m7c8ZaPEk0F29xr+QDSEGqfGm/YZcB
8jZoGqkVmDub/kuEhhHsAkRpIsDDfS4Z0+Js6LaDLVHMRs23n6lYWkWwSCacFGEe7G39RwtEbgVV
xDl6op3kGzeoOja7vu0nFEopCTnjY7ARlX3a8P4+1AsIJk39kAvTfWQRcYNgUIeRg38GvwG8Rrav
Q9ISgzp+jV6WtObfWSTEhAwF27seqLpU+2VlXzlgAFS7qwuJEBwm8fzWMLYoZA+LoVPJP4RDVHpn
2ja0eBJNvEO307a/bS25S27Xo4zYs4+d4uNmfKBW6c1I7fsvmAlnPwz3w1s3zn81HGpY1Ive3yZz
s1Frlatn/qOSQ2lk/JFu47fALXlAm0hJyNXhTz/ppWeDXwJm7g5OKkHmd49akzmpvbaeEBDqewrB
QQhCWDHv9XAFbvm2sVPrjoPvz240IsQwk3TGodUhGlhxkPGDZBbE0KarYxWnfmPGe/5+X3dJ7cyi
5iuqmfmmqqr1LD7Uv7lq1Ya+L6vna9HvdegFYPvKuac7QJzPZRXvolK44LrPvLcxNw5XTSGM72Mp
hvF6Ouq75r1oYl6ylGnZCli6wEHhca2T3ePpxP5/CyIm94UN9mfXuqCvuN/UDAHbHvTQHj2fOjOf
uNtKPDQ0QffVC4UMYtRxv4s+p1AjUuOcKZryCJwZr/Pwy9me47EkXfarlFKc+gkC/DMGB9wCCGa2
H2enkApBC13P00wwMJ/BcRaNmb0wfnkjJ9y/gI2CtdPaxbmQ/CxwNLRNrtQF/UofdIklXmm3gtee
qqZR/1NP4iELRcl63nU19r/80pT82ThH/LydUwOAbNfBOG72bkSbyGgwDWdRZsilp92c9hviRuBE
GAaMYG3hWjf9TLnfUrG8cS33KsXilXXMYhJC9pDi5+mGPAJR1xpmWSnDz7SSgTWvExR1cjMLF+qM
mmgTGWdrSBY+FpVnWU9a2Ap1fwHC7m+TAiAr0HzogPBGH7yZ0LzAsGzw+1W5dmwaI5P6aETfrjIQ
vW0twc2qx4/VNtOOk/7aWyvlBQoAW06gYUZUvrR9raKB60e67naa83tUGp9vyUTqMwQRzjnQE2Pi
lS/z4RQx4ijw6RIdfiorIQeR4W/uKK2LKPFF54T6mau8Kbw7cgHHW5PMIOvGHuB+/tVtm2QFQACk
op2b2+B5HGmRAM/i5Z0Lu2bWhYM9cW1ev8Jzez0iw4tqfZOYeNmHlaDNSXyDBk7vMKxwYYKPSCkR
VhH8Y/vwaoR5CpPAET/AW4iFsLrqX798k+9wn57+4SGu5JEMK8pkFs4A46ulLPdeCh7zY1rYtvd6
tFg0HlXhZi1WOF9m/fVQbOsZ6hRP93F2buMNWRyS+yKWhxXuJnlqis/2uuemNYe8vH3DstPbjuQt
W6VfhsXnTzxkmjTEgieZzY0aPMVFOSZMBaryiSUNZaBRlMYUndJED2dlSjHMKgxlRyCzewuoNWk2
sAVQ1H/BvoiFKVUXghhlQ0JQcrckGVfbCwHwlHTXuF30FmzNWuANC2SXebKa7OFVGpYFa5Ivqf/4
CgQdbsWq3PtWzxGTIo+rwzdq4ABHaeZxQh1p0t2wSWXx4hgD2GD/mEjQSpWSRYdewWuXX//lCHDS
GYnw0ut0aZVt7OWNiIXZvRWTYA6LfEaMn6QLYOZfAtxlHegBOKle93vLqilQxKq6cG/YF3zF4OAF
e9bs7Gu53HoiXZyzfmPcUAGLAAAPPkGbCEnhDyZTAgj//rUqgABvNh1ACaRc3jf7D/BaSxfvQ3/X
ZJp3C5yJM0ZILj1AZLer+YLHWB3jnmFSBHdbZmBm2cwKZG0aBT+YTlluYMknKv6x0RnAKMbg051d
FP/s8YIcbgC36fbNXVl9JG3qN/HfLIBJ3lETkVxjA3aSShJIxHJdBW3bZnds1qCEpOghfcOEAcd5
dr7fGSRkyftIc+iyS+Vhr1NWxzp5CIV7h4/9ix9/zd0ZCWyDx3Ke9C5uZoJC6bStrgzIaEvkQwYv
FVEPAbAd43vI+FY7jCcngRcDyFyQ8hycvhC6qDGCSVci3/je4xHvteI4OQEaybrhWgUleb2UXow2
tTPKqvvdwrNIHJO2Vn6DyplqrXp0j+J6Ie4YzWn7g1HFaU22Gyum1gAui7yEN0uAM0ud+MEbeVhy
o3yzZ18ndulMy+CcUSeyoknxP7eamkwYIxEAz+tc7xkZAl9vYZOA92Y5M9TG/JI3iGJYFT3NvcUg
kuEEPMecRRqQJVaO5cMvHScEcLwzki1B+uTjz+EEIWS0ZUFFQjvoRm5uTe48euZLSG4sJl32P/Rw
PWcukeC3Pqjh0CV/0tjQld11uC1I6jz4ihqJOZMtqpNU1HNE2OrwIIs8+3xwqUR+42tYetzE2g4N
XOeMbYTvXmj2qGukKM7bZFtkPwdWzf0QURS3ORoJOQWffaaKcyTt1cXRZ/IdaT8k9K8CLeNyxqWZ
syd/ZwQ6HMbyrRhj23HW57n9BwvvpTTTk5CaHePZ6gWqM6CUYbbOT4QM9LN7Bodi/6XhS4pDLksD
vYWdS46uB7jJn9GBczF01p5lEaPelgADMsRKN11RJW5zy8D2TxrQsRB0HNKEoCjpnh8p3HWul+YW
5lk1Dfr9G7Hs5zUF/QPcpWcAdVAqHBqb08dEfvHrdyWVZkH9r6EE3YJaRG2TGC+D5y7QZJUw0NjC
ML6gohe0pv2HIHJWm8mmxeqR3P9t/cZAPgIxJQAP1uN+ffsNH9KM9lbUXPZi98hzLmyMSaq/+kvm
mqPhUfzKpnOIua5HoK5Sy8dNJOW/IPDBWwcs7sKQsOLDpUBWImYzonh1V3atGleIpXH2lweBpEGk
dwihS5RZDwiJ0Ik2Y0L1iNRUeMZNg1wZ0i9KniVCMJZQLds30imA0MlIm3DFUZaS1WLlZSVFAk/V
Ek7vNRAZhagV6wNmMKLzPBG0Ie0ITyjJdk2E6ARBHaLoJId9MK3/iH7Ids1Q84BMC2gEFCrEBpjT
On3FpPmjBVejonubAr4AJiqBQWCJedTIhd0KsoP3qpuAacbpqqOUZZ8GY7JVxizq26s4s94f1Iam
H7J11IehD77Zj2r5a0VSejbQXI8DxSmoPjsk/FL9XaycIBk+2lK9O2ZlN+PcHdgsEpLmiNXYMS5C
VCtf5GfH+wzCHGekg6uURJLPBhXkT030DaO0/BzleoFiyAGbIfiXDE7S59YD9XFbGZe7d5wHltNL
2lpxbyWmAYtwISCvzTxbD1NQv5h957+zejU/ntYUe4ilHSqHwTIEgTDBYMcm06GrAQmCETjiD6Di
GqwWF4pnIilcHnwTyil7PzEZ+PdzM5AM239y2ezYSzG7AA0WXPHT0q0Csm5NjO41hM1fCsYYbPCH
drc76cPpIhF0y84LqMyeDG44dhNzbXJx/hA/jDxn+WA6YPnwkQsSbGCmPKQgqDKen7lNphqRq54y
Di/QrtGoXpIlwWp0OWD9GlsfRv8FPSrm+/MkPL3prGxK0KAdQ5zyBesCTOGuLFJYuf4Tsx+KNLIh
PZuKapso2Y1pJTCnwsV73M+DJz4+yoOjib39v2K2V1ecBN1ZW/jBm4CPMufLe/7bHoysXnBNhato
buzK/pjV6OsYnV9GnhuHkNEOh050xAnyfFzM0k6Uf3kbevz/llpqpvFpXKShO9p0X0aRk91gYXkN
tM+24feCHNxYuUay2kShBRiqOdTDdjOJuhyK0OGhxIAyMXlswH0LK61izjR6y2cgALQJ+aouXEs+
5/cDiORl1PVqtovgAtUMxNzk6umG10gvQ5HusTs/aI/SihjbCdofK3wjjHRy/ybSWZwiFkzhfw9Z
E04hvvr45Actmp87XPV0O538XXM8pWTD1G1wGCWMows8Ljmzln9RtZ9Uo5lbRCP56rnnEE60qKbY
Tx/kQcpxDd9PZBXFKu8+T2645AFrmkPq7g1OzlVtvJEdu1fXGfTxtQCdmOal5hXWZA25O8K5zyRW
BglTuyftVBI+JBVV4qtkHag1Rrv43F0c12PeoyqaO4oDu/nPDO7YtNVDijKoCsPlLT1Hf8XTyvSh
i7cIzWC12QKD9onEwJFbTICGVyRpC6wLOyYwBAIv4ZqOYRBKby2YhunW/cWQ+3Xr18Wfxvjx+dRr
bKUKMXD+zmggSpJ99zboiYb8aXslmZwetJKuvJgvdyxxY8xsobr0ZvKm0sJFdBvUIeuWWwNUSIpQ
Q2qePMGrw4+//8RbPC7ZfJFoTrde4q8Y9tRFoNhTTIATXPjOXdE7UVYn4scJrzhPTETtT1/xN2IO
TZmDQ6rWJkRPXhswBDqONdFsuQpWOdIC8Y3bCSMGozhrbisJ9xlr9eo3GPJPgOd5EG7/e5FbWzK9
DvYCKPm5gFom+gkYf/9Rrvf0A9Khm8VwFW/ypBTWRyt7YSeKN+Yo91GxYDWjfiv5Ij8hqXLGz5Wz
B1OIFQ9Nac64mbIAp3gjJ+E7H7O5mhsi2KQnjo3z0/nUdjSIm2nyExuC+HNuG+s+xOo4YiN3D+WA
GeoydffVP0vMKVn0s+tf/ooI2iVaRgSQAF05Lth7QRkpYkaJXqQkKOjnurq3stjmUc/SmeY7YIQj
h1rzHeniyu+QAQ83hsOgE2evFoUMtxw2h5fwjvKVHM5XjB+OFr1vsMR28jqvwc8L3hvv7u32ep8a
2+kUya7YSJu9vUJnNiUUzzz0I2DyY+clmr395/+0VqwdmT0iYBquBtbF/meDPmKwWlzJ6mR7LvqY
uiHI3Oa8nOPsxGa7dyznSLNGaXiUTvEktadx/GLo3b9YmLUtrTVrkijgE8A+CnLY4VOYwgRTrfYG
YII1IzVFbWZwcpxBhsRPJLj9xyCwH2gc9DhY8EY07ilMM0DJbGWOpae8qGniWGz74iQEEN+reGw8
ZcU+Cf5uSUyxEFFbTr9DxjdN3OlNj7ujkLTLFqNyXG7BaR1rjZI1ZsdoIvgUQt8Wp4sugSDoKec8
8FBVfwBBG8yIWa/sPao8GYgmEQsNm1jFuza2zGANemaI0ktPtg05iZPmU42xFqLvSnIKRlHZk8Yl
9ravd1LBDY6MgbEeQD5L303VZBLmO/w5gMEKvzOmO37ZyR8snWFQS23ywpkYXJuIEaq2fIMA0UPk
Mq8djz8VH2mKu0DASCe8S828NAchRGVgSxOzMC6tz4X+90N5JnNK5/tcXz19czVQZ0F1LBAy38UC
sn59EG1FWyzMFPUGxzC8BcxTAk95cLHqe0tCBzFBxqJjKn+FBQ7VlreluqLvmENoOQ8yjdXvJ48W
6uieChSbH8x0kJw9mHUnO1ldIBM06+kicuf1gITiFlu3T+48Ng97Qj6vk0h5i2dZ6EqhFOs6S461
uMS2EzwJmXdXUw81kcaVzCXWBcZrSa/EwXgokvEIMrP0P8+iL3ngZT6NHFbbzDEGZfyqaXPGUlo7
clrqGv5UyNLUHG9dDV4a5WRqpyVb6xq0Isk1iVPdtkwv1lUCyA95YeG9LjhQC6WHqub4XfWzgpDJ
wn7aXZAoip6FhkwLRN2vdguFFIuOl0ul7mzSQOfrxCIGCSBEaytxHQzyXf8B1FeDmt7xYGul3XVz
4E7rVyKSxJHCGiLcaWfX1OcGwKkiJ5W5D0eeDmqlwkqMRrhvLMZhlW+uRfdMwJzZFssOeC6HKxEt
tXAidgxJtmSxAws1EompxeZkSKdfuC+nS/Yg7C4TsEtxItNTSmOdVm5/CQ6fp9TC1ol6Bk14GCSK
dY6iW/+pefy+iiQ5fysrFv9EASPUK686ikIKqMlpPyArmIM2TWkXJIp9l2QEPGvVEk7HbYzmt2A7
Zr1IFDnpF0mSCQmzTRsProO88wXQOihXqlVuIfrjeqEHSvsofP/UiV4x5ghGLy1Aayt6JvqbdvOh
Omju9wIAW52xWmIaobjCjMTFqcBHXuav5vOpjE+iiGXUpVi3LtVAhoifRAkDQUPl1DGsXstxBPG5
AQfTSGO7wvtjAEX2wk3XyuUBhWq54Z1fKjOesqcWmczF68bm4K6pJ1lbEbH0wptMJAUIKrN8jyxF
+ihNZHscFNcKuTnLE2Gcr0mwBTdBVHshko8haDlTXGPVs/2nVzlKaj5hLhWRbTiCstHdicZvUcuB
IfnZGcRlzsUazgQB/er/5Y4p3xdjAXvTG5GuuYPteTt9RorMiXhW6M8tJEI0M4WN88PVrGHIXZjp
SKU1OZiJwEjSupYGsTvuuWZXUFyAnaO5gWqj0aMr/GhEx55BOLxU8+ry7PquvRXJ9WW2eGsuT7T+
c2xnRMntcgOsMwHGe6EYaR0iPNfKwjRYEE0qdOxnJdF8I0T82HeDzBn9/OKggL1qiXhGh54uL/Ib
QV4xVVLrLVMTgpQv/W36Z3jTiLC+OEt1NVQAuibe4UfSDhiQCfX490SfMEZynJJvPuWvipju6ItT
n0DZUIsqyO2Fd0BMR/pPPFo2iexVharExMN+yO9TDsWlqdVXOx3/uJgQWRuF+mWncnbXz+VPTmMr
Br2qN8NdzXu+EoNXkxLtN1XnnGYtz2elzm3rs01RTOdeh/ZZr5Ph6QJGTcskRD9FVlVXjxT49yCT
fpBF7fu6BS5YD6pgNQ4BHK3HPHQcumxIw1N5zwGiscs7ZBaX+HdHWOiR/v9ebiMhvvqBqUE9Zovz
hxprI02+L1bxu+KfD2lguVzbBgN1UfG3J2bRoEJBTNPqXWDq3U4JQ/j0mzCuC8I/E0wZuSgfVx0m
UzVHqNbceEvai1bbjjK0IZpFG3Ms4OzkSPWKYVSuqQFe96mVInf3Jtkb03pJ3mkw1xsxktoI8uNT
xcXu3rQLn/fJKhWRrscpPDqke6/5yM8v9QKUibJpcRHq9NIfLN9df731n0kDoi09d/QLer94CrXu
E1s1g4S4LWBm9o9a3/B5pGPD7AbLIphK8CkHhWyEsBKQSPH/hlw8bDvaWUw4AGVAAAANUkGbKUnh
DyZTAgj//rUqgABvJpywBNDWrK4hHpTzXt+O2tcUFjkZ8fPJekJDxAdeozZ9CzPxLOkuXf/Exhiw
N33+MsFGD/+hulqvfifitLp3D+PewhMXpBQXQ24SFsUPYQMk/1PBzyESwMf669KlUMmeb8Ya16O0
1AoLLUfbcpDbm20HfjS04XeXJx9lImJ4XI0hNk3GtrZBAysVtwNR65LJPh9Xur3YnH7X6/RhzziQ
qt2unaxgcRVyafhwulrARrSyXdwdwdrlqMxpHh5VW257q0ApmTEjqzxamLX88XkANBLp8ACjKw5/
S4kJB01n42NZQbSMDLiapy9vgZ3lhLruDA2WOBf699im5GhVs/3HiTlegItDlopJZ1PVTWnAy0xI
oplPgBlZrUPygtaiP3u0Le/wUPyOAb/LLTNCkChy73Vewil3dOtPizew9AXJgcjWQfFkPmDYcN1V
xQweJVbUoQkF7RpZeV60R0vNE+nVFHQIjydxtNKck+rFUBCg60aN9zRHtmZRKqWEn2oYfpYCCYh1
QwILryRgLx+9ojw5/gqXLmTrgQM3p0U+0xwUQCzNCXgYqZGjkozdnjZyEBZklvflMRwW4wqegeFz
BXROX8qm7Y7rs8Q+q886q91T/Fae+ZHawj5YGQ5nfZWl+/W8+hLDD5EMdMt9CRrHlBrxxPpGQ3it
IgHexUHM4aiYVV9EXO7UbyH5VJAOjrtORaEREqjCB43KYyw9lmSUcNEDtxvK4TAupi6oIZNPiEYA
ERBmNa8n/EY8cAZrswjyMGPeszossnuk7uD8Ra7zJUdqC7oRMcdKK3syQ2OiM+l6KQ2Caodc9TRS
tbYGe1JgyTQV11glP7PCZp36msqwo5TVFpNuscV7XNic9LPAL8Q3nCGtLtnISw+rufBT6WMMMMta
iUfbz2J+aVsQz7ado1QzFtH0fkh4+iotIPSgCm/ZxI5okTYoEyxivdhWwsfAzB10MJWkMMICbvkg
X1ysDyT3htMbjRmnFPeuI6nOszR6NNb0PkO9Vw5z0f8EMkrLdIgSdNzZdQfOugh3JKeNth6AZ+t6
J7lEeKDNQL8yM8SpKbGhP9o1bLTMIfVUY2DaLaJvTYte9Ue6EY3/OTz9kBrXjednvHWjLCswODJD
Mkih+FXSE+uVHPP6cTMZBWZMk7KlVvQoruJ/ScpQg3bsTUmWr5fMJ+cevIXOVTfE0T33skFfHb6/
yIOGLCLzaqGAYV5oOy1Pbz8IILkZNbvDIvZVrKTbD+LRyA9XEARrHKpwt//XNYzH6PLgiqSVE8JV
f3bvh+nonH2b7UzIQnwfGhkHHlC9xm6qb4oZ/h8O0lUr5h3b7yXWlZ/xf0gJ4KhTydCX1Bk/X3mO
VdGKIpXNV9/f/6fhrBxvvrRt2fDGVcSXAnfO5hjkyRxynnlSeZxwdeRAh7wSFC02LoK2IItHaaci
D5k1lMk8fp24TbQJHyGN8aJUYVByCS3kgTrEGU3QcSKhHEJ+RkHsTmqAfiZUm4CowVusMOvjymRa
GnlovWW5+1avxIg1ZJ0Od2FAnSpV49H66HijciP8NVmOYZWoBYbrqmgVFnDGQOQbdmYc+57tBFON
xxwIbNQLACoJGsg6VemAdf10F3HQgkZ7q43Ib60Vgi4B4nYirCcZkRY/0FsLsZ/mgKxhaI6140kZ
dT2W9QzTX4+kYt+hArJi1j+L8zo2X39qcmkcK4XbOWlot3YN+3d9v2eQKeEFDSuZx9pWzy9/4gBI
Jcgc7lIdYcNAg3dr1MrX5cjXj8UwjRluqjGvMUWHoSt0K6mnvpjbQhTIAaRZWDCjJ20jYZZSJQgS
eHOmi424x6mCBdukc0pRmOQvNlBkABDQMbMDa9YZHEiVpfoCzg4P8WMzcaw8B4fT3LIdQ7WyDeTg
ceo7Sp9TtSzquRT3cv3BdQx2ZFY2bbjP1euCrtsVIBwTzyxfwxd+csG6yZniDS2//+bX2SLj0cbi
kBGP4WtM5AS9GdPOQ6Cj308LdJCk77CevMeC57hFhFPbMTLBXC/tRWVxBI5hqD6klJ6t/n3w6f3V
STykngbedh+LDkIrSDT+ab2xvXYGA/09hHHKSMfbuJ2tk/Y0QLgOPqHc1/8x85vlLM3yP+q/Nvlc
p6jAFef+56uIqsBcJ7PJ4w0eyCN4hUuBPa2jfU4VwZAJGJTbIi8MsXtaxz8X4gtaPlQjGbPwf5Nm
nM0A6raCCymSWWh2BPnHVX4GPVeHlIDWidPxXpxJlAgXee4zigmpTJc30ZATFXVQBcoSC68VE/wB
EoyiTDLHqKf7Ad1FO4uOAAU5umj6py1Ee3MN1FDS5XJz00pPiuSmL31+U4MsYAaOaoW6ah7ZqOMr
G7Rs1aC3qKeBJ7/kDuNuzGmaMOR1YUzmR1P2V9pGri/wwlNAWE54E3A88CnZDSlinwVai+Oo23Kw
4cMNmmYKW5iimqr7nCdFQGT3gk5mu8gJxIWyv+KZOeQAAK8Ftcxdbq2XPlV+uX7r3inR8SKrTnG4
ZTwqi13yh7wHf8ba6GY5YFB52Za8H116qpRNZYa/RcbGdRUXjiULTiL0EvtjaR6lod2Cx98WWFPa
RFHTv/ivuepOxgyJ5byl4coH2YMpwL0gYRCZNOdvdJii9LD5dMrmzdY5yYQglcvMW05p3hQU/AEL
pNusWQTK88afZY+HMsz/tKHGzYBQQ1yndRHHBytZAAHj9xDwfptKa0kPuMbWcHPu0hz3SSR2WdOI
OnEFeMiFhDFmLk7f4d/sXkqSAYfT2JbVod/+kzZTrsdmi+8BZUHozVL6nG6BRX18HGe/nuzy0Ywp
gdpJE4Ex7SvyQ97wGv/Dum/0TDf4CcdzXNl1zVkYGu8Ub7jWZAhZ1KMv8y55ICfMxPpIhP1RQ2jD
k/cdL757F7eE8upk7AZDRXqupIjlDBsKCHCDOXwT0zzN2FNX/i+OYs6xxCmIk9gzePrz7QN67Ds3
YIqCHrluvSqSujJyVRvmATG/EmSZzN+/AaTsU92I+FN/eRWHz9l7pqIxPAdk2jTMnECVg1gMh8Bj
IDaKFadFpKd+U6U1Om6NrkCgj+xwmWO121Cb9jvYZpkuyxHFqaBwsd2pl+J5Z/kA2jExRquC8Zm8
wWTIrhHrBx8vzttKaYAYMwXMhqVo8a/riH+ZY8rPwMMpj6iGlPqzygfIhX1jujnoYerORdzvM0Sx
baHL8woJkNaxBZjsP7pDzK0NdrXbl7eEvIUs7jgAAO0UvvaBWMM1EwdEfGl5qaAX6pBVAWBhoJKn
M7p6zpku3NmtRjURryiHXp65Mhantcje5x2bw6f2rKMZ8/6p6oW6As2Y0xaqXnvP6HjHWbpIZbky
C3z74WXTuUNKA/60SVKm4DUvAKZMlYAsvJaIPWDEifBe+5PnifHsi07QlADiC4uRFQGBwVB6GeJC
CeZQBynAA4ZYOIEgZqvUmo49IswnxX2zbG7uyeABhX+2hlnu4XymnGJIBjTHO0YD/Ov/+H69dLyL
bwtVz7/lG5W7PAXnMBrEK8yHoc/WD/KuMHkMTcemt94yV64Nt6RV/gepadbABJwm5epYKKZhFskK
q2kItS2rNnMX9r05jcQ47taAp/KaWDcC5VwH/Jc2XEZnr4g4qiZtoUhembElnlkDGR6jfxvcHqHE
33qeMU39y0G8171QL/OdnShtxo43RYFj4MaIaHtelgxvjINqW/8s0/FSbYtk3lPQlRRW/De6aXMo
80uDlnsmMnKdIHLhEGwMm+tDxHZtb6wNV/ANE3POp7+TlrdHpbUioPz4xEk6KWy8f5LdmwYRkuBp
DOQEdi8ftjU/VGyF5Gvbv/w9zRcs/UCyMOjuWeEURsl6k9LCMMy8Z8ikb8sOpD8LsjAfzhsQib7E
pmyEjzPLIomTAl7jiQEsYhhZg3x/LCvHlQTOWYQTaRFT2tHUQDNee1FXl8lSRjbADh5GV/ACP7zv
fAfXm/T29dFgRx28HfoIRhw1cqi0SFNgo86XjYwg2yIX3DcA5A97d3sKiQYPSFT1F8Y2m9SSRXH4
y4YgcWT6/hPXJ4zMHW5PiHYq3elSVCsJcoMsak6zfnqT91zw/0Wp1K7Oim05XcoNbC+o84vTFbD/
SYRKPssdgBgcB3HZJLfXjuiT9K/O9/GQsKWNt8h7iM0TQHK8+ygb43ebT5WNk90YsZWSatbNOi3U
qxTOesFfQ917Kh9Gp8eQ3xkinDMET6Czir9WXKWsJFuo5bbPv5pfkBHW8QdMW4iTf9FDW5nDxnsZ
6wNVaQbNxkG94HAbz1lBvPVXZF/NSY5M9yhTf0jBtLE+u4FwsW+4Y4J+x6Gld3ii+ie6gZtbqoCL
5capRT/XGR1jkncmSFDZkTJIBqT/O1mM/pj373BKgNgNsNslwoALZk8Z4vIX28NEJe3qJ+Kn4RkO
tmeRFpNHgcpA7S8aTXZ5MiFn5go8JBP4tqrMASERdyxi8ILUCTat708jO71EIxVq7dQ6a2yI3tZh
Rxheq2TwWWtWuQYDZtw2cwKyvwCQB4GbumILfzhX9yz5Y9Z/6FkeEAGpAAANnEGbSknhDyZTAgj/
/rUqgABvNh1ACY3N5TSGVx22o+d4obaJbvngMNcwi7K0cReJexPeo4G1FzLD+SULOhzgsY8TTfkL
E3lp+UduU5hZAxY3J0NCBM4vDaj7CirtDdpaAcw5IYiQXepoN5LEr+xpWrC68cQJ3MBuddx13X2o
VoYFgJtijG4WBy49Q5w7HrVB//oDqUeOJehAU8SSr9uQJGXsv/ovyeww7hNgw06sKnXYVawzcyXH
bMq+rE43UbLZ9RUZyCyimnbmvf2dz8CNTlI3KC9TesQJ2nI7To8NuPqqV0V4hse7MTr/vcGoVCWl
F1qDVIAmEkN3UnLR55Tdq9/tshnEBERpVv/1hep4V0vWgdOgM4QvBzSOGEVT/ZcUxCA/YQTKxj6Q
hpsnPV9k3zv4MERxms885/3c9dDdLe5vAkmbHENFnxnLMFrN/Udv/37p3CBdEAty945g9ReQA5MA
jwH5kwFpXgwc5Y+iN5fZB9yOuISBVxw92c+rDCQPiWDUAyqUCzviCxHMfUYIFrsLtmUROmRnp+6A
JMqEpuGOYlUQoBk6MKFpcrWEpK7JjXzubVBfr00XDBB0rEIkHocBSp8Lgmo0mlqhRtAQwLhcv5Jk
C6LTNq64KH+KY0WIIxT4//ykb8boSvx2bvuZmxg44D1SAIrQAxoMA+Qr2LI31MV9rVspUrmR2ZX5
9pDnk2PQfyxcPkXn13pQ+aHIvSFitLyc3JKs/WNlCHMKM3hFOo8qiBNCH0Gh3aFiefdmTWw8Br+z
AlTTztfNBL/g9GpvZcYQjgUb8qwywmxwx+xjS8xNbIm0csduhGJCEMfpwlYqy1CyGFaNH8S1UVJB
WipixvstEeQoFZJhn7+l7vYM3hG+x0ZbvymuXyGYvRum8+HaldOKlj1s8zKIOWDwyKxReQCOuR13
IKlU4L8DOjUSD2hG86jKhs63dyb2DLJ6qMi8j+w5w6xhbclHpxDKDR0PE9JVfRorXtT/ZPiRPGib
q1emrvIUVko73gfCkubhvzpsR7JxU8SXf2l1b5V/h8aM2q8tJyPkDXg0F4Hxyn3HJmszeMOalVj+
6uta6rt+CD6NmOcvNYpz6XMSVe7vDEiIQ3aUafRX5CB47mA1duaJ5c+P/ibLyR7L6fHS5bZ6Ajmb
R5XSwX8BxD2QnC8YcF4niirBM7Ppqu2PNYjDxvvbAuPV8kqOq4l9oqo1D/fgs/Pm0A/Dd1k8rFQ8
/T3u6gcRrYn8piAqSJDIHhMXFkFZqahzGrpteZzhuWtQZPFDRDZHbpOy4gRQa4wiazRqr7dqRaJI
VwFkvDsOA80gbiNKGYeCLGcKD6gqpF+IjseEMonSIZXbu0XdEm33ozqLmsDFcB9D29q3ZSJaT2Mk
0bY/VsqglVgUmCH1TV7rE6jUB6Qr4W8i6sc/CLHnV124miTnOn9KKaRbLYjChwyF7zoWpqD+DIlm
SvrDXF15SdiCsSQSGLttXAqootMFmT8Q9lHKPYbUMwOCLPTSdbX2YjVBfepT4DknWWApTjMc8mAF
qqWmhICKgvD4Qq7ie/1QzI68X94EAjFQLLrTkn+Q9hQfSvFNYVnMP/Yrnl/8+g3rw9clsiCy+2+t
K3W1LMi5nh+AoRBM5L0K2P7qykPP8bNIi2yWk30sjPg++iPo8ZF9viTOlf6R1MBuEPduoXFZIMYa
D2RG+03VBtDSLTPEj16ZoIH9vn7RdpONGculAHwKa2NwMgsUoy+eWc3bNTd6L8MkKbVMHM/CB+iO
rmIvBYS/ufquRG1HF8RreR7s7yZNPS9ZXYwO/tcoQE0TjmoWN6TMAwEx+ezPJeIRTBPVHAixFtrt
eTRzSEc83571+rF15l+izT1Jnf7KV7LWUsRwKm6CQPnyYGMZ10Jvedx9K0Hh/uO7PRjnJXxULhM9
IxWunklV7TjEgpf6tSJygPJbAeqn6px3b2Sr6UX5BWNEVZu5t48IojtULVXc8nxkgRfkTU7UOKRc
ynQrMgA34rIxt80ivxtcT1M9iORbLWdBcdetPBN9zDhaEzaob8h9G79J2z35abCUgoYfexVoDQNb
giZV+T8ev5azr08w/CPx3Cc2ljIQyZ0B083WpmJQwJzfJa/h5p4vqFHp+bVQPvgDR95SoP2RNpOa
yLs730YPnziMQ7YG6zNQm82SWuPX07KPlRLsMzJAwgSHpKSHhpBLUmdLH1+eru/oQD1Owp0x2uc5
Fto+YcAV8xWDv/ugOmhNaS8VGWSsKRBx6we4Imvfps9naY/huvo03eLqdV78S2QOIyEp50K2RHai
DzSEuZ66F10IQdliuYuYQqkwEax0JP3zLqDdEF+ZOXSlRsNEwJzOJ3jYCbmDuUHQSH0O3gHEk83x
/sQwYKhut9T44Dkpdyz1rIS1Mw9ZQVV4hesK8ncoMpya6c0IOG2Ow2BFCaB4YOwl7UrqlvMDgQBa
9KZVzCo261JOoo4+vPvYVQAQ2XbpSEfd3Fsp+wFLJGsY1B4z2WeiJr+Ch55yWrfNZ6oMDn78Uz24
IJD8XtGwXdps8rOTzfk9DZhMJK3mYGeDrAZavSwG4/j8k44FblI463BA+uyx8YvPue3Y1bUA1i/t
WimZluFF6xA21uOZhlIPN+G+E2VxucEj2hNQ2QBpTa9tKnsu7GtLeHp9exkxC/DcnuAw+S+MN+Ys
G2t9F6rCXx3sKqypYvOTeAIMJggrIHDzOb48rxJk7Kr8w9MkATRIEY5CmYW7LBIgJWOid4S7xnwS
oRO/y7JBn3sqL7C/kcy39Ul/scZ5m7YXOJhlJWN/JzxXy92hkMHSkNv2VpKHG0MUHXS4EykH4FMK
6dcMYIFHJzQ5IQVHUgC9Q3klXYG8OwyKXBm3TnhOiMtvimd7sYCSJcpOtTHxpz5CvToKs8LDoojN
9XZkwgAJ/TkHKAAAhGz8A/39XJyWphcbsn4sj/34+MUUFbshUwbvS/vECoHpKvzyG0otJ7dC3q6W
SKNPKMQ2/Q44/7ziMX76+s/Idp214iZaTUpcSvq4qbbYnKfLHphRKY3KT/AFDucKoXynhsJLPaya
oMdraRuO5uQ+DGLI6Qs3To4H/0JDltzSYgkkHx5D2TNamIh2Gl1jKcxFIO8bF5HW29lCTfqXp7BR
GjB3+9Ad//J9jA6xg6LRo/by0oqdGJnPnax+jvC8v1h4l8GJJRAT7r+kR5hRZqBk/DGqAv2BPnAu
UW+nV6hJs1KIONQox8Sb6kEBZ/sgt5jvDqiB/jCSkiSixiiED0c0QGfLRUYguS5dE0un4kB9MHZn
efuPt6KK+tOwoH8DIxVKrU3wKSfoJOciI3XjZTKeWYV/SjDF9XWapykoj9uhsirPWj5E7xSvYGBG
0r0aARRoYlBdlS2Qs2HeCS+4aW1wD2c7AXoZpzS0rSq0711f+moRdBgG3VsOFcUHfnqydfDTf0J1
NLyXhaqpNS12i62q7Kf3kGX1sa8tnpRDkHbdjYrxsNmy5wF7CFjcyoYErACgAbXIOb5I65QIW3q1
Am3hPhdtJ+3e4ohCLvc41odmknQCczFr9AGk+x4UllsQ/Jx//+x0KPnZ+7W/vKU20lwbske2xmc5
T9zf4NI1U4VBLGISnE4zm2GaItErTTEgb/znScAqr4ivd6itlzQDg6L0EHCY68nsmapFLTOE+x8+
N3njVJrqL6qCDF+WpE+PxgMo05LD9ZzDLff9vZ3kSFXH63LFQwZ/rXazaY+D19gR6IcVo4JPnYbp
cVW7BJbAIjoqs3RijFAkthi+x3Dr+NRrsZaU4+V5Hnzo7FfwgWTYQJ4qwq6vUlu3YjqvIOvNLmjA
euO9KBGquEeokzPxVvUXMm4xINQubtXrVZpcx/5Oktwmts+ZytKO83fylfrLNyqIsLTzoCeiAL27
7JuIKLCRY1x9Hjw+0oNsrQ0i+vgqPg9fu8vxMMhfo5IidvydOH9SY0fwTQvI+NmfREneNSjrtNy9
qzoMzcph1Pn75A+aNboZ4WY1IP8KDvMtnlk4WgMdNgEQA9KNCDOOLHV4s3d87gK3clcaGahOGEKK
2oXtKld99FB4a744UD9ur7Bx83aG5nhxSKTO4DWbNsHDHYILKu5EpLSa3SLRGiRVUCeHuqITj8+y
MF4tmUo1U5KrRbnIyqn4k1BOA8g/ntHc8AXkrDoRRtl7eDiKpNhTLMOyMeGItcxvPF84m/ULrGEX
9GH5UnWh9p+ZDxY+rN+pxenTwkUEvfpPBw0zYxn4OqUYQeZAwkufaaIiBFF3FYL2C7xpIAhp9iTW
473uw6MgOhI5fBNuicmhF7ITiT9jCqZiTSz1NyHeWRiLbGglFCSJUa3wMdTdgj64BcjFnE8OzqjR
+iyeCKECsmswhm8Vw1U2ZIJWboxS09N7fY0z91HC3HytYdNLGUx9PzvlrGKSeTWOWDqNRXlBszmG
0eeVRdKKz5Kx4W+8bc+yuJwy9foJ6GZNq+0h9JowBmNM9XvDA1BKZ9vhcl2XaB0nvQ9gCwIOcZ2C
dpOh9OczfKxb6Mj4KY5mmaRfRd6hgif9RtnTloxA0uoCKn+Lnyq6wwZ/JS/mZ3NZR0IIQwuILoWT
wk06a/bXoxVmKmA4lKWr5SxlruzacUs0CmwLsODgFIJRF6zhBW5wfvz0nnBcNLM6s3oAD5kAAA93
QZtrSeEPJlMCCP/+tSqAAG8pJ4/LXapUmYAJ095/PWNs8SBA/dgtaS3aD2QEArJSbK+KjLXt0D6a
1KIxfGhYRaOVwGtX6vYZU93i1l79qY2hFwi9Iz43SV49zHYgvSy7Q/jHgszNOiuqtw+nx0IuWAmf
jgDrTpNHsxGvxoBFfZtJE6dlhYxiQjmMlSyy8+yCq9S01gtL6AqAcdGEmD3zv5YhimrQcVKceBRv
F8TFfIYe352G8CXAEXQb5LHGC1TAIu8LZrfQKDLxuIciOiiYp2rjFndE4uuWTNuutEijwv/+6FBF
WinBG9O7S7QR3f+vsdDn/MDi0m7exEl6yllHQMAmhQu2h8aO7fIWNqnGsMkzLxsmzYBMz4prKGYQ
KMxP/uo8wKX0gm3FHLhftPmLB3KvihqaUE7UafnEnmLQBVJa5nwsvTRF/IplOsIsLg+UVPzDArkR
WZiTjV8JATLx18N4Cg3QOqBe2AUgNwBv3fPZ0+2Z01N8yZme9/v8+PN0a5ZWPnJNaR4KClsSVxgK
uvCg3d+o7R7GBdNQEe71YAooiXYcOC6QoSq+9fosXw64Beckfooc7G45ObL/Gmc8NT8BMpOk3mlD
cV+ngqpqaXaVCdpf4kz2d9WgO1mTzKaMKy/HbaWj5b24UnmyL5uQyv8qhdKnWKZMciG7kO7WBW1k
5JvyQfgryl/rEfCoakhpqFKNckl+0hEpuSu/UgABQHzzw+Zbim8Zvs/2BQ6d5IIOtrSlvp0K+b5q
/c39/pd+ElyjxQiI/SEXZZ0vHU4Bot6Zj2uvcDa+kVr6Ez8QJ2ebQSNsAIEGADHhreNu0POsGS6J
B/sapmdA6HomBwkchwhAlA6yrVYNv86tQ2i1F41clVOodhu3VD8hc76h7WqpoOjZoNqx1+kgwnxq
C4wiXJchKH1owwIi/jl7k/0234J9i8bIoobO6jDwpmDBcjQgWgRaPI+s3ISqGXB+mI6EU0k7ewHT
iz2sthWXnTIwwtEuzfIDbjrgU/bw8/b2CjkcQb+fHWSoGG9AI5UzETo2YLJM5slONVofUKdGUJDN
CWlGmGGPrh3wrIcBFg4M3oueYR9yEQ6CsCNjdX4YjQ6gGvgbkm3vuokKdimpgn/PcdUf24vd4uEt
Ts41YppBXWv9O8hSH/wRQJPToucYZoE9UtCThfIGwotH3qx4nJy2WQQ4t8PB7mDKcOeA3LFA+Rt2
fcTlRY7ovBT4AQxycv/cYr7vIQhbVIobWVoUtB9OOpN0S79yt6VISx/G059EMHPKunQx7gqZU2PM
7a1r0IlWs+mSG1dMi3AQBfwBlGFfCE9zrHqKYnk/2v/xwDbaFHzv2yhKHN4IBE+FrfMQBmsrGDnZ
W7sdfl7nSbQwN8WP6LtEb+gkd6SSwkSvwFMZUwqF9GEFpk7FVTOwULXLAXvQb6C/w/v8Y/dCysJX
OFI4FLUCt5azCJ69fFoXt5J8apYIOxME/kaq9OZMl1KxBBbEY3EyZ7stG3BDtTaqJsGgTI2WELMq
uNVt1JHS3CoKW6RUUWIpCQb51OVxOQYGvr0ftrrZmJgI6buFGSdukpwjpTjZsN/tTJRidsK6LfEe
8dAH7zenOIeVltCK/LK1DDmy3mn5NeOY3hgj5OXgDJfjZPZJO1x8iggCc7tIPhQZRWhsGdUHzCZv
kglQQGgdOi8R22ItV2FrgUZqfHL5Z82UzpwXfoyw7TrkIt3iT6QQoZk3eykmRTHF7bxTZVwOBA5V
z9O6ALvz1MYkDwSia5/dQfKZkfoXUl3ulTp/1Z4EyuVGNmD5Wimopd/bwPHTgNCYS5kOVY0nOYMz
CZqtQSDE3+5WvIr04c8oVAGB1HhWhsWwrzMe+8kuRhVZLdKyNqmm8Jx5NXc8qubqnAwhWmdtZQ+c
86+uWn5RrUHiNb7P/BMWvAs25d8uSNf0cNUmyEmFXR6xvuD4MeDPha8fSivLjDtBArLhe3ChyWGX
6iqZf5ZJQ6HI//w1dK50mMp1049LMpL8lLpCT+CYAbglzSCkC1HAqyI92elDM4FyI6UTOzz4Ple8
rIgGaDHaUgiLuPrz1X3RE9co5qPSmTuMYU4V2pj2IGhRA4U1M1YTLz3Gn+LHjIqfWzUVV9euhrDd
PXCK25/JDP5gIuR05cQTTWqLPFuKXqWX4cMzDuOsxqAE2twx68CgYCY+Yemj32VdhwsKxdr2btma
pAb2s47IwObJAJ/qEEEHGkm8JvBv3Hg0/FcrNdfC93xNpDZ7F6PnpCs3v5L1FK2+XtvSGmkEp04s
jMrv7XkcDnB9CsHohA4Y8hnjBHTA6iIF/NfOq3H5zrOqw/NFSk9nRvqgXN91WpqU+IUe8gj+Oe8C
NbyRw2+8RKR+qnEEgS8OVovsdyBUlNxLWd+Ll23Hy9U37Eod+FP2KmtCzodm9Z9ROAYI/M7MTaN9
YsE6BRzDadl/XB+ftTb06hkzj3ecryhdfbFm5dAl1TAzP1Yt9kM7/LyCrfgevarbP9woHWK10P+6
Bihw47GLBnj/CwFsIcwEd5Ssgk/FHrS+lCk0KadmEpOl6DiDSP5lm3z5y9sxZkMx8rR6rRvWjy8o
fFPX/Mc97vTV9HfrzvQZ+tYNTeT5QlHNstbqCUVKoPiO2DJ2QBSCOV90/YOt+BmhF1iOgm72P8f9
GiyAfbxdQSYOf4OOVnZyc6Bfr6Pm+PKx6AwHcDNrR7J13idjDPV7GqLODprCbFPvJ6tbI8+GnaJj
HVkw0koLBwmq9foLMrN6+PETA4N5zWcBHnAnaVhJ6oXmyqHcuxs8Se4QYKUcltRSTAuZ+rmgKcf1
IUSpcdg2YSNQjbzdOyQo8zkQ+d9f2Rn4xBsw85DgJT4XcVywiHDKHxJMM5Y/zWv+AO+Z7dqiviFG
z4Wu+I9w8OXPf8/AhIKYRJEFcwkJ1K0rmvzU5HeFkFWslmweC4ecv4ULklwptHyeoHXS7OvKLQPA
/Fua94eS8knha1ch8hsUqJZtXzNwd6MuJPnAzGz9nF65/usXqk1tr0XN+NcI7PFj1eWifqtUMhiB
GrWKhCEUMbmltlYrw3+o7G3BFCaNrlV99IpeRvoUMXEevJBWtq9/BjhKepcuyMUxclHFWN4bANHI
NOWTX4LMmPgDuGiDrj+v5jwiK7b5Dm/D+KvP4+aPY0lkLmWSDyQ808Eo6s3EJ646gusvCZsUtqFX
TARG1/mwT80egR2SY99tm3bzbiaksM8i9Fjhy4g/Z5aN0cDLZ+T7+H9jNgSbyqqKimXmU4W8PMu4
OBvW2QnQ1VfRasLzk4FFRJRiLDvcT2uz2QqXj+32kqV+kaUeTPH1L/vRnmq/ChdvpsC6141Muneh
s76IxF2HzmIG9iM/SvvXeHJbvgnc4SIjfF6c1rnXgrcyQstAyDRLK0ayxgdhWWBr6CQChOuVokqa
NAynnaCbABTddZX0hb11tmWDAhZsRqM/P/zZZJJeRvo0wCuED17MRfnj/T/52Du8SyBIlXdR1snE
YO75cb2sc1d+eWevir+4m3rGtTTiZqyOEATN3NUyCZ+2i/4xHORYR1csgavuEDjO5/B46JmLtRQT
pCw+CbpJWCP+JVYQUb1k/MNxqVK5UdhmxK94+4LKQYhjJuuayfAqGmdSru62J18rjmDR9JKOHIMu
hjmZD++plq76olUT8nDHk9ilSRZsmyEHOdaoVo9mnr+mYk0QrChC9ustx6X9iAAdnKASn78C0+Ca
eax/7itwl/M15sU/7ZGVYzNonlSULh7z6Pif5BPHfElfxszLMwdbXimMwVXDZh0zzA1sdN39G2hF
eorZVbtOZHNdD3MKCItgdpl0dcLM+XNXlKSK3ZQmZOcbLcbeOJfZNAZpcubKyGXvEps9INncS9cU
b9B7Mas+0wWLaB4IWgjs/u5zbCYWFUM7RxjsoVhIzg+mRbG9yw+Z/7w25DJCqfSzsb1mgJGwEDhY
TEFG12IlIBtN7o76sf46I3bXnbbGIb6XijTlhl47UoD9dAxCne3Exe/LF3AFagpnfbaXk3AlO4Fm
dO1/uLC3yc5QQtz2PHtXnhxF4hPOMUxDQ/GyDOeBPH7KRcz+fhFXlu1WJcHpDDJJqJg0/s4kto1u
4XNB5WFEC4ZQkjLziJk/CPx1G9aQrErhRx3Bf6hLeIT5lJkUgLpdzZfl/rvBpbqn5KlEbkA02Ugu
IhFI0PiAOmrSgDCZy+QNJL39XK6e2q/9Vx+LXr6jBrNRr4s+NDk6VueEUTeAnXiCR9ZW0v/0azEu
k6fXCWHomqTieszVvyqJygasvb9WDTzx7xat6EJfsTyl138Z4otALRqEWJp4xlh1ZkwZOqdkfArY
/lF+imyb7C4LJIJ/WShuX8s6AXkubidUDayO4vsReidbJfv1gJhouc9FPn48DW1JqCI30se71H34
3yvEcP6f0XeFzXfF7OCSWZwJP3NiuIhSEWd+6jNO5d79h80slof/xwu7YRVJGzfFzwSs8ARZJxEa
0yibp2BKQAqhI8tzllCTitKSAA3uc/aNseQEiphekzU9IcB81HdRx6kvcJ35jC7hwinpPlHu8dUc
gfY5JFD+d9lPrVI8dFM4X/q2vbZxN4E7Vl19icMoqsPvFx29xMMrO1wNViX+1lsh1hsshy2Zz4gG
xdGOO/Qvgz/+b86hpOqyC7OwksVf+unu/Kcc540B61EL37oJ6llMls7josV9rVI+5XjbNC8YF/CJ
Us2XhP/iZs2Bve+6t1azFGe4YYXSg5rcxe5vBgVFbkic6EW2s0CnsvbOH6PMb7LB9yghb/XVDPk2
jGQb+w8Jp5TEN+ROh3T2tMajojtbzLDQgM7dmgLJloHP0k0BScHke5IFC63BtFoM2f+bdSaQn2T/
hWc7XoPPhxWPyCw3qL9b5n6FHjvi8ktgDieQtdKXpJCdHy1rsdr5IIU87hpgVJi9odVEOgs4qsEa
KG6Emy2r/2jDxEja9TkU1rH28a/y66hR+dKdZHYx3J1IoUCfiZy5Bxh7QObivI7nsSqOBjSp7E7i
nfZYxjIXPMZbpTnbwjBzWfhnlHTIyHPIJEQKb6XI9lOF4mFHtC3xmFzCLuburfHe7PI5RVc0EOJP
qXQpSkTTBbpJz6eT1jZvcC8Yp+HUT7IjcKaIZ5KG3ofL+cN1P1jz//qB2bOH8BqUzwbTSPd2nS/b
hWGjR1my6f8U3w99+T7klxCrA4O1THdBgtDEIPdHTnagHMWF8ZVv5R3h9qb63xqXU0OThiUWSIF6
ClahDje/HQdkGcBpAcFT9VLwWU5usi3gBUwAAA5OQZuMSeEPJlMCCP/+tSqAAGo2hgwAQ97zKdcq
fvgs11S1qYAIykzZAbdadK7GwiidYYD03cntKway99do2B2ffgmBFGOKzBfe/rSg2suwTdy1zrZt
iPAVNr4EumfNEMXqaTean1l5vMreP7kzKmG4VfJjEJ2BbNpd0jvoVIloiXOXU1ckGbalsrtMYJAk
r3mpPLYlqorawLi57mVRk/Q7ZwFDoGhayn4JXW28fQj05m04rXBL+2feLhDIPjMzubhTxqz6SmLB
FVc1C3MzzGYHQABlzZdi0wMPv/Vcg1k+5m6fHzKs6UXz2KEQlEEOr86nBQdBtSdEMpnq45o8tGrv
ibIaFZahiv/lBAPDUjoD3SrkknXqk46JYoLw23//oQAySNtUCO5fwJP3aT3oTvtbowJEr/D542nV
yjmEmc7g4zZpOP5H8diTf0DrRPT5X+U71Jx7TkyT5ANHSlS2a9jdTwH4WcKVtRkt2QJjcMX+UVUq
EKjZ3LUywykrcXFXMzlX2359sGrGEZ/YS7NR2ilHoZ9fUYeTuGhyxaqgUieAAebubpi/waq8zA98
GwP8sBVvAzxN8LT0hPheL22qTSlcP/Mg8nbC7JJJ/Lgfkk2IEZou6qmLFh5t15Upx1rYkLQO3n4X
XkywilSQPJ5UYaZaQYgbKgiQKVNawHRzrxF7Q28p86HTWtqblC2K5mbg2OUaIBh7dcSwyvEfpq6v
A34O1p9uyVqZMMxBJ/M+6GDJ3j/dAmNWlx7tY/hP96Sl3aTWj8Y11Cj2P7AyTzhoNFsLsGPLcQL+
BLlpdtDm+R+RRSXizHs4ed7EYLhNGyA8VtSyj/1P9ENRBZtPvhrOlpDose82wGh6GmOVa8eNHsz6
x6q0DWEPL3X7y9mphmPHyxUCM0iEkRSqb+fpMnK+RdHhvhx20CLJyGwcIQdX3zGzR5eWK4kJpZxb
cCgIPzsparlXbg5QF9FTRQh32Kj9jYW2eKOciZGFlc0rt56h6CTQiUZ7PWmXR/A9I29D/YY9di7p
pLSNF7dQfCyCIos7S0Q+/h/UgNpO5LO7eWGTqAzgtxUBFxKWsJgix2neGiXqfWZoYpx8xQAx0NvV
DAqZgIMB3Jo84SEoPwHGK129q/lvf7JgKMhtOY6gGFJwHEJ7pa5pYIEOo1HWt21utgyJDt0qm1eU
r1TeAIBl9elDIW8PPXYg91nkqS6xKFl1aLBJSwaGWVpvHbiur5wRwdaLEyered+nvJlQWoJX5Qdg
QDtj/QJ2VTwTPld1umbGVcFB4mbmSqKA/1IORtq1uwUbyFiqcb1M0DDAHMSZYTYguUJsyfnZTl2O
ehJhRlrdh7BSdac32V2kW0SlgqzkmjlBu63qlWSqdOAZmr1sCkEZKbM0HcfS7Y6lqc4NygX2Qjoo
6PZjMbjCh590VtKfi06lBd0dARDKZubmXJ36npRk+pIl2O+Ve/hjVZS7QcMRmJEJCpX7Vyy6GIhy
GtN72vmVApE1WvrYAYxpQkyM5DrTafjNqnoqnig4VeZijkB2xIwN+IIkX1RmhTFXow949Jj8xD7y
xOczwCdLlFrsNkN0PxlHyDs3icCZsL3RDKBcGj25rYBUrCnC/jU2JNCA6X5+gVD/eU4Q2C4M/skJ
YtchnQht0Oi36wP/ig/b0IHHBfO42FX9h/utqyfvjfxRGfZkZaXrA1tEAj46TShzN2yVaOiXP9DJ
C9I8/wkiuIgJdHJcqwEAGxmC6bAXdnhPJXhpL2X8/th67L/PulOTS9g94q41bWCCTf0oPFASPNjO
tXQzw8NwX+ZM/IYc4hgpr5ViJvoUcEEaG9gFlf9V7dd6tWZRbjeGjeHN8IVcdTqxg3g4mRPTFnqp
yuL7HQexWLH0wsb+OWxt3KA7FYthZXSBHe5tnXHV2GLbyac4+nmwPrh8g0d3kBvfpTQAcODUvmvW
jMvBn+RrBXjHWyignSGHB9DgbgexThVxJDiIcnLOEMApl3L77x/N9z0KY5R9UfhR0zcOc6CBS5y9
nuj0xCx7nLAwOAJo18CY/adFGuRxhXncfP9nRrLQbMK7F7D/9d8ueRKAKy/xAzAn2xulQH9P7ycB
fSAGgHuafb0HzPgBAgJPaL6JSguKOIyqEjWM21cwgGR/6hgN4MOdHNtenAGTv9K2JWkuEZr0Z6gB
68V/JBSNeE6ac2msBbg1Qw5KxaajMrR7lwY89X6oa1InDcbdmLDY5jL9TumJs3oy787ppDjAl+Ay
d1UAiEObcaG33xV27mn6ivBptFOP0GtYjRbc/d4croutcRWIHST3tyml0V5EIWDb6uIZcpKwS/30
c9JeI3m5ohPoPNE3Oyqh75ndVJlI96A761R6u6nWyWNzjKL3FjM2b6B+P4uy3zhXTp3CuC6Mz0FW
925lQF01mQoQqKgMidoEYonf8SSl07NlLdbT13+UMug6t4FgsbOEXm3Aqap4XbgCVoiyh5zM7SFP
JxBMKXzVhN3z1naqtKl36knl8N1XxZx4jBYuXNKvFEsrEcv9zxupE/SNkQqHo6jN9ORBRIH7bEG6
XgMGqL7+l28Cj6sK1pkUGtGUQIFEGFsze+il+D3yX/TOXMesb7wkJu+G4GmIKXeujPWiGMMXnVMT
bcwNPzSrIcnUCIfPzB0laml3kxGL1e2YlZixv9jmiCtOmArMsrfi5uUk/CVKhY9Q/z3SI5Eza3w6
uCNIu0BQy0jC8gAz8v3K6Pl0iTGDMPhzPzV7LOhuk2dWvSd5X553iC62b5M/glZWX3kpdDG3l1hQ
tFO5vYx7ZW//+VguDnOP3lm1S2NtIng8xAZDYIIL8hKP0z6l2lDNMGYYlL3q7R+fOEdLNs0i5pDC
g7Gv5v+IXMSbLWG9w8dIKeDh2PWxiev3ka/GhAZ7q8w0EyfrHzIbDrGSBO9iOyWSdsewJmQDN/Yw
b8x5VmQj4YhgepdDSj9eNH3UQPvOuLwl7kt6vUbfLnuFotBvL29QJEch/Sk4vYgmOpx4ed2zseje
bB6Yrkcya6BaJK2fu5LTXedv9rf9QPJ6zh/gc+CZRokbGmJLQRCzSnLu4TEOGZ+tS9eia6UcXU1E
XHNOCVeO/oka00YHjQAE7gbBoL/y1lcFdzMbPp4wrkJ587VZx/fa/cfLIOihp6BXLRLFx0mbnxP0
gFdSWnS3lWRAZIjJpmLLOrjG5IvKutD0QVqxGen+3ADBdEe85LWB7mDQIyl0A/UwZ7CKiJUgtknU
k1e/z4hHwfamNencPSOZv7e6ayeW0SQm/+r/JhYmU3+GOhnK0y6r3bc0rLEJHi2JFrWck8HuKAn2
DQN8V+bGNVS3J9ysh705NqAIBPKp8VXz8Yz7B9mElblhLigU9CFOyORj86mX8GB8ccKNFPfxmJb8
UlyXdpwcrgesUTW2HAYBoD9D69KyCjc8NvgV+p8LXf9n+aHk3P2ZfpzXgMv6uwdcRkxKkaFTaVFv
4cmiKU+F0U3uFk4g+72Xav1b9LVKMXMhDwxm5B2NuX7aeW18lgunZJ5uCbpDpXpOWFs30/Lx+m2F
UQBJpwQh4bi0IPAhpuy6YIBDXGZBf44HAiH9D+324dBEdHC8b+GRjCeZR0Osp46e0w9iuhjUnS0d
2FJXEnEWA2RJwSdf9dU6YgJaxGsojDCTbkCMg3FTu9i2GmtXhCvjQ9BKx39RxeDFjjRMsJW5i8MY
tA04QKmv1qB2nqpx3wKyZnAwP9HUytNj5EuinSE+i6Vc0FC6hC7mBqg2mPHJKRx/n7IO1YYKqFj8
CrefdTOzCX0yVGZk8029vXA6q1W53xdurmAzSNSM1LDikHQbto4KBThX59EA2pSpGpHbKUuD1VRL
fNNxhxUsNiOitkQ91Jx6SFMydDCCTU1FKCs5qpD7hYlyEVnF+bOtSFTt0fDL//aCE1oKqIf2s450
t1BbP+SRy7hoyBrvFl16kexCaOQWzuw3C5mXP0aqHE6PIztgcCf1/JRf3wIoYtJmic9uM8sbQxep
++CCcILRK+jrnGJhbtlLh6EHotqvQLWiSQXipQ/GAArohJFFiH+0rBRxaVvkkqm9navBR2BlFJ4Q
kJsgW58uqMNiNgKfh/WsweHmUL999gDghA1WUU4zIqHpQUBlkr6ERRWJhnaU24P3CR/craBmhS34
jT8980bDtMgVoak78O2JnPly0KSf3kyR4JFM//E5vH6dMNewz86mf+B78EtInBba+rWB6pyBqU85
A3U2okwMeBxOa5TX3p3YNs760uO44e6LmT8FbqOeGcpczziWg4yTifu1O3Pe1+ZMHbL/8YKSs21Y
6jZInRWP8/GlQNUbrfJnMOXo+tIbN8g79jreB21nfV2vPe07AO4Q6ldd6kQ9d3QiGlLSnYvB1IGy
fn/t8QmQ88DFdPPVptW6huegmTwHm7704B+qqWDVJAFjUK62NvKfZX6s0HL2OHiX8E2ZcO9kyF1x
i5nv1ElvWeiyX3DNrUdRdI6Yw+cz4YtqJG4H8E3XVvYxm+rbZHx4ySWbUoYMTW3l3UZTgoA1oJ6G
+Z2GR2T7lufYKJhCR+ryKnngR5ta1LgWO/ykd2g29H7LWiAogqwx6XzQ5wpZ68YB12gw0+0Bgp9Q
tbcm0XBgMiRQCaDQdieqkn0LZ6jqlBmb62rBhcfOFIpPfyQZ02rxjjNGLYHCznY5EZCrITXYCjPq
MDNZdIQSzfQPq6CFOTvcWjrX73fS8RXNQwAVRQLhSGKPZyI2vz5wVfiArbcQisF7WPuDuJwCaazy
T1LZb7eXQEDtFVZHuyMbl8Kjq15HsECIU3LkA39V0vf+FtO2laV2sv7PYzNJ0oHZdEeKKXd/x62I
p//pTwnYc0JnrOwxvFBhkfkrWVhumehtb/yaxOgt8bYA32j0e8x0T/LAAwIAAA7kQZutSeEPJlMC
CP/+tSqAAG82CfAAlYsYv0Gj9meKga0/AcR5Wub32jcnJZwyNPhoaFXy4vpyMppVylb9MSPUEq5x
c6wJPk7HvbwEwBRMjEwf1MtPWZi+/UT8Y4BoWU2EKTRl7lhTFrb3VxixOLBI2LS+C7gaqfcdXgi4
M0/rKySqq2sseqkOh3ANwRdPSGrlT+jM7Id4CRohKDAlKV/5merOmCqEBXbjEDDjF2k2uQqkDbRJ
/3XV/73H03mNEpEzFN9ZeqCfCTQGeOFNGdRgyuQhNNZD50SqFoZkbrvBuCscTJjzM+uG5DRmo6wa
0Zv3/OPL9xbqRtTUQec1SIP4pjZkkE0n/C779/3cbM6idxYzOpPYISd+4sF3iiFx+EymoLbbwqxh
W+Ctd6my6x43rn5PuV4AYZ4bIgor18Lyzd9dogWevrdMX/NQZMxwZJfPNpzvh/W1tbzbCRXmODJt
gMsmR5mtQlSJGDCcFQ13uQKSXC3bjXEeH1pgJT7zqH/G3mVYIoAAi68pYvOppBQvEROCoQa9f40C
r1Yx1RU/JhSlRO0Fdh6qUZUy1TTwObM3xhkoiPY4uCpYgx2touGNp1aXzf8Srjwt424ZcSfRKcSu
kBl1MgNAK9xBFXasGeKrQmS4sWqDTduV5a53ugB80K6c6QAuUKqEPFN1RUZaJW4BS4NBQkbzW3vB
VPeBbuOu0CuCE7nWzr7KkOQ2x7yep3tR8PUUBVDOTHPXb2aLi9KOaCY105bdUfpSdsTv/uGaiDCk
ac+J/7xMeEJ2H5w0DLLUMxQwl4SG8lF8Bsq49IhdQq8hWrnnIvCa9S0mrN0Pmma/C+OquCR1RGzA
OWPlmONBnPVSeRU02Ofn0wZY3wAPnx0bxntR2TXexI6ClBGHNl/b+67bI2bl0zLGAtVUXEyJ9Id/
gxWuO5d0BvSdzM9aoVh2Nb+Hkjz6yGDDjbuOFQ1priViiFjEY9o/ACKeuB8O/vnxMXuNmoymlUY3
mhd01xqGAv4jg0PteEwps9tLIwKVHITxFA76aAkz2cDAdZCQaZPbjXHpNE4UA6MMIHA406asvX60
auLeFvLONTTGpuLBQPIHY0LygTcsc9FVb1P0a/Zdec8oF2QUSMVqrUUvn9BtD+XBiNdntz1hXhSz
4sf31Y5yX7gMZCMrOTU5EvFESFMW8Cm7Fs4gYjJgjDSTqRcpX3vJGtdqVpoPCmbsak4lMVp6euzu
p0tNv7BQAJjka++iGI6G32Bq+Eh23p57+9Y2Pa7wZ8BC5Sez6PifQHP/AYaLaSbV9yMNyChVA+Hq
GdxWIRtkzJ/Y4n5aRLFbs+vGfgYI+6pQgfEgQtB2uJZ1wvJay5dBIHa8C2kSqWvwshygscN0JoVc
Vq//TlkJNoFqNjLezw0W3Wjo9/YBK9tFtwwQvF3l3X54rd6WyuIHaHnVE2zqUgFg2nUGR5yQjV2l
ucdKBcFyf4GpfI70Z/Uxl0K0bXDufNGYRiOFhphY+o2AtNVBIJgES1yRHPDCUlWhLFo8R63XYooN
1FdM0CpjB0QRJKTaeBm8vIJ6bOWkSXVxKSDxn/Pa79H5/jHfW4wmx7fAsvbzVDeVbavDJFSQVFnf
NR4sEyyUM6/CHB4DfTnMa4mr2F3R/bmctFGiY8be2o1ptgTP9zYCdBnXB5Xsu0m0wTxYrafXn6p2
75lLlUV60zPboZwhpVliDMUPsVXvvBBZLuD154rkSz/+up5h0XU0r6IAa/m0hZdYsyJJZrd1Qp0D
3ceiE+nmrgnziu1D49IHmnvbNW05Sqcd3iojryJJb3nbskNYFcHQDzxisKz0Hbs6Tf0oD8P8rYLs
ddGdyE3pk23PwXZZV7sS/cKZZSDqF6u6ofnIvPWUZ63UZC5Xtpm2uS6YSCwfFquL3RjBLahNIQK8
zzQ6dEF7IEmZ9J9PjW7ccm5JvpL3YIWD5pRDTBt+wQuxjfFhJMbOed3zp8tMv2+C42nFO1OoM/BG
HOzpmkBM3sqwrmyyHdf6KvS8ricIaYKVnDSF1aYvoe/1mAnF+c/2GLq0tKsMxmaleFXJIKMy5Gt8
cJA3KCV5g1Z1788QbYiZJPv3h90XdKYUpyNYALLNK9/rRvM0NNQna4IgxLBZjXfRSBRaxmjRpmKE
J9L4i5z+68DDZwvuABQtHngVHd15D7TC/Wm/NDLubmIxPs6/MiZiRiBLQ9/1wP/SfwsaAk/p5FCj
eYRczIA9M9dY86oEJ7cV4IkmlEe0UceeNJtC01X0dnyb3lNmH7UorWYwaBnP0c4fW8KCh6U5imM9
1NwdS8BolqDr2hw+GYE6DSG9H4h5V+KF6L/KA7dqrScr4SJcJUuYmXD+RqO38EtyWC1V+PrOVm6c
gGJgmtqcVnUwcrOUr7K1W6glKq5uplC4bVTMbjyLZyGKR7+SW1k6BXXzLMCChL3lX5+Wr1ACk0VE
riydw1U5SjbRfrAt+jDrwUYqqunMjXNPcsEXg5wMCB6cTo+UNHEiggPgSIzdCUuOMmHSrxR4SFQB
cEMoiDaQH3mo6tpav395pOKgRim0g4PmzClIgDP/1E2wr7nsgR3QQAy9wgg/swPLS3t9TUGYr1Fi
S9Bw/JNRpVnhP+V0pOrM6W3tDEI38zSlyHQBpBn8wSkM1r99dJg6WoDT9dQlCHrbrjJyL+Mf0FjG
1J6vrEbWSb+X2fWzP1COhoF/KQnFV2mzbjANgdOqnNIDNiOM7rmWMI5uCCGXu4Ea6AaQ+oYNypEm
n0M261iUyt4tA1kVIt+LwO17gM87/UcXa9yQb/iMSXb+xlwFgS6Dw4nbS33SiKjbOWdsqepf+Czt
eeEg65sYg5nttms4v1ge390FCWPXTaLQ7dQ6BG5I3Fb4krOeS/2e98kQkeeQ/iLftHkBH6mHsVlJ
K57LeSvpofAaQIhSt1tHZS0oBjVWVACZKZsVQbOTgCLOSXpuoYWLVvTKblfpYPxLpFjI7yLclY3h
RZwFeyqVZWk/qqp4tnUTAydtfYboESRmDASlgNGQQu2/4GhSbbEMu/bnPNd7btlZCKeWxq621Ruq
zeA9Ohfhuf6vu3nqAqCvFEC8lDMAWjqs/ZO1nuSqZQveemIX7tPjIjBpTQD6ggLIJqGOoJbbANJ6
ZY93cUR/eIfZzAF6ZcJnaa8h/W/VstsxaD1PBz70sEe78Ayytt4PIRvyg3MSZaML2yZSsuVGw+oB
8XGhBQkSyKx1Hb2RE34uKXTQsiv2uK+SN79kAE888py9fKykLmoETZ9MrQaGUVyTGYrBgh25Cul6
/wOn72Nf9pg0uX3S+zWjbGjTF/8I4XtjSKG/6tWKLtWwU+uGltBsPwwACK9cnGAZlwjuqDOMw3Cn
/oZANlmqzxAAAtdNfDxKZf4937COls71UetsaXh+dL8AzdgpEhfTFRdfh+es3BPkEn8NQMU3pDjk
CEoWUAexWsvosNjihzgrU54jpVcpiU0hTCQ/HXvzNm4K8SKPC7rlvNuPU7Zq2OwkSuCqcek1jL6s
7pQN07IVdHIQ+fB9mxXuW8SvmLXzizvp7QXEDh5DcCMGYwCSmqS7jWXIU2ZzXaa7cPx7OAh2crKi
dDjxiPF5fOqhIa2wW3Ld9alyoqc7wD4g/fyp2iKBRQJgoUOL5FuvTVcaKLJsakbraG0E296t63F6
8THXp2N/xg39sinxE0kPg3XFdy6x+xR9dleSfPjpOgs17skp4OdXWyCgaGK8NVQYhFHwAELCwJN6
/gY5OUqibaRYU6ykC2jyhAP31m8tlCxTMGoi8kXRRcgzkGNwNI9adH300WbnmhwmNidLizpfM4Gm
LFu20H03UA8ikDWWojXCkzZwyl1T20E0+MnYl9tZP+hzVyETTc1ONjLNK6mPfPEKHjvk6ptPz8AL
rbs8g1OM9CdTyrHxzVFZNcHEZZT5P2JamAnbK4TmbOuqdSG8g3f+USm7vJeNezC9TRYoubbAYQbX
T4eMtsh2TAlBH2XMVpjjvwefSPhbBX9sQ2uOWL7Bb/0vdBylyTfW8JkNdZat8fhhfwpnsQhtbWHE
nAcs45PyjbySWeA35VB4gbQbUnCF6VDjBM/zEfc1QPkiYwcDn/CWdL4JE9yRv+q0AP5hyZCxVtqa
1XEhl34EpvUyDp55Ha9+6D7kixKFO/opRHPyj+eR/bxq+4jEWqCT4tu6VPPhaiNK5IH5AEsN2ETR
f0TdMtSQaHLpvH/H+qB66nj69r+7CSpP86T7WNuUUIMRSLgAja+29Td6FpS3O+NyJ7h/dNgxqQm6
h9WPdA/YqdYh9xe6D1xf//Fozh73nAxdD1GRomChJ61kwLBc/h1jbHKsqMZp5iuqcvjY13SstVcx
oIfm1QDjSKsHeI4e8Um02UAaSB6c6p+jfZCGDd/bpxD2pwk4ypZk80+W/o8C0XKqSQtMLSyeZ5uO
REzMXVbFOU/qfeztyqCjRndAihYGFrtCohLnR9H1Y3bie1ViwK2LJW6+wx6c98CqP0S4FJyjVxIK
ut7rAyWc1C+pKmDAeJ6gAZCNjKTijs1Sk1cpfOAAWeylCAoba1z8+yrejiuP9X30WUKpMTg7JuIc
vIW6VG0mFwW4MSwBmWd21w7AfQsuP4uFje7K9444m6PcLJPE0sLxrsn8ha7bwig5OzCyFIXm5Ywt
gTCWS+V/qnIg4zfvFyZLHh+z+kSD95Ob1EcOtq2h7KhaYl5dQqCyhWAobp4Rw8Cb/qc/JT4yslIw
hUJeGf3tGF1QQxeRfE0QAPvPM8N4Cu9t+6btGentWiS6/1H2hM2Owc020hgu7yoZDR3z7FYJK3+N
7dRlP4S/1isHzfHPN3VFlijsI+ddGFlFJKoXCNh3PbNjHHW6lJ6shWr2OhaeIItlzwnDKEku+gJ5
EP4KX5JZ7fzBt+cpLCN7SHhfYq4Ct1YmpOvkCxPRkjPHRKdFz5wxP1wjC+Duya3tcWvtxCaQSpNg
AAKIgkrNMAhiTABNGiZHvEEEDD4VvJE7hemCC+VRl9cHjkUUcUJyG8MmuXRVTPjE0dbJCy3dlBAJ
ALmwfWYzg7bcCFliDBY3HzoCjF0/yEU9HhYgkzDHl263qr9xbWWADZkAAA/DQZvOSeEPJlMCCP/+
tSqAAG8mnLAE0qLpF7/EcZO00x8+6bJmiSx1aaL6inzy3Lz9VmoBP+v//oTbdSbM7bA4qWMce8Y4
dzNpEqr3crGrTMlrU2V+n3/r0byAaHZRt2mbj48xVGteMJlefLDzsDg1NzSDIJ8TFTcknQ2LZ4uQ
Fq0bWBnwt66PkDDjpU5Wa9LBKNOVRstZkhPtKpH+/E4UOcNfWU1p0RKgCUsj8vpa0q+f76TSOsmQ
7RlspHpaHHcfqjmLpv5PsJ8mkaxnpuOIv5RtKDsvJ7tuWx2Awp8sj01Kpe9kg5q273C0FkVQP6qa
eD25Q6eLKHHkZXiu/cJvlRz3/QXtCzGNKQt8eyjBQsmVHbX3mSgATUMkEDmmhBZpkY64SgZ82cT7
P23FFP1xPmsIyY/cXbTAv/6cIGThcJlEVp+yEyu1Us0gSWPXn/1/zqch29f6W1lRD9iX58gOL3XC
h6527aLf3ZofksfWT64YaqTu1xsAxBmfN3SgEihGT5Z9AfR87dVtFHpud5KH/+CbqXpJdl9/ksgK
T3LgR8vMiDDdzMYSRCkjrJ3SH7ZiOp+czSJKamAF305Vm/91GrqjJsl/f0tNBO3U8ayqohgxyf6n
feQbuFxnaEt5h4AfSAEBmhI+RxwXjuqo3oKj4Mz3NrymWmOJX9h5eENCsFMmcqKDUcBv4pwPNvQ8
mqbb+62GajEEnMz1qMkHEAcYovCCBrrt/+1g/5dlFj6XqiOKvg/ENitd7ZhtTNPsttgJsyudFVkr
m1q4mVeK6cgjuAj9z/Ww87+LaPflu+YmM8m8/5YR1J19TzYiMMx86Yt9RvlQa7OIpc411WGyvZte
H76scUhIe81iMFD9R77Th1t8+4W3bFKPJy0tyHlpFtrk0Jkpysq6Q/83rUWrUzYIiccND5ePY5hj
Ln/bj2GzuyS/LRGug4zuCZNvLoG8B4Jcl9CCOM0Jd78fNlDhdTbaM98I8A9/CT2+wgW1J+Iejuvi
4j++C+v8KEcYKeC7lIF+pTy3MzapqYJ3Mp6ZKnwSF8iWyE1nHagOH8TSA/Lx088I5pAOy6HTk/Ol
y+vXlvis7+uwNOhtM89mwIXlDYt1ej4Het7+SK2dBd4J0RJW85nPhoUdV2kUj3B60rQNBfYXb3Lh
zixiyRTCD4e3sJC2bxaTuQGAFjt2X1beD4M2ro6xgB1tKYtpkBOdqdUbCasJaJU1gcGImhvXxdyu
32NMAaHBlFOiAEwgW8/7fJDdsEi8FZw5u/hiocGbWagagICvyL5zVOOR88sgfhiCGJN0fQqgqRPx
1ZDgHeYjNghPOVHaSifEITJHeTicmOSmminxKyFZcE804pS+zkVRITONy3EEOIb6quk1PYW9+4/9
ApHps1VM0DV311uMp/PG/1ESFZXnrwyhCuurhZ1YduEra0eOdMbor4EpGnKhzS6K7WndS8ii9Byq
roL6lJX+3vTgsjfnSIEAzhgrpKvNbygL2WVdiy72E+dcpNiCxQoaJG/zIlX6pGNJoqzHhomwUZwM
Icb1DqDgNgaSYIMWATviZi4rrNE4Kv+FghJkGsuDGjkaSs230xZJ1d3d9xDdZwXWyZJ4R9VhvRnk
b9tdtYgB8TRT45D+cZp4b5GxkWkx+uRK81XcJEJeXBf8WjwIO4p/tHLqszGe2qTjCMhUoCVmcigv
3BYmxbYUelM4O8OmM2zkvTDWx/f9/eUghQLrif/WKXJ9qW5o2LoyxmaMgqBTCbm4/lGXPIvgUwKe
YEWdTdE7K0MTpvRH++S4roTtxcGxcQ2v4UHYfYxQoahosGN78JKMlinsS1/tlEKoLPRyWYteiayw
6A2YKcbrlcra426vJHQVnqmkqutgXQnfMdsmOWaajM2Bs8kSm4Tkhjs2xvedIArKf78cmbrqevCs
BHR7ijKaISuSbrZlK26tnqgtTmfJM01zvvGe+Fp6MwIsLyrzRURGXnSos6f0mQILEMzfxZTMzDHh
azH7tTVKSD4wHEqGqhuAzSdE2006iwvtabHm2kFTs7QbvyR7MCHbSaswJNQ2l76YXBj6POLCG0B8
+2CDOECoPtzoZ71bYBK0GZMNJ48BNq+XS2lmkjBEpGLLxyfTQO+1b6eG4yFOywKSzRSNzME5qFFY
MJseCYUFiH2Zq2sLqSSL95NSkBTNWmjaKEiiozBFyG7+pgEjB+UVhA5O0j7Ztx321RUoOK5LQiGT
Khlycelt4YW4tqVLOwSOyOjIMtM2JsKrDme364m8LGFte7uW47eLYE8z1u0wOD/pDi0mfqSTpqqq
zVcVn6wDG5Nm9mzWF8TT+7sA8SzNvb1/ay4EoMo6cA5drb/vre6tsfk7tF4fr2khJm9vS8wnQBN4
WoaFEIIPHVZIaoqV4tLVJuASf4B4sqbhZYYNYLOwknwwM4hqt1PEH32mYR1WrrUXgcBRtQMDS4ju
oiGDRJBW6GVHpFncjSzalGE7xqGH41D5gHUh35Hmalui9ll+Z+SrrDbHhcHoUVeGd8uAN1PkhuZC
kOmiOZIkoZXsM1eOtGVV4wo2l4srRVRo3RW2sf6ojLimmINIU9lOLc2sqicAGtXWQP3K/orv6zxg
Hhr+uDV7du3g0LFymGR/tOlWeMv2iQLwUntHH5FAAI6axOWS/RZU+BXnTqtKA/sUS6CMpgHoHZwL
fm5Danhj5nD/VEh00vhWFG/a+bBBa3Rgh7rX2vM+6i47l8SlaUxn/kyBl0e3hWntDUoCZ6gmz0uK
pDfqQnBxwROvZMfD0rMbB6xeTEm9jmaRd2+6+RUyUl+khUbpMs32xzRyeRPmd1c71zU/F6QJiCar
bxLglT1Wp98Dxk9yT35Ugnyvi0KRHI3rFMYOFweJilDklRRKv7zoobQT8dtWk9CWlguZHcYU3qY8
Cu/bXvpqSxv47ob6S7pmokMBAeJLc3s9OGcfLVcTBA5EHyLR3tsrCUH72J84gpenv9NXp7SuaSHd
S1/VqjJUUR/qtWrfQTESvkQ4SnmmojREyGBStkPOKUKR2ewrms27atv3qkMz93ZbuMee2k2VvFkj
36ZuJmAQ/3HZieGnFkgLva/eqMRpNBXk8YztWaw0j7BB4xmAzYsNSd6fTOLWwHGTjMdQPKytKa+l
IRe9h6DOuXhL4R/D24ZG4v0Ik4R7oQfLFjXzKZR8dlvuFevXtMW+54UOJkiL60wbmPdzNBE//czr
WXKRB6mGmDDS7UdDCcn6vKNhfCwoBlhFthiHbs8kCfau0vtKJ9Mxa7eNiPkjUGllRLruQ7AQkB8X
KzeuZEMaOMC6oaq1l7SknZvhvMSK+9elYx9d6PNsP0mPtrlcAgp94kZuWW6ZgAjWiiuUgFzBezmn
K9gWG/vBRkkNtxs0KkMJiizgfPWAkPFScfR/4Cbt/c/XTnQGo950RyVMbn+GTDYxR6/jdJymb+Fm
FbFCroKbDPp9XKHkdcw0S7Achnm1TwydQzsc24tKRXDkaRCKG+xzEO5l24jRIFKkGGEBZ/nmeyNP
EzJkdmkoj2R43KZki4Uj9U5pI0HY7L+Rn4TvKjxiyLEDuUL9yi8JEmDoIhFNx+4L6sYZy/fTlALD
ytJXcf6HJZrIoOLRPIJmjsOSln+NTRezcpfPQAy471mNjdi414WXygpYs6fytMKn/i4gdmqlDwuy
ndnbA7aZ5NlGz0vBknPTqp+p6eaygC2wfEXS8AVqHFMFyOuitL3iOOJMEMlhoQQlYevHJSREqLzj
374VAKa3vV5HrgqoyT4XEaJbO5wDybud8Iw+YY1GGm1vrvMJ+oPDpyv5yyVxZ6iBDXt08MzfRWla
OYLb8GfpQTOcyJu4jaN7Jel/VXojC636M6nSoaLIf8idgrjx20D5LNCsAI6QHLB/M7YEXZ+9bm04
ABisVR4UZ/NQ3AMasywIwbRFzjpKtQJI7O1zOakrlxA7y1dk/Pojv9kyLKGc8eKh9ZbSX8/D+FZt
Vnn4yblVJXwc/4PX7DxarwRDoj336yPKWUOLixRna4ZhqTZNcP5l2xHRgIpKuyub1kqe5NP2Ti1/
VNVpRxuOOXSLIVWRT/uM4U6R8y9dGkA05chvYMZ970w92xgalvUKXSlxDpV/nvkqlMP6+hrdx1Rm
xVBSk8xfELf8J308wreKeZN8iTY8LKqk1t9CSSIiDawJ7+RT76y6rTJc+fxdkhkCjw362oXh8ADM
TM/pubjXK/Kyq04tckGKqUXmmZhDRMY67RtailiXK84XbwKm78X2EjWPgmqw7vjDyA3UNs7aZTYL
c1drohkYhC39MRGJD5S2KPSMBjKbnpDdRJeJlOXasHHYfXTd50TJPWAA1Q+3QYpI601jfh7UV9qH
1/Wlts3ro5HfRDOLhYKN9gy2lAyCNFXP5I3L/q5TXWQYUh1jcush65qgHp7gVShpa9YANV4egDTp
VPw7CpzD28pAwSa9JeppyZsH//I+6RxAGxima2Xopd3z3sdJOgdgBYzfm1G4/Zb0i3H+Q/rzbGIY
5X01NFBQ12LJCB4QRIIItQF6S9r9GW9aSZLXjreO3j4tuo2vcJ+Cz4YSPfYaX97gZibonaSG5y7k
QU6f7+YGOqkjNaW+1XTsqNmTX4EbayEyUP4cHjAzFSIdg0d0AR7h3d/45hvCcbeZOL9vAohVzrOy
H2XITLiM5zr26dos68ODtiW0bu5CTt8sRrxWrPP0soZRf3uoj0Sj9CBeJu8tNj8LKrKRlgWVpCVh
AvzSe4xAZqmaDUUZuKeF1Yi/a0UGKwIuvlmhjAnINS+iV4usAAZ8bqkozypwntxNmbgEjh8cADY7
Pw1Sg0/upgA4P4+7eHiAt52RHqjl3Gv5AJcoXgYJvwaCtHpUKJM91icxjVXphjzzAWRlnHhvEGTG
JtW0OkHkx1dXjc0XpUzU4oNz+D7VIr9c3fKgkK6AWXYwtMw516F5fKkGFdYpJ+UHwWsEswuo1zny
A8v+JSODYM+RnK2uLE+WNGwQECn6Z6UUvHbk7XmQm9CmbbdmZSZxMg3F1DEdxv5+qgB50TEtx2uV
z0RsVbi5KP/LjotmU/bKO8RXGoxejpLft21Y5ONDCdZaFVqyrRJM4zB7KnKmocBPR3E1fmRCN2ts
SykmVbzF4hPew+mEPLKOMAmo9I6yfd17aEXRzYtuH+UUyNry4baZ6Kt2GIDmon7m4bqj/Idu7VeD
vY7QtDN9clTH48MCF+CoSCiJjL13QVavMQZph85bpQjHaKQe9x2v2FwguZJdsJeEVMXEsnUKxID0
TgCgAUCHywfRh9+FwVaiiX0sQATM9ZE2N8uTFXecych0i4F2o6fFCVBCXJLVjy9GK1CYqDLWu8O2
nb6M/JSU/pkCxpZg0F9sCC/hCzjS29aI0Sv80AILAA+ZAAAOdEGb70nhDyZTAgj//rUqgABvIZGh
DAE0mpeTY8dCFg2Y8EJDetOdxj+qzqibg0jQmZCILiyw5wUEWBmkKzl7J0unDUaF6TU6jDpo4edk
aZdyKnHN7pA3LPdpoRV9KR0QEQjB9AAUGyAAzm+r/wBsfJO+4QtbOSAdQPu4za44malfNO/Jq/SJ
cJdXxHQZmC+KD7+6t2/PCLtr+ZxdA0ORnw9Dc+oWSpooncARv/6ExQEv6xFuxQjpCo2Cc4fxo7j5
dfhZR2Iu0MXjjxmLpe6qxpJGvIU5yZJBG+/g/NrYAvgk9oBNlB82IIotYsef8+nSpGCvhoLeIh37
tI4brJbqifRL/IiCUBn9fyhQiypk9UjYVYEQ7OoZnjeom2pvTUL++1UbvGd7cFmQNRyfEcNIZukf
wGfKME9Mlqg5bvE76Cx5IznFzDLZsZIAh0d5BXisEOU60xtiQrg3+lln9b3gc56lp//pVfkk6wQK
CrY82jRYFu8h6EPQNMw4scBB0AsOUtMRpQ9ofhls0TNdYSkWfEpIrdStBtd7TcUbfPHmZFdaTVba
JEyXi2UmSrEimqV5+Y3COpvc6KgyZC3YZY9d+eOfv2X5fRst4XBol2+XtVDJPID0v94HTFAZ9F28
QmiD5nT+3YZBFMQ52aW1Oh1jwMu/MCf8LOnK1QaQznvj3/B0nogdF2A3/BtuAVMyRm0jRyIS2Rhs
X6xZsbnFpDeieuakXY8PvdHE/p0S4rWs6YJ6qkiXvYQo5c9qGa3GZfuFsTJ0ic4CN0z8FsOlBao4
+K3otglDpzqhJ15rlcaVsIRUVXtBBUxIbqXU836wHsFfXkI8l8XnKwqYN6jWn/ZEeoK4Y0KLTree
rvuf6adsNRiyJ4deaZRPieLajf4Dm9thTLzPUd6JxjPSMSmHMTIWpc795WwveEKj9FE85OWJbY2o
00+DDSRW+oD/CtX0BnkLcOoYY5qHQgxOQ8GFFE8NBtZlp52w+TPk2OsuQpY/eTNltdHPYEW4/dBO
RNBz6zBgnE7BVAVyO9lNqTnvNjKGKEaeVDgM/Nbe3m3Ii6xtXorqoGravcifW+Ngy11iVGRzpm0U
gfCg8DhsVLvAv74I8FBmq4veRNekfdg6n12hjZ10hr4PVX2wddZGWDxg8K2hWkpCJ9tqJveaaEdr
09m5asM8mYd5PjMYQWLivM9YIyzv/rPcySJiMb/R+jw2XubgQQint/ykLU1sIptLexh0m3akUAan
KVu60Q2/n3/leg4sGYzPGtwm/4oEDh4K5e+0LOmj0e+6m8JFgecpedKfxz/sxUUC6Fuwq4D77tfC
gedbLaRwwYg3T/NAIIfYb1yNXLbAk2qYKhnaqth8qpI+/lKa19hIG4gOY6roLGsV0VILT5dZEbnf
cwEVzFfWeCnfDqsnI0XAo+R1NnADKJWlx/MDrvFJB7JmzwB4MJuWynpyob/F5SreVwUyGyUxmlDa
WGhLgMwbbMsSxTFYdskwu8WBJEyo5mMc5RQwcJ61vp502WpY3orfbLQXcv5XSZ3/466xyyqPJ6lU
mtWWourYGKEeipocjlCXkQSn5AHQynmBTSBLVxCh8FPhP/he3ymGuIdscLmb3ikArVM2nLdudkBu
HrtNX2SmfmGMoIKj8cTdD3nTFpsDF+VZqslunlFbLOPcphnmDJQqRcdI0/wGHWM8ajqHhfDoWowj
u1LPNVGGLQyKMPNcKOBY0eL5+fr7/CWs1kEIm/tb8PJiAxefewQJbOIxivM4ATnGzQU6xVbbeN3L
cI/XWKDKD+u4gUxA+FTKanaDvhqOo8cNKfqDdke1JtqbAFhHkpPMWYeSswAy2SuFIAJ0FsRoLjt9
D90pdhBDueVOKPqHEeDfO2ocIHTikYFCxAPVFLZcOKPFXb+KAVhYi7YIgkBdvanRndsrCYRAsvgX
gNXNsVEpTaAiReEhBk/8LOBZQ0OHGEaD2c8PK9rIpD5Ft99/EUQN3tdgR6ekmhE2MP9+OiYRldiA
MbBz8H6JFuhX23/ntTiwYT6Rxx5NM/H0ezymqJWRvbbVP4VUoZAaLSXGQe34+x0cCczb56rqt+mh
12rnQe1kqXRRI7/wXoEqAKuSNdNzV1YtpsiGqJoOzdYQu7C5PWg3zJICt/zf8AN4r+IZXr3Ky5V7
bqtfY1SurqZRhIhKWbiPSBBQA62DdzKjxjFE7Gi3pGKGbRcUmh8MyoN+oKOFhcR2gP7BhjDZH3um
tTrqfQg/+XjmEF16I6O5nh2c7LvCSGEwXw6Odj3fVIVuQvcEMPpucf2eHhpG6e6o6atZePrCcYZ5
fTL9llnJ4CSWoHY8+3iTmXeTt5VE7CXum+Dg3Z6DSjfQw+64zO18cVpQzYk80R5BhCGB+d/x21VX
5YxCDnG88Tps6A6xUmK+2XReto1+NTv9Zht4bA28K2KfzgnAy6Kliq1AenmLGPbc+O12I0db9lPB
HqU/rEwCT+mGPiq//993gEXixFavmC/02BJaSVx3hvsU5MmqBZrlLEHWykLgnh+4GYhaB6NlPnjE
cVEveAekWw9dHl/gP6pVfk17w8Hln9IdN2F4OrfnmXxvcOb30W1URdwNfTLqc9gADizyQevxDP98
z/N/EL+MywOVrNuWHopzsYiR3yY8W4i0Yz5wlzC0izwuKNUMp279hDPBdUU7bYIDz7DIgsNiWw+V
OMhTCbc2W10RAmhSvREv0ztxJHyBQSLy77YduYhw1RCjyOtEzg6GdLVvVGLJHFqG6+vIwVAjhMmS
LOiqeDLUhTJgxiENpLB+O6YgyNPIN+4aUdQcAAaI5G2aVWg9fYRt4qzjt/wKgGLIW4D57YwdfeCf
mUysVNoATieRqAlKZv2zNeuyNxHWf7xZ/Q+NLIIz4Yo1Ylmt1dx8OauIlqF2AOprS8LHGZsNMPBb
I276Hfe+zeH7U8jJupei86fkygorrveLynlCYb8S8YUr/lKzqxkuxOXwj+LiaKUzZuJ+NsDF5QCC
PtHODpr+CWaxuVeFIVJ138ZuzEcaQFckCUnkqUkHgwQVt81b1ivFRyKQka84a/ML5QkhCMN2zGJR
T2DbOmNpAqC9Vcnp8nCtlUv5ejHMrQk54Ipg+M+2u7sDJKY8NC9q5oiXFDIRNxHXbRTzV2VrP5C0
RWrqSFpcVhHT9uRbeEbuoUrfJAqXxQjvolc0a1SCDHUvnyH5sAbsizGgKedkMIKEQ63pdbJzRHDh
bgOZbp1gbLlwnpP43Vx7btvfQDAfUYZDUHuCcmA5+GRxn2OCjVJ/h8rNxOrMSA2qGDkf/QkbEOt5
W98ew6N5RdnTurxTtTUjplNQESU7B1FsE5Hh/VRekw1hs8IZK9H8bW9b2yr7NiiVxZmg7SMGxyVg
KekEcRPtkkbHs8q5mPj0Bvj0bG0ZIcq72mTvWgyCg9gD9io5JSZ/JXlkBIK+ofAtst5qBf/Gra3y
ZSIN4SBkCDJMXROE+riJhUQSUtS+dtnXG2r6WSWAosqM35MLOQR/WX5gi1D4Wauad7LvpgW8wfgG
Bb9iOBa66MjuetWPbT0z4tsXO9esQrK7erUgvOobY1FamPYJL4zZk+Gu/xfhYbnn7PnRH5928vct
J50yVbMIdR2MBjAqultTqp5FmgbH4mP1hL+LcLREbHhy6K/tfKjwFL5tqXuczlbSVZsbnRJ56U1T
D6sWRqcRphryzEJZRLWskA1YrArRHliJHIk+AQ8pz3q2ixScZGb/LEPIw0U/TohHe7C8uaHeqiLp
JxQA2/mgWWMAHDuUckdiz7mThQ1z5udJl5+DhUUbFay2qaPwS9qhJ35JQxI8YvBkLHeWdgC4mdYZ
5kzfT04HD1m6lAgjwCoDUKSiLMvi6RxFDmNhl4sBvysw06Jofbv6T5rga8Bpe0qgDGmpNzPVQ9S8
etWx8HqZmdZc2K8/FwXAYBn9vjsiGRbRQIbaMwr4NYgOTuBFHADl9cLEBf92WophLJCuFPIMkMRb
k0lS8Yg7BCm7WZoSWnPfVa08XTkpRlVJqpkiNvXh2G7DSh+NJMHpuEZc3XgcEtCmPPol0uvylYGv
DaH0QIZzlDGG4L9adpizjnCbhcKt9mygQ1P/MpkSWAgarUPcLHOaUK5bb4y6WFKNYKPdmwMbiBUX
XZsfVSUiLBN7r7NTfUR+G1GKQF6qxccS3LXdzw7SxLe4IMJt8qlfwb3q7qWuL5u2tQazWopp+iqH
HdUdMUb2OGsBfAYrnQOmESa+YD/qjq17dXGGUSvGRv/OShV54aVDd/m9VKsB4mwQxFOA8jCdE7GI
FF7r0OBRr4nOOwtiLLMycCb9FqQDkXmK93gjvqA9sk2BqvP+/7WSYZvLem3EgFj3Uky6Eg4vBu80
u0P68JJT8tNutKMZwKFcR2khhLEq3G9NX/8Cr/7XesQptm2ZGRs2rsqYCy+QmR//1W9QRe8nJ2IG
cETxsOBuZkpgJYqbC3j8OEZAHzaVdhfSmw3/WS/bvtjTUiD1g34FWwdI46VBYnkGlm1fK+qjkjXs
4jLYRmkSy8GpOalxq1KeP8FzI7wlnlUSQnDOd/XQ47X+T3iwoFSQos/7lWj0SxtC0QxyPeByE5hf
sPBMfxXEtrzI7j73J25cfe4hH5v0jW2DlHa1F4XicUT0PlDBma5tcnTnXpkiggpUOHkmNeiQfwi1
RAsd/c27KsNFxI21ru7XGuCtXfcLGaie4vN0ZcS3YU2qei0GRv6nYTv1kw5XzkYRVJSECJMQ6fqd
8pOQtW/z2FFnZs0xSMLg2KEgUvDscyOaTOA+D9xUHOvRbvTO7WoQIppvsReQeHd/d1lWn8l4w7l8
FEXvwVteKUBojbxSOv8I2oaX1WKvf44oEFJ/bkF9ZbdQMJ8WZF60bZXLwa0iUzLSgRCps0ERPKD8
D1gHe/saGLYVaVNSrxvgtJvCWMu5EquKJc+t+nnABA0AABHYQZoQSeEPJlMCCP/+tSqAAG+oUtjA
E/x09CV+c7qomf+1hY4xH5qYMD3kWsEmQCGi3nhgyLTl+VGRYst3PB0U98EG7G55DA/TbdTDfsRW
etbX3Fyx2RRQRR9CQmMY7LCztvAQkh08yZbnUfpJw4zoFYZkpTAYThVPOZ3wg98m74zbB7qGOpE6
jeUIgyUm0fPYOhgogBkNjL9YGv/QPMgtMqQk+Kd2sHDt9Ivwj6TzdsW8v0SueFTbYDB0wlkyrQyM
0Z3gFkaHi75CPNoQzimWnVyY1uDPdN1WvP86u5069eXYGeGyfthF5N07aTueHGkCM+Rsi/dG9vx7
FfT4SyCRJ2chLWET8J5q2NBPARlX0bvKWBuNTuqT0maQL9Ox/rn4UrIjR5wBPcWTUJu3bw4uvv12
EXohMkuY0dAgVs646b3K+iJuzYtFaUbr/qVtYVvFlZ8MilnEhrdhOTsIQ80D+Al0y1RWvg8H2vD5
Y+bRZU8gMjrayUPIHMWhSjuJZcmoEqx7UePFsEWsvfDeGOyc9bTp0g1kVuYqIwbJPdlcjh/1mHTC
M3MeIMjEVe+O7T3HP76H4+Bnc8BVTpEiavPUCHHh+n3FZSR1PPEyOWaBAQV8XGGT+9tWYykkt93Z
+S64/jBySILGjp2DUS5oVlGNFcGbyJOrfma31b8KEPLcxX7arGmv85R72thRmxyVtbAEyD+cUHPx
W4mZtAfP2wHbn1KP0HR4fQ/U3tlvhC+OS+SAum8cFDFUwXkC4N2XQQX+0Hvc76Ds0j2xMpvDC/bk
1Awl2WEOb2MTZbpPNt5UvRYUmvKCFqUX7OFDKdBeeOxnRUHWBoFVnBPDa2OeeX2DebR3NCTasC8Z
kdTA4vd5AHix2S0I8U1u4IzJUseP9q+ifXGBsPro/22itXs/FZAxoZZlUlkiK4OVMuUCOJXEdCu3
96mkY622Dj++tQFOWdd6FYtXbNr3gcdLjfX5SB/al04dkDHriNEZAScHqxqSaZYvjjTCZ6sKx4HZ
yMm5OinY/+2z5+ea/h8tEbGLTaLclDwiW18iG+M01L2MKdkFud3QuBZCsTDhiu0qXAmCc3DeCUeU
mA5qpVma34+AUXfpqfDgPgX6NWRZMhVm+7mK1FzXt9re0BlH7xH3eLir/n7MgDCkuwtcKOuihDNs
0DVAPg6DAoTgofn4JPeHRrdGrYhl1bhsB2PV603EF3ZLWV/QJgOwpp2o9FZBXLhP47MEpQKd+6o4
b30mTmBUgLzNolFw/6ubV/ri/kIr8t1JTgYFE+GYjtTo7WcfToDW5PrXfMYhLFsI8HB818KfHj3M
W645nBuU7EJedUtM14VQ3nva327GLr5Ubnjg/Ux7qwAKhwvsmxGsVpKOOAZAhJBj0SODi8m20UsW
MRqSm2Ojzr73uIMS0WL3L+gAKCYg7jMRZWdoIIhTkxefFZv6O3/4jGfwjC4Nr0K01yOOQYnHvm7o
iHsLwshCE2Y6mjKiC+tHaXDBIWZ3gQugFm4p/jVpIAjRueM9NfZcO8Nj7RK4o1t3yf/oCKLepTI/
Q1qPJT6j+WdV+UqEvCibj4OsFyWve2ID+SFJdGVu7QYHPKZ/n9FEuOz0CbGFB3Yavrxo0brBzxCD
HggbYQWnmnTlhulH37Qnp54bX33TV12O3Nv4ma3wL9WJvmCG5BRUIRGvtiaR+V+ShlkwBx4sxwOj
r5iy1TDUV1iVudZZjCphdZBf+R+lFy8Rt7xEj+JzEouOeGdRPJLnz66HEZO3LW7IImdghQRUTSku
O7RMICgHekTX3A8MtghkklUAiW2JmLGugiJF+BIIqIy+pJcNXZo68WFIW0UOiw1m+JhJiHc0wy0f
jKEBw8zqOhAqjTriClmhJWKlSq9BQmRLdOFUQQDR/rOijmXugsiOBq5G8Ru08i0Evt8K33/p1cMg
mLw1Uj0B+/+EAlq1MGH9d2VI4CuqDpoMGfxbl7C5i+9J5mXIfDwsRFP9+F3mTaPB7FwOUrsX/N1G
AWnWI0BLg5SpdaxHNMF4cbmLrQzIO4MaxuRYFKV853lDUZWoASNni/bFwonhWGmxeVL8HU7jSAfw
8SoNoKLiBfJqJLSrzZFKNa8OCTjFsVe9QU/T/nVqyaDCexpa2nyz/LxMZOuK0MobeBWWgfeGz6Cq
MSczzRxF9vAROYiH6K+km4zMFulKxn51LVYaub4TYftUcC/cbYZDP/DkQVnTI4FusbjnZqsYIOBK
xpQ+PZTe3JEDpcfHST/mrnBAHkXfoQ/C7CGuW0OsMteIwWHRWdWW42zIAVVmd47+VD6GFAKFTw64
4eKNd5HfKMqghvYPgdTVhL24DzuRmE9RpWo0ydX6z1WvRh0lcOlM6WI42I7fyN/k6Gg2yVbHQRUx
V0JnwVnzKjfVTXIK5GJ/e/dQXYLrxF4B1JqcmeC6sRHNtaOLsAfY50dVVogcRZQWFEKO3WjGEPcd
ZQtYcrN92ylQhfbq3w3JdiGMVentYAyBNQbExumZrT2xyz8XwzCI19PySp6bKwaCerpAn3sVgMzx
Q67oUo+AhBpeTjOGCVgSaGbnjWhQpUDaJxEN3c/WZlNMbyJ1y+sfMKgF/oVG3qf2lx3R6qgUNwo/
EDO/yAtkyar7xC5aQbqQxYrp+Kzm7wXDGXYzSxjddGeqwPUGn5FtbkVpjhqZepTjELi0+MJU27SH
A6q/BtIegejbYernlTYjdPpZuUPF53ZxOXM6cyjIv0BDyOBk+4RCFs6xaStSCx1j6jeuR301SyeR
cNabO1lLlhOZMPrb+Ry9J7sr4Sf6jvtU6PemHHuEYMDFlASHpF6RzDXpWSTNPpSHgnY66JFKBcX3
+4xgNTasaolGYYiaD/dbG2kirOetbYbu9t1ubdy9GgCRbYtftt6wljGIi58/jsacpRmTTiKzIlx1
2rW2B2T+Z2Q7n9Gk1SMpWq0ckgkuRVXMUt4TO9imHdGG9awtPNvErgiMx+0UTmeIKdBM75jOd6zV
9FHnoR3Y8hh//sbX8IgvKUeV8W1RHK6+SPhmkpsB+P6kfpYq89HvvMEnCm9JUm5bqa05c7Ge779N
5zTUhCI74BO47btFg5/IDT+7ihAucTLhtp5XdQYhqw3X4Wj57Ny9mgmQVeLl07b/AZTSxJ7A9a42
l0clMsVVB4agwYh3+4US2vh8NKK1pzXb0xZ6MvFwojAytif3E4wzcOX2+dbcrUCXJldm1PdpcB53
fczPzeVab300hbisWg3I26cJ1BOPTA9JJWw6EZiTt3b2FDFqGLKbXm1f108ApD+m/77yYD0C/Zo/
//9OrKLukrLwJJzQmLyjxbexajRvmA/dCCZUl4PxKBbXRm1pGDF3XU/5U9eocTCJTUzKeKXssj2A
uwhU9cx4cQA2ehASo0+s/YLz5me/vLdgh33P5MkP/yqiL2kYDDV0zLHliiAC1cVQJhke3si5uTDu
YV6T3kpUBmMYNL5ADAztF39Gz/16gRW1ImhHz8UXl9XWrefbUR7vTVfg4/mRhklQo1dzOw3qdT/7
KVtJsJuJeOAfcZnZWsG0g8qUIDSTCRVP/t2jz0PeuNmspoBEvAcnEAWlalpg38wx0Sl6U8CIVh20
FgCx95u2Zho67rfL/ZUlcIlveaZzaL7V4nmRF56orgVJyFHL8zCbDPIMKK6AgoK1BGu55HFyCRq4
p2xutEYPmiLxlHipSN9lKCo6HUEV9yaV7Dp8adhQXP8x9Zzm96M62dyIf78HQaet7mdJLhIJHPpC
oZd0XUeQT3vVyjC4b4jLou482B6fPHh8AmDSKLtJ1O+Pc/JB2yLbI9sk7JVIEPojoKQEzQNi+bkP
N6L8DPUfqoFRzhoe6Iiv/2zPMffNqfeFvTm/36h0M70rZ0d4qqH+U335NG3mtvgzlLxp/sgIo1sV
7oyfSMVwfKz/MW28nigO6RNgOqqhrmNof5hoFbHdgdF8DpWSLMPqtrM4ScXAO5GIOedPjjFTRSJL
qBpbghFCP2x06JbrxWyHA2Z4tI7xI0brIsaxtVRr6urngWc5A0eXvCn/cV4aDS8AAX/nV3BUQZ6O
waJeun6Ur7z5SCP42wFNq/n5T57EiqrIsS/vPNveNNgAAT4PXDCCkRF5z+195WjmkKKAuHZ/2O0v
CpCHHxe5wm80bCsuPkMTDUxsWDShT8vxg5DvPoIVhbVNAkaTFJdwNPRpDwDbrW/Cc/NE2zaQQFYE
U+/VO7+7gF8fUEI/vhCKTh15ix6qjHQZOZhWcyVSW8Niu5tj0beKdoWpcwAbramnI5yj6QbnJvCt
2stuTVaivyfYL5hi8u09BZzHmI5ycaAfY8HH4NxvZDQQT2A+AWwF0iZ910KwFSw5oaTsgM0Wj7Fq
p2NBjOyih7Aiw2KeDKvWqObdpG1hD9h8Kcn+7d5ivhfBPegmIPAzHaF8I89I3Xwxz0c8NdqPGYPs
O5nB49yujZ1AmYNV3gCoR2ZftkBqyv+np2taGnl9Sz+6ITcIh0AHNW7Bn6xisXzdf1Pj/CQ47uwL
JD35NlTYAKTgvQd5tVLeEszJFbHzHssH9lYvLcdiiwNJVHQxV07j7L+NYxxDL773dprbKezOHRnx
AbV/LAtJIMFkGjMkzPQs4n3JcNGQS6yUaqlckUAn88Xne2SVOdUkR7HN05TswMVWDFQKdoReuD0C
J0WCHP+O+mKXDofdG2P11Zuihc8MftsndlKJtuxSP4OXXgD5NiOV9CqfRkZ2DaQ9Mo7IHnFljq9h
b5y/pJYxjFSXGlum+9z9PnF23U0gQwOthXjfqmPift8nMxWSt2iU3H46E6mhWjHUx7gZqslgIbiA
UIvteB9CfPxpefkPZn1HdDUGNGOd7mZl1VuppfZWKmRuyU96sGR+UKzIi43I6H2DB/TzwlUiL8bb
kAdqk8s1HLIHi7Z/ekD3rlTUqjxE5rk7ySNFxx4H9a00hZUiYBoucu1UTZ8LHllaTrFgBnaugOTd
pH106b4TASFyn8mXmXD8IDcb9KqopiuQb90LF98HyuI91o0Yij/jdJOXbU1nCBEUVeIcfxxcqqPI
J4O30VNz9JRBVqC1Eid622eGLtH6zrcIPgVVie9n+AdritkcgPF66UuBYq2xvWuF5Diy3QpwHV/C
7JtTyjkcPmh7gyNbRDrnKl/EPA/A0+EQGaKBOEj82+Th1UpKEIwF4/pWC0WN7fGKr/OduMpD8TPY
/VVyRvrs6saOoNLjA8rhe25sZ9HvJwTai738uoD6k1XGHC0H8N33xUFB5vNRxF1tSvryyb9MLCRn
CZtBcDzFQMy4tPbcFiUEdN4ZbnrRMahk54IWISvpMxK7cqiQ9eJqc7nJdl74yYBwyFG1zxzmPhAd
VoSORmbS46+MMz5GUJgGe8H9rpLhwHOfzXYYiv0Jmrz2nwQG/gOlKzY+TeMjOmFzgFBjeKIDzj7N
Q/J5rUB0ONu+rNBwwkWcv0PwLE6d+ZG/YxBM+DwmxRzAUAsUxJikLJdlk5pQGy069Tz3675BXk6/
fqMIT6PW0qE3ay9S+JZTiGGYUK6pbYk5I2t/ucuRpzePV9+JyEdnoB4EjouRIN3rZ/Ry0GNK7SuW
GnbwR5er1WuJBp1j0mz/3O4y2lw/yAFO3IIWXxRE5h4gXbpmDsNujzB0+MhsyXjjSBsODFpdLyCs
IRJCPc6b/REZHE9E/GmRuwj/Vr0I/fypRHbGBcLnsNXmehzaWXPfb6Aciqi4m74dq++gKlTN38bf
Zj/1JQnYTdf9wN/cOoQFfyalHY/j49Hq1VT6G9bwNWxQ21/62kugBIftxhfrTTbjV9iXdzC3VcR6
F93BWF3W2KHz6yPZkcOfPVqq47upXbqOIO5choAx3lC64Xur3CrgjCz9mKi2os7g/cVr33B/DgSw
N398TQWTp6wcU7sVWCRJ77YIRok23oGvaw9BkgqC0XoTrMHXQnAw7C5w5Aub41373zbe7wPQoUYa
o8WAbV5fZcYzFmo6PZ1VQT/rkUe7Qh4VmGqb/cOcBIvBOc+vbqiTpxIb8Z3YmR7e8PvsXl/BccyP
C0w4vyqi6qjXmL2mh49q86LjSKtJs7NCebFj3lNQzBgOn3LsWsyILooAE3AAAA3sQZoxSeEPJlMC
CP/+tSqAAG81+kAHR7Ntnfq+BtCYKIQS7OKm2u3Fz1kf5gJZle0z17bh7w0IvxGRqDcz8miVaMKk
vGKQTznv/93IPFcRSeZoKSdpuwapRVVN91ZyzLIDVduuhbwXgSiJhuvMlPwMV+B0RTc2WJhdRm39
dFTFU0nx5ltdHw5/r6J3sC3kylGdIQC9Jp12mt7k18gCM+So8ESszBf7aEBZ6EaPLjGhjDIYBN1l
SqkD1pSwGSZMMIxBrqIzXqnfwYQMSlqcLigeTvPLC/pXf3OQZUlqSQ6KRXIQ5EMQ/ckCxY4wkf9C
FL95UOBR7BYwBBIX32p4HWiBzQGUNqBn7uA2zTtZwLXGSBHyECdmpTY6YaRQlliKn12CkPf0tIFs
xaVxU0HXDaPszB+9taVJb8csR/62QHM86ipTDA1nKuOVuT4j3LyfUeEfkuoS/CkdVs3JvAf5g/w5
x0WruI2rdx55i4avNG+xQsSK2gBIV8XiA2vTNn+7n3jsjtCuOxbi1v2+RQ20k3sahZwnekrSugot
fYrHrlMHYtkkAWvrGM8d2tvB1HVTvC3HjqC6otGBJfqQ96ABxdWGb8uhRdZOqkWjXShgt0jDXAq8
g4R/HSy8pv108MLq7UCmJ8G9ZOGmvYrGWI0tlRQk1zRMhYoucET/lab303Y9NxHi0pBmXO62C/B5
iIZJ25dD6yA7iv9koSZQo5RXuPc/idX/sqUqaFJLAODPTRilDttdMjVFbI/f61tWzZQsBZirxzg4
I8/oGI3pdWzxPO1eFt+AesKKMmZ/oDRYHik5g6GIJkAy7IQ30z1YAhdQzv0CIgDtFRobaEOCWtxf
DbiCKXo+iz70MxqZuzpcMnNM8+iUab590db1wxN5fbEomizdrajykPhNc1M/YUkHGNpQRtrClJaU
wWBOFBtPUw1aNUkyEpotVO7a6e14g0I6zQ1niusex7FrLTO8yzXffRfVVKr48YMgS62jUVhF4KNg
fN9kbXNw4DhxmojGDCwxaXMxLfXxm4LCG3orrRTzSDOJRoLyOyqLmFxdPaRElAlFc2eGkubL1kLx
HpEuRURYMkjHZu8FoG1kIxeZS3dJRG1KEXCizcm2PDj7EJNvOMTaB/LBh/T6/6/yHHM9fWHCVWPR
XyfAl9F+LtJ61aob1lDhAgCA0kYjqnk/anpqXZ1g3CYs2EvFltXkYNs3Z2HAhLPKuJTC43GdfvG8
Njzhxm6CC55e/IHZ7rf3Hr6LinWyZyOegnGH7BsV/FmlqSd0A2k6eJXdw9snY0c9BUMuRcSagAIW
vpmC/WgVhx+sGYf+91aSpHDwTH3+etjloCpF5XIxDSwS+P+vCwb4PSDVb6BKRkB9SCNHnl9J6/tB
PcMzb1sl69JAffjdAutQ/fpC2/GQiJwLyUMHncHKtjGcXN7i0LSQx7pPaA7BlaH0XFFtHV9AXQas
tYlDePge3J5GQXWYZyjtgTraRfUu70EaXg4fvkr0qaWBUFzPgEMJHmPmHt0w3C5PT7JZNB/0Figl
BmBFuhQB+yWLcH4OHQp2b7BUmmHz+OGsDYy54f84BPtveoA9O9y3vCiuQoinIDjpmEUoTl4DOi/J
xqd7i6d/6BqMpygEr4Mm9pnWpyotjcMSoogpYJ5zUv5gDJBDNnDu63n7hI9gH85Y2/Bdz6zIVZqY
O8KqM3MrrLn1U65NGPe43L+qitGSM1FZtc3H7etXLj9UfnA2iUSDN2eFtfuN3jDCVIqZQhfBvJd2
gpy6HsN8JAHPXj/CdATWgU1M6tdBfkyI7wsqBnVJuRpFee+XgVfweDgXRUzkl3SOJg2kHeJ52NX7
Hq9PUgc+5YOpxkCuM4SgBCss8qN1xoyBCpOuLCd0JeMWrVuiGg4+ax5D7TnGt+CJFvitQZkl0ngP
evJYWnFTrvyWcuPmBozClQyH1z2mxc6uy54hSG1lbCQkJsafPdJIhKdus1rTXfvocwMqUKqqcFe/
qIWi2IlSqYaYPUafThlMP4yclxQsGHwlwhugzkavOOFrPrXfzRWJN0dBQPzmPsRqoh5+PlAvlZ0q
SxEuj2wi11kCVW577xJ8L3aK3/K1MAiEOTqG+7ussgL+BvIZDUYfVMnuEb3G1doh9ywMJrRix/e3
ag2Qfk+KBbt+1HpwrMT8BP91ceijlMQmWO3W+psC6jrHtGrEQxgSrd94qfjmb318lel4T8lRl+Er
kzhJUFr0A2v5mcfEd5EtbV6Di5FgQn8bQVjEpfLYD8j69T16bQeRrHzHYG5QEQYOpFG+dww1R84l
xVgO2sDDuuo0Yf9nDyVXjpAmWfKrXE62p1JdPT0T9KikUSHVTaeIK4mn0ssNfB8n/Fy+pRoHstoG
QkCuhRq2cqh8chBgp2GaWtJ0atN9hpEiCCXQa5ILqYvmQfnRNyDQWjB66/hCpQazeplszFWVYy/D
G2AmuqkXo6c8C2XXrHiYIXNlj/ukF/MC4Y7MWmFMA8jVgXG5goH4SK7KJMzXmiCp5EX8vT4owVpz
Zqu9UnH8i9vduhRwUqaWzR7lI457QadXMT7+bQ2L0Iki65r5hbLDxCBdE4cz6yra4brdXfYwU6L+
3BxLalDhPf2Z6WWbaPnHc6YD+oPgQTayEKmjzB6ygzTXQbg2ABLuWBhxH1+ld6m4tGnHuHubhlwH
e7obbvO1b3jJ1Y23qRMQs04brABVf05z0/cUMA5NV+AdcIg0Km7ehD6w6mFQtMlTV0zK+fiDzuZ8
umdxEM+ieWUrzUHClFUR5DNJzihcE0D4LDC6SFgsYmO7PCjYjcIZza9h/II2rjei2Oy0z5hrY8dm
oCfIZWOiyzg0nb2/3tnRj+h84yna3l3WepZjbfLDz2H/6YrxR+T2dq/TXPs4cyrUiIHKONBx0A7K
6fpUl25twrwcTJvYaWBRT9sLyZdZV/fM+TZ+/SAL0WwWIVYp6fx0ihzdq8ZdxovXZ8Rv9T4tA6w9
L/xY8y+O9jFRnu+ymhHe7SWRb8kstzURABdphpWra7MYbyhn2J3lPeJZsCWy6NqwhTHQBc9caUrt
jBC4NMT/wtzZFoA2/WQjZULMfddynjIAB8GCcpmsMzPacwVE64Q2l6mVdAzkJVRUrLMuoSky3woU
CKuYlVcTPeFA5bOnMRJyvDxk8VRc1ims+Ac5Wwb5yHwdX0hdCjhVEy95TOp156PyTQsMQEChAXyH
wUJGRsQD6ndVLT3Dr5YWGr+g7O19L5HnkL0PDhdPl9z60aBNqY45yd9k9/1QlCGd+K7Kt8uCKyoR
RxThZ+EZiHWvhmEgDo21C+trQSvS0TpXCWXK5FO6iNCD/+Zm0yjFlKk+CmYnQX6QNcQdY3NBoA3R
OkWSYmC8x/+3tNwVfPcQW9GMag0iBuGpBug1M8AsVil8b/3aNXWa+sk90JGogBTXKukUbuReVR5a
kjR2fhOd3fiq7w9qA3FK7HfsrdAZpk85vr8z7incRcGCMHCU4YNSXTnR8y+Ff1ue0Pu0dYSjjyFI
wiQyV2L6M2oDbGNo7wj9vGVHKlW/QjQsgftiHmkNFcE7gvxjwjE9kSAub5AWA5X2+sAS4XFC/AiD
nPfBSxdMywLij6DPUx6/a+kwBa+5ftMD+PUbcsqqrCNn/c1kAOQrya2ro05EF4KM8XIavfxnTf4T
kNYLNr5h1Tud63zWqvdOpUCMcFw/wctebp+GRJAEnQR3nNxzv2o1eEtDq4oQG13q6uHJGRNS7Bh6
hQWwX1raPf/ptnz/KFDZzDW61Zbwa0CNM7RU8MEHCg4ofSrLL1FqlUBbB8MIaFWVpwjzr9zKHZR5
63TnRPGaDLvufBMku6wi4L+qzrlAG4J19CBh1O3HWEnrz2BGwNtWLcUYOb0Q0qNNtTBZ0q6HBbh5
QHn5xx3i/VQYT/aGpMenWGWcj41/y67LbQYjsKqlVLnJcVNpTiLIkJTaG1S7Trp9cFZWs4nFMIJN
kkW2dDsTj0DrJzRh8X1i/LXhm38/q7ITLiqwBqYPBM2NZXZoTjmgFgiizWDZqzBNT4WnbGkopgY2
JVfKfiaTh7gtuFj09Y2xRvmizxjt3+G/8XWKfjmXQAeBHjj91SZ8Oya7U0EAvr33j6YYAQd/RRtk
FaOXj/sWVLDFGIjRuJFWa/1Mkd53/k2Qh6dRAB+CcQnagdqa1t1LBluqPmtEHRaWuNaI3TqHMcAP
Ox+mIbGDLI1RAr0DmtBh8nZqQE66UrqXhosMK6FRZZ4cBGqLphhuE6+CG6XZQW7nPCwqqutwqrGg
LIk+Fgldy0KAzQZq/6MUdnUbQvACMdICx5SnDIOqhYGcqT2EL6T5sNij7klvvlKYX63hM7uLjdpB
vJA/6BWh/++BmAJLuk1VyOBGwAnsft1p6QjKaeRvpW+DUxiOtMGnT6OJwYpuRk1C4d5Sp7b1H6Zd
VmjXMzxgIvJ2YTdxxkqs+VfTCYnAV1wudat/mdUJRiLhO/IbuZVYaQutnZXACDor+fUsyWw9D29v
1xubZLNX1vE0Anbyo+shglhJzd50SAAD4LMLfz1hC381fw8OT471baHEhSVrq7af1mrji+yZxc/g
nFfBi/FAGQilZrlW5De02oxqZrkLHwpmgJJGrtEgt+/jLOTKTIZNGdcap7Vua1lb+Lw04LYT2dEo
4ldUERRDvEKOfdVMuoatHa4kiKNF+c0HfAA5A2n/fjVboif6WCQgz5wBbFkHKOqdQZBWubdtCqdB
hFVheMwhQAJwJ3fSbwFreiP1gAZ8AAAM9UGaUknhDyZTAgj//rUqgABtPm6Y+KgkAJEJzTQfHBCC
U9ABE15Dhy9TMh0hAhkywrj+1cUN1AHydCJKFP/DDtQPL0aHmgHTO5M9WG5bhTW0/BcCgQh4pyYp
VODfn+lJue9K7dbpNDjFpWzVzzaCS0t2S9Ir3kHqZGHAp9DJ42x5VczQzVY2WCu+xVuGqRsDD6vk
eNZZT4oDmXR0wkg4P5JFvf/3nouGNqJlycCIpJvdyr/ECX1CGzr1Ad7x4PTGlcq+LC7A/ZlVsMvI
U2NcLCAn/ZCgwVC8eGyScOlLl5RYl6K8jInkNELY/FzXMjWQIfI0ZjS+u80EzFYjY6hR01FiDq63
HYgONC6/PY/v9ZyBTA4YZhfx7+3JjJCAsU3qKKiFPsYwqLIqfP9vFtpbCCuWDfAYGj3seCZ6Zlw+
33MWKfk2W8MS1jMGl3/+hp0MXRe9mW/KPurVRGqMc2jMPZIwOJVenTN0IS4DVB7hrbd+Hqxy0iiD
JGmdBS7CQl0wUFECv2P2fQs0TLrV51l9boSf4gE73P3GzsvZKaP4ESrvW8FAwehAUXzJOcHwKtP4
X6+AIw7cCXwuIoNf0fTZuVEFg+oz9Gt2Gtvna9iFjsl16RTWNdx1QuG037XfDyOc4KosHGtQSPh4
oC82AZ+2rg59bVaPMe1tezFg23qTuXqGV7U/wmyyww6+YnCTUwSqJMM66AVjL5wJjLZDNvfeTIMd
sH6NH55jKs58AKKE3/7b1PO7MxAc05hcilVzcdItEHCJ+fJqRoLDixaonDJK140WBFc2CMFXSC3m
SAAMkqTZvvrQkB5MU5vijFd/+KBbDV5XihNSfdWPcqk8KRc3Z8DqNOUWGoWKcAe9j2sRJ4/VS+Qo
Qp3mMjrxMIRnS76YFwKM32SRS6FrSolznxIbXQhKjiV8BZwnQYITYl5haMLfgrQ4zBLwFiWor1Z1
2RmbK2EpFO9tggaaLEb9BjHCC5ADD0PSD44D488/kumquHg+iMuJyYfaZgEp8vBCXXiHEaEwUcrx
M+BJsn1Yu4G0ANbYKxGc6AhLgDxFsUIcIlly3mFSw3itFYEHNP08e/iwlQvt9KW+pi9o46LiujXq
N6ul7gs9R4iZTzRfVkhPP92ARc8S2QIYy3P7BaY39uLs5+Ot0jPr43QjDdH5mbPgp9JwHfjWE5d7
lQR4UFIzqK4NyFscTbs6aXi4wkyCI4pVTtLLVjhXXN0hh8ymT8JNfXW0t8JWRpQhFw22SJ4tWi3u
mTJX7u9ZFxeJc7ZfabYIlKY+JJ+zvMUQu1Bt9jcmDbZWF/UO/+09cv0ZL9ah6M7k6dSJVkojMoZv
4ulGDtdu4EwX1eSDyHd3SwNyfQxIcvtUp54IK5ghK3D/AnUDxWkUZ5RP8wWkiZcb3DgUdrmDC408
QKj4p4MsCNqb+6SOtvl8rSHji8E5l36h0EpaqioBM8SeK8hQKZ2WHAIunaylHk8heZp5Kh1saE2L
LK90Rbg27BV0bFH1AkYg7XG0iZ2U7unPpAPSsJjddNot33oZdzvD52bQxEE4kMh+kfWLCOxS/qSx
Rrm0DstC1yTXJTQfmP6Lx7C0FiM3zwANMtsRgDsv6uTiecJD0vxWMr+/bFLoFI2IIiZ7PHThRvrk
6gGuGwkj286yW0NhoL6EiJrOLCBW5gwHCIWRwwnqjWG6cD5pPZFjHPHTqsZnwBWwkiTeYzenBUn3
9i+loXsNMaaYNEZeRoQ2GPU1mcG5PyMzA7H6KBNO5ajpb+YQ6lIcWPNz8ccB177c1Lfx9DZxHtF5
knhMHgz0LbsSJNuAF/RJXyV8wLSkVC1y4LJ4LAfYhMOaCsM1wT0JgE5nmwWZDCol6D9beZPBLicT
N8GVAz0NHR6/fiaeT3gc1q4xmAJvgKxxtmmeL+X3FNHvtQCFAgFvTzl6kxotms7aBinmZS0pGYeE
xPseV/RX74IrF/Q/uNRYtRQTRiv58HaJ07Q/2+n5ADjl7uGUjglQeNfzSKlCj5+QampfdtZfgGLy
Ti4ScwqrLXT9xe617aNmywZTLvVRmwAgOgisv9omBzMzYz0PVOFunpWVA8uQ1srJuNbO5ToEJY2H
4y/qgYJp6vTFJYLJ3QRd62C9L6cUd6xVV4sRnFAvpR2xrozZJmRpekDhgfB961nJRUiNKkhDEzBO
Ye+Msf24jzh/Aa4emcAywW4jMDjpfh8F6w7Ls/yFbAi/5FwYV81TQPZisHj8bsVYuPMQOq6JbrTQ
KV3BZ/63CVPR/1hCsMhuSjPqqmp26qpEZy2Bht5V6z4A+4BLnkLkDNgoqpLJzDcCHU5ruGX64dt8
z50SqnnYb6TDb7GhcAa8LQjJKIxm/IgRJzblg0JNojocCiKKO+dRmh7HA/Cir0+uoHO0ufDyxpkC
9O+OZGzbkxnm1fO47XuKddiHryB/oQlyL+P9j4xRt6BoVG7PT7vbzxOZtMU40mTPCpE9/w2xR1BI
XQdpO6i3D8keI+XkaXvDlYK7ttuMA15XW5pmjV84dv1eQenG+YADh0dZlpNIWvLwGBEvj4dJkw98
Q8okeE/H3hPoEuePIB7FU1nulT5iVB97vMvYELv2LUVGVX2cAQncm1Kzix3/J7JCZRmrsj4GNTjG
pSZXanzAa+yhYBUHWVbHZnXFlPVfG//AMoNsmSB2lxwwxSnGmBov69e2AgYSxJhpqM2aoBE3TLpU
ZIaM1HGvEbMTgeCkgBhDOkEwlqDRvJQEfJLYAemk3aGhJaYheHfvlnW41HBO4+qy4bNKLTbnsG3H
fWgH3oMjiDUMRNeDIVVGwwEwVnAPIhtG7VCo7THLM1pnZ+noDfzHno6iR9iHfn8A0jaaQhfPDl7F
OLC/+TPESTtqxoYyT+13fnkrbdTHs5BYLidHnTQULRf1gCH69VbqCd9khKOB0NR/YpSjsx9ABrM9
COUrM+31lq77P5+B95msB7DVXsvDiS/QNsB3onNhkkw8gr82lIRjDYD44bk+pGabPU+x/tTE2qSV
fOR3cZSTpwckVYI/XzBJxWGB9BWIPlBR06l1b5Qo36SxvqUreB+zFjUpmJYHfQf1Cu3bsQwiACO5
o5F03EL/UzuOCD+nDqkLFBiXKGGHk8BFLHVdUMSnaoNKw84kJxuTy1+E5VliauwWYl/2809ZDgjX
JZtv3rjR/qGH6t9liqFgyqkLSlVw20dAZUVoq9TJuNhvo+fF73ZqKWSxUDJLYGI5Vivqy9xtuQ8F
6aRaZSKoqApplwnpUU9ZQWGwZHOhpyLHeZGRZvqJ+usCB69JmSUfiz1fFaTLnZuotQFH1WDsK0Cf
r7VgPaDVWjnOVzPG6hSx8ecEmxS5QLalPxUbpWc+0CW3jFlGT2X8ss05H/C7L0lFtEfyk+YfLfou
8/EW3xbaxV/0+e4ngVlrJNXZUcjdDNEFdBsQDKkwoPO8h3s/mAi2Ye1/SWu7/uE63aoXj9H11/Ft
ZsS7I8CE1JfkXMmDzOgfRJSzVz9zgrBAOl61cayOt1dtyw5HyfgppZWDHdw4gWmLB3+ndkAePwDt
lvWGG0O7/SeoRkRQMvhVnVrAAzwDyLlANMaz1Yc9rkFtrbxICt8JEd8wrc2AQTotdIQv9MadB07Z
Gc/dkArsT/FVnHdEFvM2K1/OzZNiA4Qns6snurvobCVdcuIkHyHN+OIvuFDG6uQsEQKMyUsJ38q2
Bh4ycbIwmiGAg6Jzo8rknK1Fx/bIEddImW5hxFRIjG2ZfSNrCUEETT5exmn2adECvXHAI9i+xZTV
YXz+CN7/fM2qziw0Cvs6rQ/ftUOrwEe07L5UPO84UnrwG7oWFGj99zXUVc4y/75nf4ySeJzcjUbR
rAiYZ6AesCAa2Myi0pfXIVftLQCB30gIPkNl3QZ8aM0OEcZQzVeZ3hSVkoNqibOO+fLpUpZ8CIBy
fd9ZMr4xurKDlu07L3wWo73TEKWPJ634kK4Acu2UKLrG781JUqt8J0uJCVpXxK50HoPQJDQ9d14b
wgS5mhGGWPedtj4tfYM8huBA6yJEt6BdrF0HS69C3DQKnUQKHluG/VhL+EqBIytidj0/OqM93Qm+
y/58+4kQqo/NDvunt4bcS1GQOyChUbgl9fCd0iOAAhCigJBOvHC6h/GCCY78rGepfQyzJJBIuYTO
CTCX5AjpUbfr2p7weI4HwbaVoANjah6nTS6HECu2qJ8k9TEVWZyX3jEF0eY/SkM84o/EZK5Y/2Uy
G4TVS52ErFgXUkgLMAlIC+Azei6y9JYzrF5jDVeTBo4DeSM7hXzdxYeH81GdNsyLi5ybZ3Sfd2xM
i0+gFTplWV+Osx9a3K0hXb5wBmNSi5hWZRXBo+pRnfWaO2X0xUzIYIKGly8j1sxQ4urBtxdE8I4g
VCvWhJ14Yl2Kju1zgNrDQNAAGeruDukRpmjoM6WOD5xFQAGVAAALq0Gac0nhDyZTAgj//rUqgABv
KStIAOikhxfKQbgXnwWw95EWoK/D591Q6O0LJLcn8IVXUbyfQZPybLSpZt+U/VGC5CRX5kTHiBS7
tfBhuDTaNFD/lDGUq6KfWQvH8usuXWo51DojxJLDG+mLbww4kNE2Qzm7LjkmnX6XHISMhArOJdsy
MKKEhfd46q9M2WvPF3AbaWrpgwL6PL9g3kptF2leInxsnbrEAsYUaMxD296rIBFfw2AwO6wtQgPC
LoxBwI49Wp63e/7K+AVo36l1Nruc2h4V7iiKcluDuuIfzEJ2p79CpXOCPvyGfPDhICRTUnhN83/W
7cFU2DIQE5WY0h5zY8/xPvcLWj3jnilfv5n3KUNcuc25UZwscSP0ps8Lh82uzmrOX9454MDv3rx5
VaKc/K+dQwLAWDplljEUEb6x9K7/a7iJPUKHvpRRQjQd/p8vrH+R6l6a+DK2NGKHGZj0MJKpcJLC
mSEKcifyrvqgC00dfw1br5hEKMpjTQyjem99A8SAfcnRce8SHPmVWCg+dwPaf+VCSP0PpsdAORnM
VcUePhZQGcyZIqrZKNM+dyiPu/OjeB0q0BCIkVjaDT0TGKVUSbV5VT5xTnRbwbZooBVpVeoKfLCn
zgHFG9OGXqlk4Wqdc+slSx5fBWs+495Wwis7Ar6TtkiaiLe44wqNvbPlZjIv6s8tTws5/8++tg8j
amd1Ue3+/QAw1J12BYQU3hIdxtgB0um0IbWchic2X9tiJVem9KOePi3LbiGMe51FG+p7HLTMNRwc
eAkINYMr9AwIgSEJxQ3df182KBAcMVPu19DgtAFgiHSV3znTN8S0+/KKR3Wd5mUFLoi6TT0kTVqe
M5HEJWzAVM52JZCKBCgEpGM7bp0WG9ZrwFNc4piO+YEykjPy5u+zfGQLxu6BLc2oVFjn62XTHRUy
JsyTkSwVCeH4h9YwKd/wv0gJo83Vb/UKVOAHpf/pmUeATBZpbmBlhr6fH3vdbw558KnBPs7se6+E
2xo71ikZu4jt+gbul36SEZzRTOuQscXwBJZFzPVDaQ5bT5mAVBCY+4u0JbgUSljlEdXzkh+k9Tj1
MHozMJhs15Ozx4JlXtgcgBHWBX7QbgY1pZ2Cwv4RMPKBBcV7NKC9udPsCzXzgRrBlF+tYJl/R1Yb
gZNNgqabD4x0DxSSu8p9jUGBmI910xC8dQ7z40E9rK/l/eaa59vEDuebaLhGeSl/dq7EASQqN9qM
Snzl0HegkYmD3/HxrxYU6PJxNaVStnoMlVc8bfjNwrLXVvieAd0K8tOldejm25rUl9wO8nX+4v9r
QjASGB2kHGnF6rsGN+br+KdhsnZYsZpiwDaW41Q3s1uVD+V2bnsSMhh9pATjHExQuEZVXw9g6wfr
+t47Xgxq5UO3cpY7m+K3vntAvIV0DUhKmRC+Sk1T5gY1L/sZW6WUV/kLIneNigj6VE9Y1tyQDRc+
kaQ3+ZYNyF6tuY/HSMG/XeC+nrCb623Y0YsLzgxmfh82s7dGgt+gYjGtfDFXd4GrWP/zwLjFckxP
0xdVLMJrLSJfCEuLUdeQvmdfDuQBBFKqwCSGKylg6qm7iwCPdaFYulpNKK/Qy5pizoIRGkMZkJQW
BsKEuwBXYhzjwUJ92gRbMtyZ/e6jLNjGRb+6s7SfdEwOnawNaPLVmEMncjo5uzOSND2UZAOq/jKB
MrcvZ7fMENBeNGhcKElSVXDI4fbbzTY/EdBv+kH/iUJleethvYtmgFp60iIsEM3xPnEMEvw5Y5Pm
F1MGESHok5pc6713I3ShoEo5u2kH0dEVRlcamHZM2Zi0PDRzKw4DA0w65EwF6hEuAUVintqD3xmS
MRRO0F5ESxFiO4nG6UbtgxE8CSBi53FRLs5Xo8Fh3SzDSDchIywEyGachIFw6blL9MV5n0mpbVaA
PNkcVceJHi2CqGio6NkYbJ3DLpCgz8PrcZ1qiqSUQXpo+MQ8xXHly4jxZdJHHdw2grLif/Y5e2Wr
ywLYkqG+G+AX9JMzKmFKeX0oih4m6YWmLsN9Demod80ZqrccbbGnfXSVUm34OzGBcpUm0r6kb0NQ
hhAPXqbh3CJCXDGs0j0ZjHr8WkCFp3FDUqfO0l24X29ZybL0MeYLQg47udpAa1ZHhOtquG9bGvuA
DF0LGcin9iefP3PAj9fMiR6twKF//YALpP51s8OhktEkUYiMCDQWgCi6EeqivLYAC5OEyg+E/Sm+
6rEpbQ7AQLNSz8ogAA9WOJvwhiikAe7JzgEUDczcU346H1jKcqxik1DrUzfj4F3o14K1Du2GfqPk
l9V8lC3OlC64hoUxkDGoSiQL0ee57GWaedRctmrvU0g3kTLAImk/bS+z8WaCyiq0OSTX07PPYe89
IOlXja0YfBXjzNlitcsFJHN5TWFcv2Gb031mgSEjY8Ojc806VNtYJvMCVdG2VJ0VXsQMVsXJ071F
/U7SULAltGmBW+TbhGWQ1zezOt/fXIkwuJkZfC07szeEGz73rqtumMOHRyGGMspQVo389TJawD+6
x/iUT5lEU3tsiyOii+DqXEB8DGXaSGDVt1A/lVSCmuexYBwVFNAIP3DBg4gRTio8WVDK25cy2o9k
6LKy0C72TBEOzU2tTVBYJP/K+q07xgNeJdUtPPhxN3Hsyj8QQxf4kPHbF6nTWhpUQGzwtsgu0NqS
meZOJlyyizMaxd3AiRIL+9wSicSUi/A7tHUj/KsyLNUy1cJYFwsr9BhC8WKJ77KPY/k7ogfO4aJX
+P2Fm1r+rl9ucvgRbicNYJ9sTwB/qPF2Ers8X6/xrRcUY5/NPsaqvI5zU+Po+xb39gIdIQFvVW4L
fGC+41Ilbl8C2FXOETAwbY4JHtOLJcru+qNLWjiLM4BviBH5K8Mz8HoS2Gxbr62hCMDioDqy7WkM
FX2TOO5SXld759nV6Oomon+5pWIQNmzM05bN0Ver8gQ827cC4oV6rZj8SMf2t8SpbRc/F8PQxgze
eev2mQps2xkl+KyCZJ1O/dgv8qBRBjWEG6jvxCBCP66hbHSG5O8BYtlVb8AuBh4+RqW2+zduJgCw
7AQ5aChu73oaTlUwdl017+23dWJ0jCTdORRAjJHhj/cK20ePOgrLSQRs8wXaDJkd7zBfPiQplqws
OFYeq765B0EMcxnWSAqPuNVyL3uRA9bs7HAnevzvAtPeJAQOkuaCPYHPr9UA/EKzdHvr++538qwu
ZO6Mk0rHlyq+ljABj0hHjzTN991yDYZY8fcQSu/5RcnweTsY6T/eRY3X/jZtRC0be/+31+T66sn1
mjdfW7xirHR4DOGsqsACV5rwt4Qj3BshvHzCUt2VNpE42YZF/xM57QqeCvTw0jekcRE39SoFVuPF
l5Z7bbxUgNt2oJ+tRkEI6+LFA95FdokJqKrzLY1cbIzzU4vKXFpNFd40KRZfA2krplt6J56s40Ye
29gMHbZBprmBH23AAArpDgNTa7MCfEytANDDlJgQ9AqRp/F8OM/wL2Jox3t9H7e9aOmrVYtGvK2X
1BxrRVrBtpThXoPt1j7Hlz+0dK/yYl/Phht6ybLycz3t3PDO2qc2qkcitIcYPIvxjrWAVVWkTUwP
P0QNtAFtIK5brplWo3T+V1kKUveKyGrZyyYwQN2jMUh17dFwn+zBGr9gG6UBzOywlQWtQqbpKoPX
9fVZ7C7T03iObEQaddOAF+vfWF2IfT1qxmR/pamXmQHqsCrlvYkWBEbd4Ue3Mpb9EjokOTu1tyzm
xVTi1ukyUkN5sII+XQPkoaH7l10J2IDfKyVHnhCgHBDoguStFyBtFTRyDd4b9cPTjc1GqeHxLthm
uPCocAncNnu7o6Sicbzc0mPlO9TBu0vZ/taH8Z4A/scmPf6bRsBCzFmeER3v1z38FBr0NmNG/Gwt
79+1tToeDy+tHax64rLYL30CgatHR5Kxh/ArqHJvVTDDKaWmIUeIk2cxzY1L3abkWSN0sC6oMIEC
3WQIABlQAAASr0GalEnhDyZTAgj//rUqgABvJpywA5aRmrVUqztH3MXz3TLpX9ea5PY5kwrMjS06
/9CdjLi1M1pSYY/21eN+Qp8FhWK89vAQl2fyvpNU78qFlkdTEljg4SjGvVvba8mlGMMbmni22C5N
ur/wBNYMMKZvq1NlkUgXnabzHAO9OfZCRB8/sO4WV81NsfPer2xepr37yFN3A7uCfoFxBmxeDqO/
h/sZ9TAHhaFCtFmMhiV3Bxah+RD8LiqgGrfs7nSqBBazgXyTi7M2os5OZCHweMo2/PMoN9HKMNdP
WTKzWphIJyjNRVu1/moglLIF0TLs6ptZzlmhpR2ZI10jVGLRQhDT/o6K7iHoglkPe3rpFRC6nbao
J2/mZoDxfwDIC+47iqr/M8874dMEHGROYpSWx2OZEGu6QjlDnjtE1VAmzH4KoKF1pqiV/gRFvejE
Rm9qGM9CooN14j03bNO15d0A1Ltzp1lMQb1kkE7jkmzd9EWqENeeG8QOwGm693z6Euq+NNwaul7F
6HL3Sjmee7hnpjsunkjm9h/Ckj+3Z3Ycn9RlwI7OUWlULeY6tT0kAu88+LL9eg2z2YKPnb5aOpUU
01zvbtGBEe0NI1edK79AHMV1CEZbVOcFuA5VILZLQujSjttoR3RxScG0a9hbfjYf7yu8UsPpiVTe
8nb++OcJEbDbyuqJAMjPRdgoRQkG5bwntWuu8K1k/Os2nbz+CiNS2aFQ6OT7uhYZXKXR8OnFVkM7
7O0m7T9phE2RxCYvvPRJsLpaXAfeD3P1iXRBSAsZewkxZn7FJaoCuvTIRtoeNdjPIP0BYWHq/pbj
td5BmNJTkNOu8U/NBJiJB7S9oPduyLeocRFP/jTI2N2FyJyROvHMYIFHDVyKFJzQdPRV23WseKyS
DN4e9KgPAqMPecPuAeLuCnfWN0VCAKQzqgYcNp/dULdOIKQMzaYkzoBrNd5wKO85WNjFPT3Icehx
m4IGCUGGnNuxR7KwezD/wPzP80U5t5sIKM88hOeNGLtBIyX3KZEEedvBFNBCziW9Ky6NE28TsLKJ
1exkON+v+blK+PI3PI5QbKetOzXAlwhOviAG/2P6gEO7z9kd5jYzWSIGLLxAq1Rn7DeDVInIbpJ8
18Dq/D59TIjBQmZYyhCsEPzJJaxlz27d4WGum50jpa43BaK6h2IPP+TT4DILgzwp0QYwQXPwmAxl
f/10JheSVzUqEnSdAPYXCLP6JAkT7DPHiwjbCBN0zrVWaDJ4utZ6HP+Tgz4ok2fTFTli0ST5wJ23
hhitTMCAeHK7XmS3pSKcwgrsLGTkFZb81R+ANLFo/jT5l5p9p2uy/BeaAynSvOLJVoAET65rrDGG
xGQKL3O3Pd1RLAgWJkk2mJEGrXeRcFi4R0iDLlDmIDAcaXMXDCCRFnhtWv/a6Oxy8LnxJDg1Omcm
G5AMiBGNSlMATkAWbSA2jqczZUmCnrdRPNz30zzRWnJNS/xaaTZiB0eEH46j2xtHmh1iBTgdEdrm
8bl9j4gWs/oQQUiWyCX+qt4o7asgKWaF1wb7iwy9jcFe/LszWLBpqrp8AEjn2tKjdXb0rZntGDeG
j3U7kQZ1mjj0liqSgbcpI8FF5W3lGm/Ho0g/8pTgA2DyuZ+En5pVk9WItIDGYGKYcNO8OFWjMX23
c5dyayrIHg/BUfYNFpnmc8duyNI+B04Z579eeP51efpa49TNO7uvg5iCdcX7VYbX3g0Cx/b9prE2
92VC5TqVm02GYsKmmrnwkHqWoKF7SMd1SvHTatMVLSJTtHsG17RvfH9aBww/ozNzMIWPl7853qDD
fV9jUugfJw1qjF6gF/EXibH/URf3Wn8MynunXuyLkspAK3qoOjYK94qQoQhha7XqymxsAADfk6vH
PDDs3/JuMsScyUYRXmayZ9TYLSnXbKTioLudiHr+iZIjJvEGCPevR0svU02SXQAxoImUWwuIn6jd
PR9vFHrhMET0hgONyhZsQrT1XkZ/e9CcxROvD2xGcvyAbbl4EXLx6XbC2MHqQOLp6Fe7RGMCstxi
fN67XnTIUQwUtwBgPTQlNoFvjPdMvmUD8O9B6BQzE5ugFInNBqMYAKeTyTEbHssyKvU907MF3YyZ
XW+c71tkoR2rEydJVr3exILXz54HcaYWH1FPu+yhA7mwTN7RsYr347mI81UrzfGZSowoxvYCvtPd
8DJpNfqemlj5qs+a4tG3KLtIaKzbLUlqxXxSDVJPWtYhEPLymTghsM59yKfC3Km3fefJiQPlAc9B
T17m4mZq8hE/wXUgECte98TqKcaL+lGZVM96yJira5Vs46uxTjBRDokMEEX0cU4u6HuWdB2PtRZ5
oDkgNd5NI1sa4JYak7U1ENFT4N/2YLwpNkopcCpQJSzka0TJSnUS8WdgAtcCZEoqOv6hrIgn71q9
1dVzcu+xXHI2Dmys/g1Ts7oGsoY7zSHJXiE+ugM5t9LF+Cd13lF4Hs3pv+bBx6Y3/uBjrSR1bTK+
7PyMzF1/8bSRkNyI0bOATKbrwHf9QAM4DdTQAW1K0dy+bYuAlXc3fBYCcsAtfM6hNR0PWccGvEqJ
fU27xPI0/+/RmppnN1Ur5NqA2sY7KjfZ662ZKCEx4lR96NmKGuFw0EoXPvR7HaJcz81jcXth3Wx2
3DbWrmYHBA4O4Exnl1F0Zsi8sdpjoqTEsINbXK22v8ab4tTa3I/HMg8xbaKHHN7I3gMQQU1cl9+R
23dwjBFn01fHXiGl+Q7NQbWUeijxaty66At1wVqTB+6toPx/b9F0+WPjyd/pfm46BDD/2BGtmCGz
wdDiTZm75JahuqBUVEDNIL0acG6gsCk6uwYe36kVP9OFeE0SU+XrrstH/muf5dG3mhxmGZkh+mPS
psb6udIdUIfH1S53xMfjWeeNJWvNM1qzDXmRD3EDSDw49VgMW0gxQ+mdp7NiL42ZPNypTKDar7Fp
iefa+fmFP3vdt9nJaVEhRAn7dAMcG8lyXi+yftsnzVX+7a2Exx2vJqQOwy+6k3WgrWh9ahdssYF/
o2kWZ+7Z1ce4OkIpbrsYYr0m5TzblZaMh2rpYMZG0/fMC0t3YhSoAX/YkPsA+7YMNAgSWsJbXc9m
KkatbQLwzMhyLyvbOAJSevn9Jzu79ckVr/8XN7079e9+ltw6G8LLal7ptw6F//1CodpB6GlL4T/R
/1phoRDNbmzB0HJ8nSqb1+PP7XtgIwqMYFO2ilMN98LgG1PaZI+53pwmc1rKjeKlW2usqPo9SiD9
u08Q0tK2Z0ttG8wzpSwvsCDVkhDeKLJ00ew7wL9LIypwVfpaPnseMwIGkjr71vrJNEpYVdn/gmFb
nQshBBMLisNEDfT3Za4gB5TnNOt36IrTUtj8fo6W2ojndmS2m7C96VgrxkguPDBC73lXRIpAW9A8
CAooN9dc/XgCG+jLT0DnWZxSYLo2qp5r5EuD9EZ52PY0tuyDENj8fNe6bukjeZUCEUhM+yW18vDg
iILBTUdJOMOyGcrCtfgUhNaXRhT6C7VwzXtKkH2nXs0oPpSwuxOdgt38LIDmL5PhfM2/h5wXRVJZ
xonkKwpxJVuJQCS3ZpFGZveo/pP4Cc8w9YFFvksdbGMkuBORN3U8M9Q/CG9AgGkO3o9QeLpiSMwY
8jqOalqEsSD3/6CL+PXGMDX7gzPkbQVRasr3sQfPHfV7qq83/zWxgDYk+Wc+k4r3ksRT7JSR/r/a
I/5oabue6JtH96RIYEeGDsqTlQN48doUR8Ja1qRM/090HpJeJK1qZilkwRQQOUWWuTV2yDJ8ofhC
sXm3+qPFllSE8hRyTo092q81ZjX0Ngiws/WtOxBNb2bC0J6F7LwNxOI1s4bKx9rRc7IlNxrO4RCE
M2NP2foXSw2Wjs4Tdoa8QZLoFGWU/k7BvIW8otqLqxcR75apfnwk2ora/NWr+8/d43+vsceWGcP3
GJ5D4i6tZoCQMWM81wwBLwadi3a9cbEQiqgd1aSiqlQFa+PSdya7CCQfG6C/Iudjmhqvx3pQh3CG
w+psrIAMt3bvNaPMpsRVQPGfmfkGgJByQ1GBh0/vbRMqzD4i31zClVFrlTza5RzKyh6YusOvOZg0
R6Dsad/DCF6c4ph7tBx7mc3nco6LwAC851MREAlwhqlo1AI5+GVL2fRI1/qC9jPGPcZMYwQuU0xS
c3g0sgU1E2mI2KzF6RaTHiXdT+Nx/r2UdNAJpaTKB7dg3sp8JB9A7UxgBdxjqVBJTi9fcNLPsXKA
Hec7lIb4TrA2q7sbxN891s2p4TyNXRC5S6oQzaCirOhhpEh0OcaZPEB+vn5j+TysATR4rY75LCK7
dp+olHd6H6efkE8bMZHe+lZH+cTeZ+vb5Zgwa10Q9lxkoupp5UZwvdviFFBu/atkDDSQBUc3BYvD
198N2ALKYy5ScNBVm5tohhWhIAAuQMwica+961vYMA85ZGGiFzKwV7X50hGulT4ojzfI1wYKD0cN
jS5hBloAZmidSkxO/ewagBiqWluM5hFBoYeRRLLTVD7IvUxaMWLkmoZVqpzsd5Ehg2IBunfzm440
9dTMpWNMqI1P3TA0thDjl1QyHD8SOngToNz146y2iQIcCGiXKwl8rQiuG7QeFUnqAIZL862ZOi7f
+lEq5V2F4YitBLb/I7uDey4fsd/r0+udhYCkCOVFBgt+kBs4VgvI023QNaMUas560CzeED8gaXWD
W9OjoHxpgb2hzl/CnGn9xiejvO3GZ0zhUxHhbZPSw+ohpiEvCXkN7eOip3KYzVtGqD1Szw/jeok+
vWZfQVtmUU9d4Ez9vOQTExa5pn3qURUAETlltSqLK2L4HhudLF6U/ImSS5BJ2hSojX4HAx9vhDW9
9BK99K53q1zjUeGKiEqJMw8Fj2W4kDl3FY4KtVmIlpK0jbCOyZS/FD7vQh90S7cjNumrPDQnQ25n
Q6aOIWK4Y4itIdXiyFXWTpkZ+HNWLiir6q2Ix/KlUJn3fEryYQwndYxCzHhAqJ6SwmZNYHoq/mQA
aIHvZ4meUiqTl3MQspbhDrOX9BWD/8qWXpNaAOjjTCi4hhLF6BQ5sN0na320KbW37jl1hUHUJAga
3qwvoExWrwdmnwtaxitzcKCOBMnEkMDdLvj96fkPKUTnPh9EUhH6akH5BA2BaksXaUr4IpCqHqNg
0KtpJ/vvy2PSAfpNjnJlIkJP9d/BJP/hh8AhZa2J66A4rvatKEfwFmUjeOfUAWxa5B/a7IfiAoq3
kQOiGTRnUT1sXo5tOz9JRS0Wuk20+AukPd3GpAAUeFggw7lbRCaR9MK6zXBM3mW952QFAUgWa3wR
BYpMiitGBuj0qmcB9OtdaZD3UV/fzmLw70yukwGcHfzlbyBci5NP8r7uQZ2179sqPODj2S+5WrlE
xPv2hK5paxVArBpQBcSO5E91FhSObhMJpUhrvClDtCKexlMEIuPaI9ksj+qrheQ2KjPkfseOGSRQ
0YXDYB+dNLYE86M+U12haXyafU2RoqrWr6LAk+Js3WCrWgsodF3Gdp9p23zKz95URMbUT4uTzdRG
P9EEboMM+TRI/DR1gF1/fnNpsjaKItOSeDbhH4/0s8/DcbVzGRt8xT8nj3wa2Hpibch553j+EoTl
PRLQTW+6SpuzudvnryYcaKsXtgX09EKYYrEf0HkbFhXkqdm/gEPOW0lEbYDHOBOgx5PSp5JioCFD
5bil6S62BCBim1+7MsqcDAwaSxfwp3b/m3NLIDfI8t2JFcgxxPiQ8CW5QGlxhN8hTThpWI+g6mdk
eN/mmK+WlT7GN3s9UDq37bRvH3IWhVHHN/4kGhhiAYdajjH6Rzws1Jl60nWX45/87Ecs4o3aMAtG
j6dDYxj+pZjBz5WeD8SfuTj8jwn5Xv5pEJrcpxBtVzHeTlIt333YzGLW7jC9q/AYiU2f5mrGoTdi
CLkqWNGilBgYgbSCQ4+osDU1JystjeyvPhWcSwC+7uYWBLwhaTcYqzwIOPAw/unygAwJu5z1Sdj0
yE0l1a6+RHZ8te3WZd1ni2hRFf9K2g/AdEE+iVNJhoy8lHn5n5aO4pJuebrdIkJ1BbacsseYtefx
qoVC6yuI7rW4hIl6a9JEXcSTkG5bbjyXx7s3aKwdtiBMhtslQuTeFoFIXmwDft46QWVvjaipRw5/
yC63ikrV5IAUtSby3++HsdTvA//QffFCeCCloTq0ztitqcfVlxYH1zVHPL1Bh/Edynf6zIJn9Y2w
1iAOwtobXAt+fxl/oEUREGFPNWeyiCPHcNM0y1+/nAdZWtQtRUvM2ZCFnde22Fkuotb93zyNLTwg
yqi/Hp4qE0+3gDhuBNwxAAfszSEE97dvayc+uOF5k4P+XNYdmyjI3+Po0bYXdcpxlOe2vB7+nRXV
PRWAbMAAAA62QZq1SeEPJlMCCP/+tSqAAG81+kAHRI+6wy21MTMb2wO88NIbnf6hWtzOVHsvpUR5
DcxX4FDQ1lEnxRGK2JuZNKeZR3oYuHmcLLZsB3A2NwgtfdsO/Wrh9gPPRxt+7QGL0vhWv5xAU8VB
9shdrKQ9VCukLPp/0jiOC37xTd4hneNTSvV1uxdGt5j6OwPpA5qPKu6Up8hyq0IC6y2GES5UQT5l
CEdCPGs13ZN2yP6UL+WD1KxQqknW7xmqjNT6scfPlUvjhAfZ3zqWoQHOLwhsy+2iNUWJsHYh7OmD
AOs4A1aYzGlB9cliEeOL9HIVb3D63t/gpmFGOA46nWRIV5JTc/kCiH9huEkx+HVc3cZ8BEgjRZ+j
RxsVW+BdSPFsFZy6EYxxq/LM2hX1vQTopM2yotWHo7iSzjopi7rR798y1GzV+0nwneR8xg2dq4nL
y0IQYS/b83FX+0CUPwEvVjKW9U4N2AdaWyKAhReZsCZdKr/rDzm6/si3yf33hCI/NSpTmNxp93zz
AC8tgkfdFWbMt8IhZGmHFzG8jXc1hOlI+XGKZi2d82M7jxwuui/6Qt16IQB/eCSOfhpmyX15J76s
V2Lbgyv0NcDSTOW1iNcGH0C/T8Phg4S7zV2DBjQrehEN3w4R2SkVwQFtQPGYdlVxLx4NaTkYo7wu
sHEPC9NMeAOsTWjMcBeBZ/qiA3XrzSfymaruEs9AVdJBHKkl9pdWrgQudd39rLA224N+eDKXGspP
nzE189Y/hlYKXBOMbmoe2AgOAqMJqaKRHBLK/exMpUlKPHoVOWcWNZ2CUs1K+WX68Zv3FajNFnxF
KYPIOTkxAb149s2TZnGwsO7Yr/UQYWLQinlN549Nrr5zawSzLWtq/S2gBp/lIpbk85lQ1PsQJufi
y3GbJhd9PeswnZtSilp4CNIdosBx884ngwA8V/evzcs6CdxqcBahyw8k1S3umU5faYdgaztnt904
7iW1GAfa6FsORmS7SXUIKQhS0WqNikHGuOdjBJJVKc/0ngDgOAlHa7bITWHO72i/3f2u0opjtDYP
/INUFl73+HSJukrggVROugrIyJkMzQryy0ITWxGlyEq3wv3WPO5/L+LPxBupvGE/pcpQA+bSIops
QyqniMfPL/V1Mpiz9e0ZomF6/W0WOzKWCL/SLlxUxFLaJsbjz16fmVVRR1Wxo3cz03jXjxafwXWW
IT4AVKVIEFeAp/YRKs/v+wf/9QpdatvOhUKfCM04sDifmFphkI/v7ifaWWfWatm6WbcDe26qnNrs
qHgmRYj534OQz/OUpkFIhXXTzFuADkEfnDj5sSGtnqt1Tebx8FaMUxfy4YW2HSwkio5uerUdZXHy
ScovKTEuAOXsxtLxsGzNaO1EJwudoTbA1XDNoTC937RARnjeTXr2fYKgtTyYV2G3RcAkSs9vOv3B
L78AAErTjh6OXgs3Vdz8FuEN0xuxAUQGOOhk/mgB5ICPF08ufn6IffB19AL9X2fFMjVgPjU7eH+C
8wOEN1CGLH/JiFZA1JKpmiZ7137DqfOr+NupEt6GmHUb+s0bUzbLRthTKtsqVeSvupCDSN1qOuFr
1cAF63eT3ecZrbbzhIibmYG1UKgr4c8Ap3kF3h9AH5fguFpPQettO07a235E2ObnJLUyk+mxKvt8
/KNNvn17rX6D+GHsSJEhezSWIymI2OVmfLUU+QWxGlSWpFTCfhMD1VW77eOpy2Ug6fOtkFjU/c3F
Un98xL1aXqKYg7JSyTxQxWICW2x18H2HLyzTD8KSbItsNSmhvtKyffoVi2oyd+zOzpe1quq8uaEh
f2YPibVofGOlzknd2XXHEJFh513xGlKd7OurP5lhez7+5wuS4jX90Fc/IVL6cNESBSqqvH/Q/Daa
NajJw7dCbKK/fuN8c8nAQHo7YqT11ZxvHX5+/YTIi7Dgq0c68ktfX7bS2a905Z9F2HsGpKlNJF/b
6rMZPopCEadN3OGgPGmVDo2pXh/BDC6ULUZwQ/5PpiH+FfyGWZ3TCkypwybCdA5Q7vSH3QTqIQlE
v7vBR3vp6HSd94VjECEumObndqRprDlAOypJ7/p2LLaeafiICOU5/QyLEZDddUvX6G8OI/J33k3w
EHnP+9BYicsOMBNXw7NVfQn1vqPQo3Y+lpOdpCSu5ZZa/dugX9UaWzjztrDXYD5p8rA66gpS0Byi
bIt8+53VhZNn83OjpKkJRt4ACrHOp9Dc7zqc8xb48cZC/69drKflaovxk9xCSELRujcQILP2QyGM
8j7lk0CdDdmkdTxPogfPP/TB8ZMLi4T6CqFPRgtAq7ac+UacJMKP+7WwCaNWsHWCrI/h/l2hiQAz
TB5uV+/9hH2UB6aIJJ/oqO7OmxnqQ/EiZ1nshv/ig+dlGprhfzkkyLDEp6vss0ispjvN6e22ZUaC
bLaRMZLZoCZDv4KZCMr8rZ5foaCWY8/5YlzPG6CeZjJGQyuslPOSRU/7DIkhFC8XUyorOT9OO6zr
VpoX1hDTaC8M0srqDXRYtzNIYBwvpUHMO5LwMazLq6GDpomI3IHYL5HBe0fYgcJpweYH3KUYhGIP
Tz6hpAipyFN7zzpo8ZMSboz+ppM66Xif9vwiYtKjVmz/SZQCCGj594s2pQuyph31KwUS+jqEgC6j
F2bqqdB1Udu7zBDT8+vIwIziknEPTyTcE/XcOLbrxHsWV81y8gY8yNL2bajNTcbupcbZ2WDTsSG2
FnJEAAADAA1j94J0IDdyFLNotvSwLQIXcfNN4mUpnNXHzgQf6I9pynPd274Ub84Oyb4JWfesPs4j
vehy5sc+Q78lvT7KqxoHZKvyhaOE/8sKTSbNUQLxYzJ1piggS+L7RiUmQBC12CoDsBXIA+cJ/nkA
2diNMKkhAYpH66sPNd4bu5KI2+qz9nWlXImgnFKjbGF7vy5Xm9xnSWt4lIFq9CJngeDnMatO4J97
uI6ajhBgnvs01vk7Z6NTgjXz6ufZfunULqT327HMwPp6zUPyEjJ+0IKKlHCbMSisLRAAfFoVhtyw
7amCrDi2kdCBgMq3QqeGknXky728p7t+qLmglb9FLQppkaWSysh5aW+N2yd6F3oD28iWnMCet4Jo
i2xpMAm7aZ2Qhn5OFl/CxA+PG16P4Flofox0ZxmsXt7TqqWIo59/d4b9q7Uy9TiLX/339epDoyFj
c9xrrepeILyJlCvsLK1g6RGQvblpL+PordIMcRo97jDBiGMrQqJdwX7WN+pGFBgc80NgANlJZGh5
t/Esa/7uR0pUKlE130HKP1A/IdMZmleqEGeYWEytk5GPJVL+kS+GPsMBo6yulHNfgXC8XQXZdpJH
SSoUk+V+TYaaxTqS6BdktcToi6y8rzUC51d4GVrtKkuSD2iHSB6uZJEwVVfDgwdx2Gms+mK57thw
qGHhNW8ENPBB/x/QP8fEUHGfvTA71qm45+OL5zK7qf1phPnUzhvTGm1CzJn+KLuWqk06QlIf058g
hy0BoDEuuEj67XXAq1nqfcGVeQk2Gb0jfRwm9+vnAVDU5ou4rfn5IPNqLkzR77Qa5wpYyMVFld+D
yOw64s36mZPUuxf6IvsLArMFp2s57KnKtugLztwKyQR8M3c9619ubLejCSG+XQgVwHbrMtOMw/No
zJ62HDClgEfit7j908K1VwO7oWbpo1oNTjxaTCpIWrz4TLfqctpt9oqFb6LbLGFvhAtSVmSP6Nly
r1bpByHsNfnQLBFGJ97PcuvfMBkKIRGPDnkPZJ1UIiE45J509HyOMALSrSC2lUCqz76pnuEXkWBW
1UWYpFQ0oSzAqgQFo9yAuJeJUaISwBcuA7R/s6KmlWUkMIo7bLTe1hUCA8GgxKcizCYbeHrHaIV1
ZXhKcurbI9vBSWM5kXLhyqQUvj5cbjOf56osADj9PgAKLt/hsR7gahJHyyqb1bGms1pnyMvZkNGh
w8AtyqQGPdWhFS+H2Gb8X0hJx+1vNzg+LDPK/wCG/8COHr+Q0PmoOi0+5pGtvKCNKQqy83MQPht/
sNzCadTVriWXNG26g7ABGWeKSVf2L2sQk8LdUq/4AJ1LzQllorRKvsHu59gwFgde2lAzIP6oslk0
h3Kh4VS8l/TF63ixZ9Dh/IhFxFW3ONeR+enJ32KpJR7IWjGnjvsn9ebLXU312NOhJJ82Z7ZWNXeh
vG/Z9g35JjuQiSp5L9caHHCjBzIgYIvTeeFJED570mSTHDh49ALjlSNv4BEcMTTbME65e/thfWYo
XbBYMicrHlWFEx3mWuMZvsHRjaKsAHqjXDdJL4GfpvhAHh08h+W2S6OpKSvyNJoC0ZlDpnsqm1UV
scoKkisUfzwj1bmr7sU3le2Pa9JlA6Is6+0NaNEcp8TMfN047SfimawQ5DbMdg+ohFuXAh/O1O5w
TCUj9llDpvvCU82SUQATczy9K5n5Nfr28SxLZhg/a1llEum9S9rHYSmsFeBe9idneN05WeY5F8P+
0kaH3o64/8wbYdTdqlD0xLaRbRU9so6syRIqvclkWRh8IhFg40nu3k9Cab6ySIP/yTeE4HCk2PKh
xB90i42jYouWB9a/WHeV96yizfM6n/w1I2UUDDNajkfjME0nD6xd8PvHZLx96CfQtawXCL1WHTd0
pfvEYjnDIfDoCcTJpF8c6XRXyrqK8leg2fbQtPBT8o5iADtEwcUbqux+EBuCH8vQF+j+Un/+fFow
GqpeKgVS2BAJz9yRg9ToX8LNSqAJCwLzbRTD+WfS/i59cENnOKXJysHYqq57Uvsl4fDYM40e+T7l
5XLeZNEys/46J9Ix3kvYyi0yp74uBtwniyudM+kJBxVcJPXUKK4NKF8YQWb0V5S8QNuSTIpintR6
JODF8mzXXpAXtnU33AGoXBvVsA5bBBOSUgAcgyD2H8yRkC2tmrbFd5NpfglpMV73CknknhdXlbS/
UWJIdYrTyTqHM7OWxrhtNim1v3mXIdOFw3gAEdTlxTLBHPeqwqHallyRDHTcDC7srOCHvAd41xkx
bQ2eEcWAT3zfmsQScQAADPJBmtZJ4Q8mUwII//61KoAAZ6bT/EAGOy4a4980OjHvQrSwPcaYLPKq
s0mU68e++RqZa1706g4xZWsanFLeupHLfQd0698PdFkwMX7EQHeCGUFGH7o2eiOGYPdCY7qH/nn3
Ry5N/9A1qhq4U/thMLOuZjlDJg5zvD9koAYXKwMwzP4Q524wWLnlmGNi6OWFzSjy7GAQCdk7DqMd
YIlBj8kSWq/FQl+dbbvXVNYcSVHTwYA/5M6LsCdzAW1jVWOtB7klmCriJTNsGhR1s2xq7NwYsji+
RjICdOiHftW1hyp0iz4y+08+ll7pe8/xMTT5UZuuIUJHMO4FfOsXKnsdMIZLH66Y61A0ce/dW79c
2P4p1aG+9ut05jqfWSS7vi4QzG+aV9BNrS5/J/GizkrBpiRgVAW4hO//VB9uHE1OjTr4WORg4CT6
+22mL0n1ShA08Kf6HtaPtoKl8Bz9uI0Pfy7B5LIktkKwTYYvQ+QZR/3YajFUEyyVE2pOsni7tdq2
92//BMkBRKoiPCg0kgSQRv23cqC2kDBsm6p+TbugoXIfv5DiIZ3R+4ahSnx8/cPwEW4GnFGksEO4
EXKr4UhcEmkcRjUT0z0aHOuislNIxBC+byUUQdbnMQY/DppbNXGjSxThXH+gRcx5Jeb3VOEjeqU3
RA+2flQOORvJ8rd8roJJZITjEFMvWtfOsL+NLjQ1bMTjoWJrwoPmlBy3KZPLZtCS0hRjOeLCKAX2
lodchzGz0u1imFLyu7nxCbPbobgNwqds6GydU/O4EHOiJ5+lvDMX8L8VGB1fWNwP5sFENO0rbXJm
l6AfCEHenGHnIOpsJ94ccL+fQQFidxrJN0axN2VV2fHiZvdhAdZCY7Cl59f+b2RT+4S3IaRyXNyZ
IoJfxRmq7k3EEbxTh+ndKFKEdCX3+HsBFdJ6PzD5kyg+eUG7Zs/3yhibPydcaXwRSi2Kiajic3b4
9VTCncbM47XWa6KITv2D+hPkKyWbcxL/jvM01adNsAUYwJyNjaNJq6usV2OZrZVLToEDSvdKsj2R
3GpTv2/lMbM7//9c54Fn+SGeWAINdQAoHSVWWOk7W6YeqgZJAS7ZzSRFIE2hGBY/J4We2iFv0T4l
VyPLwnGiwtovo1bCBKY/WjcgyznwGXs2KzX4my7G1aDTHVH+zUG/7Klr4aq1sFacubbpNR0Wq4wr
sE9lJyP7m/3Tbx8uqMpwcOWzVNI1wyca0R6hihhKcZHkwHHy79ivHxQJll+0WLrhZBSbZOvcNk+2
n5z1yK2E7gsbQOLzTVjQxtUEWNtRYr4ZXghJDcdxf3Db8BKC/9xgQEYK3IeNtdDtWzE/eSHmHRzN
dO8A08yYowOBLoRAmwFtQBGy9D4Lr4rmgotqklaeER5C4mEbWON+n3rxV4usRKKZL7+OUf4BAekv
ol0rQorWbxvA0TlecAE+axVyXi9VKDJuYPGBkDThx8n9Q7hu54zZNyUXrynVVV652Mrj9bx9xV/k
CaaKc8wDkePx9ogsCsrWh17frYwenPeUTPdbxjWuuQxmxAVt/F4G9wwUW07uOOekHHZrIq7SMfOO
J9ANgNG5fR525lI3+/1zveRaT46j0TyZYm9D3M6crvr1MuZXpDg6cFmbInSAF4AhCGK7KMzqEkpM
HRzN9Y3eimKvnnSw8cvuS9ggrQkSEwXE3YxxoBXE49+uvEdUNT40kH0OiBms4Am71FIsdINvKhQZ
UpPzj5C5RcJaYPStoq6NVCWVayqY1C8ML7ndCMyEKhj4IWNxs2jQ/pskrmwCB4wr3Vu2/LdGBwhY
ph//1rnug/5Ez7DI71HWKvwnEGRE7X5DCE55kvbTRDy1nd7e5nZOSQeEussZVix5R59G5lCpZB0G
agkqSpC9MEeiNNGRg9pHyRtD7oqLCPk+VjxH8A3gzCJOHdTEtAsYRkgcfxwkcuJLxQXRFkm3HYjf
1moBZdIdjo8QzjgjS4taPsldS8xaRtXyTHIjK/JjL3fJfeOHchD0ulovvqiF6LyIpjRG01cXR5zW
87b6CspcP8w0zzFUsVWkqifLVdcwa9le7q0sBcC5V4jYTt4XduP+b/8Y4HMTcEjNesi/fwcYGQJH
ySdQbwB9cYz5t+uCwkckikozvW/1CpbTeZ22E/F0XsLwO65r+EVb3eSBrsOR6SA+vueLu4gDlfys
TPD35CWyk1ocP//ysAqj2Hch9QvUhI9hZryT6h67AmMjqxd96z5aHP6JPppJd36MrQXBLL53n3gc
dtk2F3ryT60dJlmsQRhn0sax2kRW2d5GScJY+W4ggXUoEy2Yht3jC1v8di/syInHo8IDIfNLSd39
G2q5UxolCybph1ZkwJwqHiHeJ/5XyGzVDfj7wemmtFb9A/bq5mKXGkku/8swbqGBpdle0LfvsLwx
R/kmgcMN0igf/Ijw2oNVLd+xFWvWIIGX6BZbvHzgmPvcHCe5WhubPRypmR/qqKd/LFdylJz0uHbT
ChtDHnokhh5dVhATE1AmBmZttprCT7fUkV8ufj0ukBCv9Ahih5XwkLnBhBbylWeNQt6zEqRJVqjY
huJbfw2qvxtYcfDUh7E2K/pbux7MlWcGBu1AY+mJkGU4c5swkXEcdMu/+KIfdUjw+06k8FBOl4Fu
2ZuzR9u84ziC8/6P1kUs0yviFAwySzf4z2eeYFp88mHvow1aS55cqa9+DhWZZGkC63K74HCzQWOq
mVoZNCCmhfOlZrX1Xs8lIbchMwmhFLe4qhYZtHl5NYDMeqjMtnc1w80XCeTbHTFkum1CgP5r0qlH
T/GwB5x7huRHIePrYi209Os5i4k8HJ4FYpkg4qxF2TeYQKXx/Mo4YpT87qKsMf5i9OEDCmlnmEKC
gZoN+cXMm0tQgwTVKA/AFmmFCKf0LtUImKsz950Fswyl1k4RRAISfOjgmwg4yc6dnOaKLD5YPNXq
eRgk+56vHdi3Dgfb9AUabHjsMzobb58wBVZZoOmC6RqpxhetwT4E4y9Mz/Zz2VfRwXSP45FT5ACK
783ZpGylSRygEnDmjP1QXK4J+V4BjTk1F8sjuskAI4K8nSMYhTBJlpE3mWM09Ge9k1yKKmzB7moe
qTed5ZilB25r+r9FoCTBWFU3FIoxvIy8m8CwMXEf88h/9AXsMhGzUSYQYSpAPS/v0Oak1g9m9ccz
Ln+WSK8Rd6qlew6eIY3NgYMNKT6VNDBP8GEP0hCJNbuUyrHScWwYNY3BBVDp7WnyPpcmcAXGc+dO
D1RFO+aZ0I4HMUMut0zkMGitvncrt5zfkhooxIlRAjq3qfVPBacWgXnSguIaqva721cD4PjthZj4
jAzAy5RA8dXhpfsfXEu/A4ywVdOEM2BHOEpSUkEf4OzQY7Ab6ghIGPrrLVJkr/ZdCKWPcxY72/H6
vgS50dIFas92IKhjQ/VMNWj6vnVaJ5tJoZbS9rdWsJujwcIWsaboElFRrYK3OTB62EbuOate7dCV
LYWbChszgtlJXBOhvcQ8MljEQQtSwYIh7X0bV74tdZYshgXTJizqA7Y4M6TiCQvd5l6OOxETQmz+
Jnmg39+iuDQXqyF4o3ga2L+MefBQBAALD5XtFhx1GGK7XfK74Tg4ZzCDJnXrO0AVJVYWIbDuEzys
7OAm82BQfLu+jvafHn7B0pmQHQNNUTQyPYv5BwHiz7OUti2kskE+bEfLCS5xuLNumbT7wnY/KZVh
Br+Nv1HXH98ZZyfZOBwGZESQIH7yl4HybWf5FlTGPbSyIqtP3ny7jJH8y2jG4N+RU2pZeBG+YAhO
rDkOCdvrC2eC0a0h+I5BGwY7Gz4FFq4Yj/sx2rbUMAmW5dq7vR8dGYbAAdxlmKtc3Rdsp3FnUKY0
yS/rw4yXF4yIJDD0sxnfJ4Q3kfu7yjjQw2oeUoUwCKSOA14urgUVpTjjixY68PJeYyUAhKgC3XHT
3MZ3KYP4wd9WcDz50UeYUKfT2bCyTcwICmMW5g0D8BopEg7HZQpNFYSYkLbFfFlGeOwneCgd1Es7
3lyDosY7r/0NRXYOo0cFiVDNzSnc3pZQO/2UsBo7O96DTyQchfxKUwiumeI9M3HBaxTDuWUxMeaZ
YBnA/zcWgf4jG++nthJg4D9gVGyECdfXzbi2BMi/q0seov4I7RC6sjCC2Mgf1lJXkImw8nHeF90S
4EHCvOK6BGJBsbnxdevG46H6MiwrjXqGRLmulS+ag2knVytyPKf+c3f/Xej4RvcUy3tN4dLrsVnA
W8SIl+L8ArinOSrdWgiBLGdKXnsDSMWwrLO186+NQVZy9gCEwhr6Aa/GEFu2nNOwuqxI+/eK3d8i
fuopsRJLSrX+PSA5wVQKPzds3ePCCqddDUExuEhj76TMzZoIJMXR6ccadlDqyKkQSvsJG1saPz3C
kT6rw9z8tzQo5C9PMH/Eo/zElm0pTPgGBAAADLJBmvdJ4Q8mUwII//61KoAAbyksNAA2/ZCp565I
GkZEo94+WY/BrDe7lGpob0p77h/+hL/VEC427GEEg0Qs07CLfSo0hCCmrCA+u/2gQqqYYeABrnKV
XSC0lgoaEIqP1hpzt1X7Qeq+L9akq++Y1+kYeq/mayTYhFCJezB31b+R6cOl2Cg/5uvkBywvypCe
1I8hGzMSFchaxTZgPsLpcqrBDqN/BJxMd8klwVqwkAad8MIJICaINnG6ke/E8mq1QbzNNnhTDtwE
WdJv8uSmVUDXEhSvHPI8R/BUleBlUkxryrG2ItuwphhbZf8NWrK+0ieeEcC9gqDyDKYz1MhY7V5v
qB6gUl/yHUgi9b3wgET5DPEKEahKFFmg+pDai3atP2Hk42dJ65K2x9nOkc3+dgxd7weBvjRSXBOW
OW/qUR9M6XY1khBnLqa3nPtB+hKVBXSxDvy/mwH3pQ0MLjrb13BojF/MeiYaCs9gyKUkDmoIIyk8
emfWVOHFG2RaKhIY79lAOhe7z5xyJQEMdicKtjGPTq9FgPrCcg8LH5oGRyKMAXHtvM3JviIRXh6p
WLP/AbvJDsmffYLz3l+cuZaFWEqz85XijiMsDHzE/Ib8Ye6f7dVQipR8VQSraLStltsa+8ppzmka
L9UMx+O/iBF/vu6heDCBP2ew+TEtMjqoXoXMo6KqxFSCP/TgdwEVCgo1D+yipxZKxI+jQAc7PVEV
NrKtYyTkSClzaiKrV3DpMmTkOtgUyOEUGcHFMZ0Zr0d+h6TQebEGsGZQ/Ql76/phsaMbqEcUVack
BshlLuiRIEdp+dB4VvSJFDh6vNnMlyZOPxiDdD1nIQ7odJiEV+iRI6vESjg+FtyGqk5XdJ9FHail
ODFPXEmd8WYE+BBSR21zwqfyVpa7iIb22pXhm3UlyzSjYcqbh7fHCGWNcActG7Gy6nzIv0L80bjG
Jz49Pw9tnJgD3N5OFwgyNLCrKeCdMf2nJtnDFEPJ9S9JG8kTYHAEQ/qyyACqIPLoCvZGKa+4Nk26
WTYRoIDYHO30ptCyJh8yMhhwlw4qD/ZcVmDz50YbYUrQOqXbRdau4x09yv9AA5Qd9V5z4LKG5Gbf
nhXo44mMMAvidjuOZOqOp57v8VASb04AAJNMxqVCRjFQtimKzlZgQfOemnWFIDwbCalXK4xtrCIK
H9svtnkCnh6G2FYu9SD7247pPBvYx1EyOPd+/5IJTvyFgbfNG42fNcrpA/c8m7+G8YqflF4VtuJy
1aIAc0qUgJv75vzQ4Vu1i6sWRrHQVMZnPFJ0KjhKJDVxz5oBBvJ9tz8pXYj93DitM3zXKeo231to
N3t4LhbN1ZswjuEberfl0pfd2YBE552BZSojmWACknDgn9agHiYfdHpb40gDKHQJwGc0CW+tfkZa
hVgUXXHzj0i5LUipsE81HgIf8abYFCZTa1VvAFy8yaDqVYjSlsbKj2od8XSeigd1kJot9t7vNZdN
7bImqUXmtBr8d2eMsBpKTel5B8TaW+/Ps4P+AKNLf6Rszp3IEhBVvlC1a2258PW8EPb8xAOaThzd
nzE93gwohw/7rokNzlaj4sfJDWte5iHZZnS1rbxc+1Fbly/FHNK6UTJlUFCD0XWfBul8NpYgBbDY
rxzhBdW0jnriInLG+yeUHmmfvVPf2jNEQR4BY66YUO10UyAn8WtjwP2A6VdjdvB55nAVXY2pzm7r
rLgYESdYNGO1T0Ts1N981bkSMkyft1zZ8lzL/hWp3vd2ZpzeQ+beB8rvBI3DgX3QxNkZzZ8xQXPS
mV7FpGxso7DfLdomrLpdDtGqt6EBsnSq1Qd1K4UowWDEz72Hykw+NJYt1P6YaXq96NYlrgeMF97L
ULdyaEsl5TNIz5+nnAIX2s8RtT18yJTYgkp3G1qOBBjDoSloqG65/N206fFC8OSuOxjQV6EWxUZb
dNucUrJLPcrqBVGXPwIlOoKtBCKAEMjlzvhMikkyCbmD6SOBkjz9G/EsPcWwEvyS54gtDHzsvyqh
tY6d4zhVVFNVbhlwh0HflBQ05hss36tHOFMeV5kr5cEnrPTVM7DUbxE+LqZhkxQyX7BnosEVsKVs
+XX+qeBITC72+VFpl4585q1Kedx1jP2qSiqRYcRbUdtjhGXIgJDIUBzCMSfq1gufx7KbB1xE6vxO
KWSAs4S82P8AzI3zC7pMeuGnnodi7ebCSPAMXeq4aySGHFrD9opEY/tZ2giI69kmLx5KTDNciDNk
8i3CBLtTES3ED8qer8xC9hDRmS5iFbOHwzwBrj9TrDN65pxT/OZzDAHralhoDIqZW5f2z+eJBlBe
1R/Guo7+Zlv/We54otdRwI8grHZxjcTn2go6fmk2LI3w5Nm7eeZiZ1Ltp2YXQc/RU+cPLkbdd070
3rtH9+YddJv8x1I9rIjk78w1Gjz78qgNoYk1YsLv+8xshXkjdAGkKo4eNtgoGy+gu571X3b5QSxi
8rBD+HNic6DTud4DBkWbgcl1KIkoLtIEq91LXgv7S5JBkl19ryANAOE+67ZBOYVw236kwELkTiKZ
HpeVj2lOvV7S4B9U5PG4H14qD58pW269F1DBqA+zSLjxC3GcxMHo38Votx8B/oQl4S6BrNajToaF
iQ9Cp0cnIVy/3R/oclfIeiITSR5z7j+F/8lvQAayeHo0TkUN8k2yftyoXQtPLCfeF8Ar62+w5fxQ
b3Ak+3s2kwNufW/54rtItQo0FItU2B7A+pIB8aTOwkXJntdp+pk7AhSqqABSXobPNkzMm1nSxGHv
SH2z5nhVCXYod0AaLdVzuZm7bL9BJa5d7VwTch1rIf5WNzmRlwf3GOzucoLLhH1ZUlFT8Azhdz8U
AyKXJKppYtFXDsJn67ZHNhVmULHRaeBNltho2RQyhlwqlX+1VphFzbrVmcYsIFzpofBWmkvddCMs
EbqBnwuf9VjlT7quyKOgM86wTGTq2HChcxkXOr/98taMJKyAFF3mnlxptmSLUeDltHioJIClA4Xv
t1o2+qtbVk9HKhNBg0wntzPwS9o8UMgpKUFIb7DN9lqpx29pN6vSlEufg5HcSFx/Us1EUt0XViWz
acItNvDLLQvJ1MUJqcZWngkJL6MWEsNQ5NQUrL886jDvq9sNsLcNu+c4dc9r7qlH0dGx2ubTcAVm
qNWbaBijRm6AmwpgOTUMyJXGTXRsNZLFRzcXl/SpGITKPHmgSaBq38MFOMN+C+5HcfZDrJizUmYZ
cNVTC5xrKRDTmedo+aeje2+fDfEEKFRaaez6jxwy52C13RxdFNyoDVSfcRdQnv+oqOeyquqzHckQ
YwNK9d18d92YQVcDD2f6+4WLTFsiA4PWRAYehUiABGY6Ec1n5E52BmeNZlwI19UHurmJJIOymBwh
0dJJj4Ck4gcxGLrCErysz7OjSVuVhPJ7XI8KNuvckwr+PWRxMkfZPbW923cS9MJ/Ap0b5E5FUFV1
X2h/RYUgS7E4SpuACq3wWcQzvqYrPaPKoDvDhQPj95aZyGEiI4cBTjEATsp9bmUuo7tWCHX3rmul
7+BO2sh/uy0CYtuzlZJ1S2Q5PoqTGrN7nPMjkXuEcCr7ZmAvYxvfSaUWyjXFVwpC3lh2PES2DI1h
wFBe79HmYjzr8vB5gTHF6V3MZ3jietbHtPf8nLOIdrb1hL6WmTzVPH4mEWwPt+vXiL0AgAZGLfeo
IXd6Qj+UBruV8mm6hWKqggJt8+VN9Hpq9N0KTXS4PnVHRAliN1YBZpduudeN+J9/zbofwdVfm5Mi
EUG9piI744Hyzx4qCUE9Rai2U6xCNRFMCHz6aSKLCGERybXmJ4+LECYSOiuNPoOi7eR6DFqZIC1W
f7X7j5sUcpG0tGNeR0DpCBMg3o83or6CyKuO2YUYRu0sxnOzxqO2LhJKQRFYBkSb7nnjVPZ5tLUY
TZnAtTN7kCHRygBSYItSICcZvrHAy08WiO0W8hrweJzJqPur7hXGQwRluGKFxicCj6SNvxityQLn
imSFT4K5JdqhQFFPl1+sHmPwMLbVM5sCZcIwLpW5nHxKrmgxAKz1hThCeGI253G8vELJcn/60ZFj
QJSY/Yzmk0IvCmlP0lP4pm8WaR8cyRjKL57a04b6AHpu4fB9eydnQSvmz4nC7qKrHTgDAIOHhVGK
REe2cA91nL3u21fz/6hCn0ZcHskornB4Bc7yLfqvR9dFH5ggq1cve63KuspsTtijFCFXlB/gY12h
M3J6dDP3hYEkiodND8vBVcg5BgoEijWQKNOG6nEi+oSu9JnVMBmYFv1VEcKyOwMIGoapF4u87xek
ZtsTr+R9AXFzjMnRmap/CSTUxulqf7LWllGEAEHBAAAMgEGbGEnhDyZTAgj//rUqgABvNfpAB0Hl
KM0nSYdsbXxn7Byk+gdu+PrPMaHO5qwj1l3otaUFRSb7+5erH/0J1UqMLIS1udPuQUtoanq1muYO
d07cI53xILOOrNKCW4eFvazcqS1/xVcASLmK+rLAXl/bFgWpUy3snqp1nak2p6HAs86Z8YfoKK7H
VNDMYPqxn+VwHmXQ7hBomZjVzd5/APHo4+FeRvOi90DDfCUWIe333N4i1tsGLJjn32iElSfpa0QD
kbOaoJ0S1/Mgd3ZciH429ESjuazKJzoS+GkYHAvtekeLTSB/5ePz58ECtn86cyaM22g1KTmW8HdP
uoPCGV+WhZzmz2Qxq4en/RoMqZ5HLdWP28cWOy0tzJtmQ7dGybI43/lFp4PCt1XwNCeqoymc5ODE
sywoMacgFuYwDw30AL3lOz8uFHZs45QBzNx6AbNPHFYzjIw6Lux5l3lMv+G5lvb8YQpOKqPRBQUT
Q91EZVDyX0/NIZJoiWCS6Uf4Gp1iqJoqoEZgAy9zUZpHLRzIBAKtnLSJdhtalhWX8sVEBtpf+j1Z
ZzSh70qImSuUtY+ZlsSuKxn+th4VfTgbmBqyz217ZFcC+64cpFG3qcHqJX6/BlwdC5bcnXXMY1c2
gq8IaX7aot0QyNmnoSCn77UPKyWUfFK8fUQYI2gv1X/BX3ohjm5093BuZVTXth9FjcFbhXNdkkxl
VsKfs0vH3fkllvDLjzkdukVoHAYbgRMiQOMSpJ0wAhB7Q1o1rgTgUjp5K8wLJQ6j1ZK9YjMxbNhx
T/6StWdRWlQ1KWYcRGebQ/Vy2Q19jFsx1Aa+EsAAAOU51uuvXWDErO0jdPDrHlRyalA3JKUSA1N+
ZaAB1DcfHH/MBgExll76bOwQWrgZbboC2iKhIkqldq0S+ltV/iYsW4ndz3+xqRWg0cIHaZvaLvQs
5NlOO41Yrma5BAdsQbzpJAKFzT2Z/4p6aux09bxdVl6y3L+fxZwgHqXB/VIj8Yv79wXluj7eMu3G
ZmaV7tJW4L2F1OW2YS7j2jdt7/wxYX9DlMpz44KT7QKLD298D5D3jun008wh3DnKVdyaYb1zfu9e
6p0ylfNgwq97FSwmzhMQ/c8ztXK2pr+H1zSj9HV+rjL8aey51kQtSdfEAonn8LE6M46sKJP+LoFQ
oB7KR8EuFzq4G6eIohIxv08IBo2UReR27xRJmdLbHw4udeekIVc+LvA5Yu+bo1OmGbfRRE+suz6S
g0Noh25O9XfOkCalBL6/proZ+Z38dTAuDL+KhnNp8HACO+1Rxg9CLmJIA0YVWrf2+BkYdZ7rnew4
RdSPvRi9WLiIw1RomiUAXkOmFa5xi463zxgPxVhWcYhfTjVlpIl8Zj3lCvaJLwDEKkeKp1DFehm5
Tj2v1Q1zz2ttGOnccUgLqieYE1ACJXEQClmhpq2lBUqek0n7HFwy2FeDqn7hBvsWLKeFcwM7n5rP
D6WuysMDGtlz8P/hpsTTSTMXoR7KlV6dKqbq4/QqzrAxhCVCoeQhEhS37lB43eXWzP9IC/AIohxT
eVsM+7pKkRNSk/WgQ7rfIAN3L7AqdJKYaDuYJN0auU/QVqo8C0EHQP0gCF6sfl/3/9avDm1KmseL
noNbeOloXvGKQyGJkZTPyOgdOswuhAiKXVQ2fZO+0wEkvWIehrMBwrymg2yj+DGzDf3eQ/+B6jet
hLJ8e7Al+c+1iJugdbXUSdfuXgvPqHhjbbNnGTSvwXKOyVRCsiKTkhxQxZfqejNlEVExRkRvzVxp
6iscQpTXc/tWIXX3TTi6nwYzHIpzXCgyGjjPMOiuveOqqeZ917nRiwb50xkwSVzIXbqicUCC6e8A
TA0aRzTuyygVCGIKjKBPfgYcqUtM8wn7+hhRfAGG6/zrdz/L3DHbJa6LUdQssL3nhvb09LmykFmA
xnOmY1+4gfCXm2/2V4qEVP5DyjH8iP/k7itnCtZsuZZ69D7Shds/lMIe8PKxryEs95L3miFhK6Rl
6eGX33NshUxfZK74tEJJnqVKWnjveP123fyKeeblqYccucwtjAzXLRDI5GkazD45ngKVrMN/icsb
dU1mmkY8gPKBq0rK2DKbdOpZcgW1Tp1CTPLPcizLzEJ9pzLiO6m9P/jwaD8gaO7/lIbuu2JRkT5g
QS7gDcPVdAU0vmphUFVS/xhh/smloMoPR352KDO9b0+W4/wydhPfbVLFoxaQdU09A3DecEvuZE5m
PGRUEfbxRqDKM4JIxC6rFFl/mxDrZ9UI6KnSrAecQzm1gXLZrAPkoV4RsFo5KCRjBBy24OER2Mjj
r8P4WDzsQfSAOk+x7EDP0o3e/AUMjoJdb/ViobDzVvYhauHqxFKonAUF5eA4Q1Mv9sUV/4qHcBBM
FExQUQa/nvtdiidZFryL5jDsG/5vZ5je3MwiLAM4hx7xKJVlWtiVbrHxkSVsh6ztClrVtnjg4JoT
DgGpUtYMSyhsrri+0veq8nMGFQP6+e2srjnB3JRIXiNVLgY2iYOLmHuAt8nfyqdNhM9WMoxfZBQQ
BEYHkod2sr4VbgWuVuu+8isIer7cCsTwTEcQ7IFOQ8v3RD31NpZGwa6VFX8Ouc+2UW093hW+IdTW
ClVkPfw4sDqbKf9y/CkdTTx5+crKR1G3z6j8rinMg8WsqD2Q6b2XM2D2IS8PSAilF5q0SgOyIrxR
djmEl6CeaKmKjttACzrB1x6v6aEG7zl25LSXhpYOWEJr64oRu3MOS6Be7dy2qIKNcMGojEOh/MeF
xbXjsKEfk9L5LoOsUis4y4aZpGlXN7GHv7BgMBQORpWHiLRqv/XqnEpvY7qMGwwQqU+L4hSmjDXD
Dk03BJAF5Aww1l17C2o1qkBdp4MnSl/4Rt3Ux5w3V/lw5Q1kJQV43iSMKDIsyRUXgpvgHWG9+v5T
/IJhjg+xsH0wCymY8vXf8xl19IMLjrvQ+LUkh6ni7uvvyY7P9HklLlNdxUc8v7IWMvNj1WuRI3fz
VHX26BAdaILrt/2fsBHsYa0CSP8eoH9B2ycTgSfYVHLlRIkEyV0BJknF0rejluiJ1NOalZsj1dFJ
tqJKS8kWCe32sdeqH3OCwGP1osv2JO9eN/sAaBGWFK6uLJDkcYqKF/KmLINTVVS3xr7ba6GWl1ZL
SYoekvidryGWiBCD75LHqVTkYQS5SellHEEz6T2v4JjLBP+pjAMFJx8EBvHvVZyVkwpoeCf4c/wl
hXHCuvt8Zd2uzmHEdfBIJEKpz691iXYc0GUA01c79znjlAWklrIfvX8+fC0PJOCqunKWKE+wfEjq
NxtSwyWBp1lfw5CjKMhml855etHQ58KCf1zzZOlMda1wh8ejlYgaV6lMRvE7+QJsK3g+0z6s+hUG
zxM5Sl4INyQ4Ug+JYelC8zw9dLr9jg5DYNkJR89Sku73Oajb/z+t4VSmzo0IFqlcGt8pV4NgSKvC
+RhZSTRty6b/AS8n2mX7idOLEx1E/d6pKVAZiryZDPVo1/fTg5ensMdd3D7MT+dPiRuSxe/m5++T
XYzjlC9ZtrrvCRlEUDjN5Db3pJlZH+zXUIn44YE1pRI52e9t1oe6yecF9mu2JQdAkC0/Vu0Ljv4y
10sawLcr8Zt1S6FFY5YTnYf36fmyJvZ4HM3VwGdojlZG0ACnw7JePThqFNDVnT0qHnt7kzzGOf+f
0bm2c6Xm3fbx7R4SLfrrR0ZJMcYRuEoV1QJdLQ8hjljYuMXZJYqendWXhkOl4AqcJrr3mV2sn2oB
EedTyU/q2OpHRUXy21AiEFHIP7/LUO1ipNNRtEhooqz2zrfP7nP8Dyey0pScF30prt1vXnQjpNF3
0FQPxDusTz+FszC4xXOAJVx60LNfUaTkiCwD6mkVd4xCYFaRrrm+GUpf3zxXFY+idg8NGOah/EKH
rg8RccSSM8HB7lrdAHQh2RrLyiha4wmUlfjNZNlTanU/2p4jF6QkYeFCS4qAOj/L3vWLzobWo2t7
8RKxHwreMftjo0/TxKwjAAJYZkSeAHVEtgcO1QMbDZBE8V6d/bOXXt/j0nPV5FzXBhYZBH2ApSEh
IRSXXsprlO1PMyMbHXSm1vrZI5oMFA902p9SUNu9BGeFl2Xfg3pUbagiFWmYvdmk62e0q04XNgu2
jj3jnPOuBiknmEQWR1gzazv786daqt9NLalOdCOG+VSsuUKxpSOv75OT/ZcLjNNnxAn2Edctq2hQ
BUQRP/AJBSvG53EeZ3FLvuuw11uzQjRLrZmk1Ly6QVbEsdRL4gQ5YAKvAAAMCEGbOUnhDyZTAgj/
/rUqgABvJqpxAHLm5mWhmQKJDf0ZAwye9IGpSZBa7dMuUyIoW55lnK606qI23FoDms+Eymmv8NTS
sbMpgr321XBInPBAb40oJOI2+Zh9dnPPRoa3ZXEBi2u6kUsGRPSmJu5m7p0tdoSD9r0pyJwecR84
xV6XuhlkGxUr2uUJP7/ckvZYb5i3Rupl3HMoflBxLvgVeTFhtP/+GemXC//yDwlsHYmT0D9s2hxD
fkRUfrAVL70xd0+G/3sR470mJIiuhWzki6+pvBALAmkEVQVrJR4fMtuvNSW9FBST15/upiVRRkxe
eeLeHpm6hol03ER8h+Lf5lWrEj3v3zL+3aru8J0fT//ur+YKKGk74W7ph6Gc/gRt36yuzSKncM5t
RVlKusUMAqbYlkamitm9BCQOWhYPPvoIXTvmiUuPOlOGMHDgRdGoaUdyrXLQF4MsJu8vOJ9XYnE6
uAqRri6XyNKWbSyFSZjdilTFKVeJXHT1FB1xcJ+eM+FmM90a0Yt33MeZIpZEld+O1GsAdRUqOl8X
ZRtNV4fLAh8A9GZ5A+Ol80K5usNXspNYRrMEJsBq+DfFi0Q/9q/7b4Y6F9sjJUNh35XvwiHA7KZF
ZaDfpUwh+AAracL+SBqDeONrvYZ36XcKpc4dbmqixqlh+h368tXZWd2EN5uKMkiJHvAhQ+TTp0Ka
F1wfGzNqzfSVpJvG4zD2p7L/kYrPQU4XsP/p8KUKnnNTGU8maiJSPX6vZ/Jl1Ypt2J+4JdtEjRJB
CFnLtCxz7plp8FtiGNdCZ9ZOTWYTSVQt4fQbALPoA1Gnpohw5a3udr3qhC2g/q4BYZIeNH0YBjM9
dvzy2aodFc6QZ1koMmwxTGQa3X8BThQhecQMU5vYpiSaLegg2yfdCmIIOYY6ZZdcPoAQHobQ8kxw
1b5Q/GhIA/U2HOCAjFtBryAqmZi6bQDnZFUoGkPqvyG9rinI/B42YDUyqfQnQpo608qDKfjkq9YJ
GOkEk1DkD0JYELg2fwWO6lzXMxoS4aFmh3j+DIFrEHYnNf26+OPJc/BWGGqsyW+KxF1UF3kub4Uj
Ah34HlF2C9dGHtXNx3uvuuQ4r8uNE6ioyzooqHv4j8sslSHOreJ8ZgW/kWZmCK+zeJRH9teYUsQD
ZZvlWYdoZiPIHBKOZH4xv5bCOylzdF7W1qUk6anzzvDSECZWfLwpQ0mXiyd8CZAxqPnU3Kj/8C3G
h4U5xNDQVL55LcUtvMMDw1WFlB98EFdTpd3X5A/CT9N1IUGSyQ/AegrIMN+jZz1AwjZKbBZyN035
bjuVj649Fqk/ikvTDKws4pFEGBi+SU8S1F27AQDrvyJHlDUddV9Z3mi3RN6D1c4qD9e+FQcrad/X
tqaWkKpIV58hnG6dIAWxwjcEFaD4vz3a2f9OiOE66ktUOB5Z9JtKo9+6coIVIwmDh53eiIsAt+Hs
LXA8ouDs3knGEGsPJUgUX9QPW3Qn4Q3Z55oXZst7Y1YflhyUbzJID37Gqu+PsuKeAGgktUyr53JN
X6BpLmXLTyIkOC/BnhLOSjmUp/4Cqm6cKC7Z7qITqrt9tM1mfa92NFC3qexUP2k4Ar3EdQCl5hT0
39k3JgF3FINSzzegQ3UFShgdOmE0EYg27iYlHJzDEApYrEVhr51hWEucs69V9AP/j1OI8gvrj6kr
uwZr3EyR0DlvVut7ksL52lrjjqLNWXViUyN9zZlVlPRW7CWrhM73jrK4/3hy+e3+NxtSfR6a1hry
qgDVZqEVO+CioOxfAUL6VppFPQPnR5pnv2rJ5FedEOLm2pUTR2qH5EWX0iDZzgFmVuQQzlXxlUI+
oADLP8MQu6iJbqNh3DkfKlSTEZG+vh9Db/SDAygij93UghntI8yTk6GlZZf6oRlYzkMxgMgYs4dT
TxMuyby0dizaDCGLjMcO2YxQJsi/r0b3Y44w3ZkSRsxiUs9Hfbc3PomztrqC4o3VF68fzHaCqCLd
XJJjOtX72uOxnJkmrplFjlFmDojuG4Rdwb5Vi2Hesj1fg4QXI0R+GFpo3WayYZeMQYOp24oA5F+w
shI5p/Cw1Vg9eL1oY9WDe0meXgMTlfRC9KYsd2n1cFTO8N1fh1VVF+6CE2vhOCpErGKHAogCgLmG
g/8LFXCZiFUeN3355zgk5SccRDWaJNjy252vNLdzKvA+YB3vchz+tqYwK6zrXrTA2zmJssFAweTt
iOmiDbKScFYPZDaT1/y6mM18QbG+GYDvluNhCXhwhWRy6BnnHmZeWS1ULD1i/LIA5agzWggxOqzy
bY5WePYeVyb0HyVo9Z6QV/rAwPhFvvvJ6Riuzjwrc6PYMY7n9bzR97c8y4z2NFKJATx22vdEVG5o
G9cMWrHOo2Eqv53knqQCd9Itd3O7yJlonMnTdULhyayrvLKKJ2X/EihmTzAm+QJ+9b6SAFTT2Whl
DFZNIp5co6RX5Quofum8BwtxQOr+d+5OniVOB5oygK/mKZjZ8F2GaXYHfYxJloWJekUzqfBepTui
zqbUEtnkD19uXGT98QSipmItPyRTjzn/nmXDZrsUKCIZmUzhYrDakrldheAbD/Eilir/dN0La8VN
r2BfpYbOSsYr747LRRJhs1GhNCzOa+BtJdKu49ds37EXb5pwtNEb5PXD4Yd+IKtFRywREA24XDnP
0JC2MVwolXPkYHcOe3SZrGd080T/TFtGZ32RJU7PedwhPmIs+jBaR5zQHBUeteEZ4r+I/agOavm3
5e3rL1/bnWXDOT28eA+cSkFhB68KZ2x+OTFNUX70pw5yCTCfLlwXjrM+xo0a5R5ZHYtD3JUWh0Kz
vgneZBCIbaPPyNyL/1fTl792ZwZmwVeHSWaYFaW4DlBTKJ0Gb90+j7bitNFPsVZQ8C5lWp8GHiol
/VqDMlfImWPQaWHmyaGbPt4jEnCJMzLwgRYgwBI6NS9RnmCqaIl8GI+lBGWDDUsE6fAlozvGB9Qf
foLwJq2oJceE3WAYnKiezceBSDOZVNVT0tsEeBbEFr5uagjIQwzTZvDyhE8BlZ6rGm1N3J0/o3Zf
GAY4G8IF8sgqlvG6ZlpRlChiDeP9NfHbYpD3v6HRyVGor0UfoD/OqoqvNvTYNDlBQKJeyjp8zvjo
S521brvcLZQGpKzwkEcCrAE3e6XHDgD2xCaAeXJRd0T0B3ijy6/upei2Xa9c2NMGK2nRPU7ilZgR
3TaZnJPYBv0dd+Ajl56h/7iNZSJ5veTgfs7xIHst/sV4rKztHnRBHMFxZHcKy1ha/lxuKQ8SbVOz
9V/f3cky4PXBkTeha6u5TGcf/YKsnhRqBCbKHmGMbtc8gjF3pHrC9U52JcaggKV/yqQVNoFVVGWa
tus5cebT62xtbbm5L0IzHqQX2N3ojHFifJQcX4YOCIHC+ex12HMd02O5pbAORVZLmyEpZG6RJhWB
AyHSpEQ7aiOmnYSXfR6tpsDCNn51foKS3tWZnxG2MMQHYob2jzIMOuN4JMnnscipmXxCyMnB9WJL
/sV0lm2kRZJpYF20zd1kUoh6BRLwsiU6kykWNIGdIOAIwoTBpMk0Ed/k2mH3+916k4xyAojWFQ4e
ZaZg+fKuZ3aLsm2jXs4SOEPyM4wKoFkxaGJVzOq/YNTwbpxnHWMLa3GHrNIIPRlEifEUDs37kisL
FWDCmzymMDr+7uR0/js/D8FFPc1f26uN8CziYQ/4Pa1pQ0b8cXS0OgFIkVfmnNJDGgtzs+Rxl+4Q
hyzU0GSlYUsgdWNdZTkaJphnMf/gzkt+ObDzKmDc/mfTlL47v2m7rdoRw9Cbk5MW1Lqm5Hnxzq9j
U5ne8oW83okm8ZOuq2nROFQTbaN9btO/HTdQlDKY9Axzu8FPLWZ/15ke3KW6s9HTkQ5UIDhuXtoC
KAgW3D494mDsNn6W0qd5iNTDuo10LbfnFrl/j1cbqNLdmRWMIGTP7qz7jNfqrRNP6PZl+2Q0RN1X
XEzkBg902CkhF6TtfYniLhuZ3l57FFmcoH7p7RLkh/L2e+arzi0RRXmlEMgu+mMSvGy1j1lb8zhs
hc8elyyA5Aw/EzPjwqlUa6xMCLuKH47pFPnYMMewMBlNpQkHF10DMHZJ7cYYAAesAAALw0GbWknh
DyZTAgj//rUqgABvJpywA5aIYSC3Tn7O3tRokR2b1xdpyiMn3TZNE9Xg3G1GjrLKF4JGfeV0uXIi
45nCheLTysB5td1BYQWHOSCoN+J3z6kf7YhNC6DMlMBQ8wdyOyAre1qhZq8ihz/tr/oHO8DWALMM
vAfUdYALye24SmnrTgkgb2Knuwdxs+wLQc7+8idIy9Cjc7nN4oO8vMhAgfDc4rAdPNr7e+f/f145
Xvf8OuMig3bhx3y70HEZBgZwBqR4U/L7Nwg/9kMmQ+qgfTsBAeNYvVyH51+4NMFQQYj6Ti5HbmBd
2QN7R4zCj6b/4dhDDOhX/g3bYpUbv3kDkOYQuoTtsf+ZbaA+w2QP/9Jhdikcd5x/Cd2/b9BNXLLI
VGeKmlB91TopiGIj+klGhYJ8Ibo0H1J7O4ApOLqROJYUq8wv3n+fp2OlXtG+xYtZpJbs8wdEQDQr
O/2G3DkXh2R2eJ3LX2DxC0uyo235zgTultod5VPO9xgn+BkdfR/f15VpHNluJWdn8AxPRyDh3pI8
gvYhbedk0PQx79dWL441V/HtJnF78jCDlDPTiUVh12p41hWLxFnJ3o0BMsT171v4wExf37koIcCi
ANRfig6K2Jk+PUGQSeOq/z5IdJV3D445qN7H89dEWI0BnZLIlaIDVMCvQr8LEz5UuyZkvXDjBMEa
Fg46JPDhNw/Fc2YLN6GpXz90BB2QorkqC03G1LNTVjHO06t255KTWQI0xNljTgBeSFAsrim8as1Q
6tUWtyJAarTyheoyYr3oW2tLqvfzoVTF1h7uF/1GHvGhQtEylj7PcA2J1a/7mQ3cjJjg/MvyQKbe
45r+70/Y90ptTJ7v2Lj2oRVC75sn1njudrUBfSWIauGuEKUFl2z6nPp0QhVjA2rn26xPgF+UnNZi
hVciSbMh+GuXLybxzfLu2e9QsjOFK/BCln7JWLnipg4x2/xwZe8w9GC9TwtvyPeKGrb+jsV+hVp1
ou6I0UfvWrauIg3Bt/Hz8zraxPGYvm9o95aUulF2RmVLvguDGFxFGSf6TmugTIBHDRJWTEwFfy+K
Kb6Mb7/1RT1jOZIoZR9U64HobliX3XCoN1fjUA3lA/p9AzXvw3CsXfLdt5eu11S6AxLuL+1CbWTe
WmxE6HiQDqqfetE95v2ykxqK2WTBwlfU2cnhxMHxXipVMtJj7TyOG/mpC4ZJcF/tDTTNAF0CXn3l
MODRAzqJpeeqdue1oca49qMUmSpJ7kuYBn2mATEoFBp6BCajQKwfnoLAPuNgfeuCykHNZMCeNuX0
cEsPk/q6YfVB94zKySOE3huOAbYgPMy7nhqR85CxSAFWhhXVvSjpj06NcMeowCwRldsTyECZk7y5
qNqeek1MOTRVf6FSbNZnBovo4ANxS+NTVTWcaeqa8/sdLvn0Rzwh+cJ7T3KMCqXy7U9OK3NcYlYO
DUaQa+nT4a2aGxTuxME/e90H0ZuCxI9zmTkqTBJeblehSBb+6a/GL2nWmNMRR5lbuLnZlpvIVAIS
0uYOZVwb0k6bja2EXIFnu8X2vxWvik9Sc/Jt5Br3dlj5wEukWNqEhkZaJ43q5YM7kNFbE/OsAbLX
CkghCKvg/V++OYUc1SSjqetcXYSMgpnqEs84eEWCBxomj9IcoPUmZhRGreFy/4Amej+7Ugl8pSsj
ikpBxFBSKJ8Cb2GP6qExHi/JOQ4gzMnNboMXQlOcepSK0DWV9zGJ3zAK8M940wFKjCB3i7H5+k3l
tbXQ2px4V2PhtO6QpEItFksVPKapdtQRxeS6dnAvmFsjt4Q3bt/f2Q2ECoDacbLPiW2RwuS1SCIg
wLKGfnEMTe1sQDDK4OoTkr7wktx14KGD+HZnDpwtlKKneBYS8wJOIRTF6qbHbUxrwGPl89KT61+0
YVORJU4qjZqdp0DWva9fZntfMN6kYNOTuggPan3wPbkU+z6gjPPn6I7WGG6/zb45p0+0F2qFnCcL
AsdhadPtml/SiXFPzShmOUDZby524SUpjQTxR9+RhMbRzwwMzDMKVgDmKQgEP3NE9MUZUJ96IJ87
i7UrhzMkll9ciwG/3cocwgizewzZiGeWkkpBqdhIOj1TuekCotNhuca73U071fbatg+p/+Ll8tOS
EKT3G6EuORAF0YkDhCpu7KngWgIs82pUOcgTTSprb7wTpPLNbU/FejSATQQBhtfcAeOfRh0qJOCA
7ZesfGRWXXQABz2OrMeqJNPP/4gZOrkEvLEbJpvnHfuzIm7njHoeU6I3/92Dx3cPHBz3p+W/iIvu
sznZGL9z6GbeiTkyn5DytyvC1M3EX+QKvJVS+9A59NInbp14ChDIWb4wzsis68+hFTIyAqC6BTJl
rp4L/F10jm+jURUz3TwqYAApelS54dxQ9ij6FGp7NXuROGQFR0AYa+SQDT8E5SjDuZHucX8FFnhW
SX7BeATQwnMX4T+KJBJQtCGx5W4Kg5/ppeC/btDSuE9TbbaEYmWai2BriJi5uUUnkQL7KPVCG1Px
v7RpPq6DxIieWHuq2oV1kW7umz1k41G+uuTqb1KZD0z7O4NS8JWseIIdj0cn/mbv6Srv79vNRSqd
QLNKDo+CX6MQ6x+WwZCwywYjnsih7/f0BB/jShCCnIWWZ7Rhnk6nFssCv81mv/YeQpTpZ0U1B1+P
XmLs3tBtGJ6FzLSBNC61AiIv5ZBj54Ihi9f6FO3ynnJwMCIUqdkvavDoKhoIEry6FnQVNo3ES/Bq
2GNFAeQlnrwA0KztFZhixeCseEEYnKy2VmYKglqIFS5+khjHtHVk9ozo1YCAlTDDqOe0+5NbqlDG
CHj26zk62JMHbllxNaWEgbf/4lNSY88whNtpPtWbBw1JkhyWXuqBV5uUvVfTNnz3Wp6HGWOrA9r/
Og9ZfJWnsKv5mDSVmT7crmVhFZOAKKjasFXVZeN3HS1PKWIBPThnnrkLMRFI1AcDarEoOAspuwGA
KmPXKaJJP9TK2dmRXeIMcxIouyLu4GX4yqdbPg5NuAgKC6mjpfoq2whkCJLN9hSEWnNEHkvtF6ss
r8S7LSanjFKDZ73EoiX6lKLfKvfbe526DeES2J7RTz5DC8+qImHSYKBoGNfjSFNRSOkfr0qJAEmh
a0JqcStMqUvx01MRrAeo8tSemXEp/acVaS8x6IvizxDoDgC1+YtM2TSonNRxdh1McOwzLlFYWjDh
F7L51LjSQp4ntbpLwwvuuZJ2USV1ExUlSzOw6Oo75l29QpX0Y9P8EY5EYZzMsUfVBjm2bioUPAAE
6mC6XmuMWiPd0v2AAgF7tOw41BTAVXENHwAZz1nzoAwb9mtN8LZMAa9xbajgprc60lu7qPZHh6N4
qdo4n8axzsNyr+9rj+aJc26B1JcYV1kAAx6bFF0/63rqDy1DXUwq25bhsiSOC+n/xeP/AZK3OjKG
3zqsoHxCpDeTT3liJJbcw0Aa5XMSClJ8tzNPZZD7TlVu91DxYzDSqjC2/32UjK7xXqq3ueDbhT5L
qfiy3NAcTIYdBCnzDgD7F+LnJ8DRi5rcpisyDpnt1f/CGgOjgt2mXhduQu3CofIfz3l+BLK3yVU3
y/jWBeNwMGndV45oLn7NTNmV542jdjG6NN+hdq9/mciH+sa49eANWDf7pXUeiRnMjG9yXCCOzE4Y
o/2N+qRcw116FZf0seKQ4Q82vl6cGHHgEyN56yPPi9JVeQLkTVSR/jS/PbX8wPXF2pRrfO2yrUDo
Eb+y0TOeLp5XDnPUbMqdB2JDmfWL4njLBGwbL4MBaCRQTi5rbDsSJ8POWMYRPMJhODIUKgotA0SZ
u+TKuEED7kiBSLig/VAwJ5Qni/7wLzwdpTENdKa/ioHPY3RGAEuHsUckX366CZq0s3E1Oez+BNqO
1WPD/PJwH3cyf9MemaMMm961ozHlhJj6eu/a/vvdu51VnmetjgXi7JOKYCoUF7s5D6pXUU07LkgK
YtQVkJPAWm5Ef6d8LcJngIvVcCjhMUdut9bdDFSSn31cnSTL5ucMoAE3AAAMskGbe0nhDyZTAgj/
/rUqgABvNfpAB0K/XEMsuqquU+KTccL7p7yWDuDP/oUBbkezMlNJoH3QoP9+J4BzVr2SYsnDWV+G
SZUBnswxKDe8Rd9j8Ln+YIUbgwWL2T6YAW31P2IYoRQmHoubam7b392JrBircLU2K+XHb4BsSBXr
8X/2yEJTvfTkMvlFuE6LEvwQc4NwhFZT/3ifAFGzvxQUOm/C70/p08iwWODy6vdXuabKAGpR+iNs
H9qIxfTSvHUNGyy2DhsxtbdH7eTDHlQ1BO67GRLdlgWoUzDvvtqkBTlsX9X/MvEa10hSyEVYYwN3
S0LexMD5i5AVuKRcu608sWRtxvpKe1yoni0HuH0WYcDXQ2brS7gd6hK0abwIE9SMdwLwbFX7x56V
lc2o28yuMraeCwdW4brYME78LGVhPYAh+kmU/q8FOMPwE3/92+TGbOUOxKysvpV6O8V7BLvPjDF5
tDN9I01cJgaphQALfyOwCMIMf05MgIdpqwDt/G9TRikiKts90IHMzA4ijqgk+NqutJ6R4puY1El7
cESqEy+dxiVKkeZHSWEoDOPbhOEmVGoVix/cL0T1NRtBhh0X437av7REjpujwv141LIxfqanJZBw
r3VfGkRDZ/ospnNOY+wfkPUH46nFE+zlxx8Dj/iHshakXS49j8G3XuoouWmfKUca4dN8fSHWP6uQ
TjwOtkETLWnCzHHU3g59q2onMpJ8rR1plHipDVIzC/9yKgxjdyIcjGOJIIdXZnh2BSXkseHahd6W
IEzq3GT6QBV95muznXoWJvIAse9aIFzKJ740nnoGd8wB5WcbLcm6YMlTfN4pI83mZGVMDgDczHE1
ppV5SM1mX1T1ctBxSh+rxOtuX8+smYs1JsHmoHIUdShFtv5U7PnyD8Yzjl2PUMr8VSVfmEjCVGpQ
pfwqUSrhymxJn/UXrrkI+MMs/zyolOEu/e/YK8t5UaUcOyUuBjy/CeQntWc7eB2W2ltbXEaReft6
ohAE7aCh986SWvjuessOTNqJDSShP9OGLGEyKDml0JF7ivcH0reqNwtFAiuHFStgzhQBy9nslXfe
lo83BanwcMk9g2R7MqtPeybFw7E7/pzejdG65qhkT3jWRE4OlUG7xKaB921LoEEq1/n6oNXkkWNl
mtoFvg27wObR8vhcSKc8x+CaL2NM/Um0AaBRe5tiF7BeFNauCyZ7lnQoQkdgobKOr4UePjMvAwMM
CHh+oM/kigFrLvOO6RDkNDO+sYcU/4s5LNAAH1mViAKqvhJzOlU/5f0UhD1ZMdrcgRd5UuYT51sl
F1ijK3IqR1LuiGdRVglmY6/5mWc5J0+R9+F3QldJhpglga3Kk/HT8O/UDgEl+8ysbH1y7Ck2oG0K
3o8Vi30SW5qQv3vap6lusBJ6ICuTXNxWLpw/myLAYW6u4NwbAkE7cZ2tH9x5jcxE+x0T0n4RY8Oq
0h5mL3HxMYZnkGVqYuLzQuMsSk40+t8zXe/lzS5xQXxev1MSUH/m0kuuGT9RJuaGC6KQbWK4ND7P
pqbh1KqQ2mjOY6opPMA0BjksgJZ5AsBTFCOVbQN6qLGIRaIrKwivb/gt3dOwZkeoH70oNsfRkUaX
8M1oiQu8ygJg3t3mkR7HiOTJ9zH8ucne47KRvFCJFlM8eFRLy/JNf+hk7QFT2Yehjg2f0S90RJhS
7qAkFUW42EY9n7cMh8VdbYl57UWgSfn1ycouu4XFuYoXIlkEZYuNWbCmvl/0p93Ns/ZyX4hOHGm1
72pCK4HWTouqqIN5wi/wLQ4+X/rJcMIEQQYMaP640g5DjWBxjFhEst5y88DDj+t+3VqvJW3IGkdG
pHC1ORgpYWgqZwsSu7/i7kppQhJ34cvzZEtxx/w4rdjAfeaCDfUZnzVllKfzEJSI6C2PNzQX0Xb9
gAcRYwP4lrS9JNVHAj3/SymgOEb1AghHvhvEaYACcpT/881gfYgMxdbZSGNT0Z03pjaCnRgI50JR
3kcV6Bdmu4LDNUda4d4jWFXfjbd94QUB1+J4pTmgCvUnceYFeiqbsgh4XsJRwJ0f90Bp/wyCao0L
5+E2TKnoPQR3LG8BYjQg+xP2bSoGUuQhwlHwVQWy+vJqg7ZR4OObLYuSxZJKwYwRbWURkSzbHW3j
fsir8rCqy9UjzjsGY+7Gi4fpmexgE3XGo30gygn58YbuDyYxNXsnmqu2p7GZStiuzDQI1oTJnjlz
gBZD1Cctu68tFMQqbhF7gn5ESiG8VUZcRTgJRsmUBeIgwtzwSO0dM2vcyIhxk/4njk32w3Dc6Sw+
iDzaVwY8XCzNHu/C5u9Njs5q4aADQFwDs9tVoeYhs1HS1kPSIpDTRJcAi7u5WGWMyGfKqBUxq2BQ
G7P1snsDl85xzACbp6S86VKD1rAzBYnotGr0eFABZuVTmbKKm0UrglG2FlJjiIWbMMMvpDdvhixl
V32ybRfYhi/udM6O/DOtUbufaldMSZNxspxIDfKQMdXg+1LAXYv1i6LU7mSNNdxwEWkrjFqyxtKK
65D8rFecsKroJeCUlTwbWDrotz+yXbWTU8KPWP/QpE1jFAXBqsba74UnMs/8spI+0B7htZBe6+lh
ZUQ4RKB5+aILNk/cMk1oh60h0iTv9GTYZsVdYMZ9iyMlb0Lyg6vhdafVdg4eR1wj63+lNQJfdtkT
sWtdilHsJCBXPfsGSwaj2vE4CKBZZ5r3I/wEisstjlDtfKraFCUeSr3oSAWSTWH8quwDqa63nD29
n9iUOtVUzi7SFv7TZLabeh9lQ54eBxsXunMfV/0AwJX6OohibLIemsp7bZbSAQFKERwJh7lMSqFI
Be8NKfr3emsdWfNM93RIJ1/In65nGx5VgQ1z+tXWpGz4j8pgH0GhgMsGtP7+fqwi0d07pQjeIkDh
3sU74qSv6TvZZ6dUR+50EOTgVps22KhaJidJ8ht4orn/p+G8o1rrD688jGQaP3fmyati09asNrL4
c7eP6XBXSJpUQvUn+F4kuGp0fM4a4rq0KVBlu9fEOHNG5FdHnqdDTOVPALcu6IUlf4AdZibibVcA
tVClRZCKFdWcPWIjeCaMscANnIfCrSvP9bpH4S9zhZtiHlWWlSFEoVObVQDO9eE2a/h+Q6ZXiXfI
6BuNhOIX/FqLd6XIJullmrk+Pa1Q1qf65ICxGt10mW1V0x/l+y9G1Qb0AWGk2E+pEj9EPK35dEsZ
gy6GJHpHcuKX6zmrgyrYvl+Ka1L5nfMucYrbqlzx2TfpKN8q4C3t7WZJxB6m7s9IhCEVc0KBCBjG
riK2JvdVv/Km5DNAWZLKY0IJeoV/dank7heVpRC5xCdVMs0URZ/yQGPPgq/j/6RXAvKpZJUITquF
dNiIf4CrusDzQh4+wCcQWSFzdW0CSJqUkF66Qx76GGFQ3HC8XT2dxrgR091fCpTZIQL9ZAoZ6m/3
mTQ90mlr23oaUizXdH5CODmBbHtAkbcAprFBzvgXGw3v6nd8yfn54hRhwiWMq6jInFK3gw14fuP9
Q+EPbsrGyHH16UCjJYDWQPx+hbU0jFSf86W1yFQdDcmDzq+lH5QBbwaxX8cFLbEBatMhQUhoywXM
7E5uJwp1UXDmFKn9MLpSCiASL3i9ufbbU4f+4XLfvkueMMOVYgwgsXFgtQooFeHPyR1kOizF2WEW
iSJdX9hRewUiMZ+EVNH0XrwPanDZnd2yr+M8glswV+dI84S3cKVGd2wwQ1Ap6CN36oju5QuvjK99
clq2Dsd5Wx6GzveFurLMATzY2s6kF8VxeDpwYIzcJRmGwBQSPpFdYFgbBrCaN/bxhQNvXZvDhn1O
xJdJGXyrVrKkMENlcgXWWOeGrciBGPyVPOdlkavqt/1mXfgEv7X8xuYuEt+jpdqyrRpd14j6lPFz
WMwngCvDtajt9WmO46MhO4zRXy16Q+RNNvSFuURTAFjWRYTQQ5TyBRkGQAI7q+huz9myceGgEvB2
RaMWDQ0n416qWCacwEE9PgCKbJvLSne8E9jAVvHhBBf0bna3Qs+5/ZH2VUMKt1sm2SkfiarZ5N4R
5rNavtpSxQdpxUYP7jKrgNVVSFISn76NI1Pyeu4uIGUJwGqPiujFTcmzYB4lwPYr5QtZn89wyvgL
uG5YVG7Lw2kQjWC7BF7/rxlNAZjXMweIwYATmYcZRRAMZ92YgKPowptJZoCLJEmZHMGsDTIvggnA
7eYuajukpLv0LoZ7q/9cIjXaKYfOYEs2aFPg7gCOl0gDv3o+byfpdEDkZ/Q/n4+j5kI6QfLnnO/7
O2vyT5CeyFqnUtuefcruwbUsvxTWUNeay8pKQ6nTp1uU/sb3A1v+F5ublf7AAwIAAAw8QZucSeEP
JlMCCP/+tSqAAG8moigA5ZGe8sUkr1egmtCTknlm4dj3/xSaFCJRkDbmXVL//0Nra73HhroeO2T4
kgTYhV4O/x7zmpzwHGxgnSyGmf47P7b3dJRE7NzZtuC//daYKzUJkKkT4AIWJgH1Z7McFdPMR7O4
8dmgAwM09MlSxCpl20Syh7oJ7hMzV+3rrXIXhfTyfgJTeTjZ63cu/m66y5WoXLAonr01qkgC6fe7
COlPA0YOtCxk2PERX8t40N0W8nDGi8Atd3Hnamd+n8ay5x1B0FW17+wPp6tk89pt4olm5Q+AFaFE
Zot4jNiK7Tgw9cXrssSKaI6GDZ652EvOUNiHUZsX0+6JJOHHm70Dn3SeUZHRrpKHk00LwzvvBsHH
AKWBVX51HLp9HR0ixDGEWIwgx26ynjfP6IBPn6KEr+QTes3aPVb4Z/BBiF21ScmzSpFBj8Du1XBn
G+/5A5jxPg/6k2SdJtYQH722ghBz7MBKLdY7LHs42XGvTRpFxQBAicItm1MoDjxk9N6mM+cr/gR+
RGZEyhLV/x2xaaph9XRks6wZCDuheOLhglREH+SvOAs8xI98lEqxLOJqst6yEoAJFTw+/fiw/ox5
mJxudDv6kQkfegdA0JH2kpgNPfBfzD/L7ItrGWEJXqfYZ8XDJ5pBid20FIHwrEtlwB3+ZDZWBVrU
nVqZPEu+Thgik1Xhbf1eyA9I8GrNlq6dxZgXdCP0z9q4ByBt8R+RikJuWfi6dXVk7S2/HW0PuXk0
jNXnBfGziiAbdGiwkxjxDEW6FmITNq4xvlYO6csg41/7l2s1kclAFOI0fAq2qoT2d+e0iomk8xyy
u2rwUEKtz4sEWYXsVmJiolOLTPxjbNqVm4n7SFRQ6vIPiEOwwrcLCyFjV6o28Az/tS4HSefrnUs+
+eW34ayf3E3UgOgTtIeL9ukhL6hCNai9GWbW0UJPH7HC55mG5SX2t9AafA6uKVm40X4FZ6PoKD5D
18Bea6TxPLKIYUtEiccCmw9u4QR4prVDF+bZP0MIoScif6Kptkjb8fXxLEAG7ODNRNNVJkHuhVd1
mNxbC6mBH4hjH9plfFXGyhgrlaE04tX7G1mBRDgLNkmujCBqGIAouyCmavmQOLUaMhH5eHE3HATW
+B5+0FV3V2L3F+zGOd69LqMUC4s4TlslyBzfY6sebWJqXtG6LvrZNPC57uvHbQ5ZAouP7SpFkbFE
KqZBUM69Rx/KSzFdx3t/V1HqfpLbrIpjAlVV2Z26QDXu0JR9uVNquHCOXe8YdZeytr7YnLsMhmB/
6/h51O0+5bsG+mmVJ8xhqQi8Cute/G5dVG858qUD899yMjIr5NbaO+MV2KYLQKlzUiKLGhD4pCD2
21M9wFNWuOFQv0jiRryofsKXgoShXiMFLXQV/idyY+9Xu+ouA3xaavWLm6Fo2gw9euiwFtaH6k9T
DnBlUP26quu227SuSKgAZl+yTgW+zNfvPPnfvh6nId6UHi3tM1dcZ0tNM0BcGMpr5qVfiFtVfNqg
xwOLjblkwWVwoLZYPghf/yrLJiWZPPC/MihAoP6ef+9+2ZqSjI/SKcx8zkYpI8Yp73vprtNjWXvX
K7ha1lEHJv6N9viHKSb8WSswBJg9AH/iHBU/c82iKeENtwLV3cynvNsuejbNnbVVUUgcLYA6NJa5
coVLOQ1wqWC476qe2xsEAYF/ekbVg5QnQmmPvpeJjm7fMINVGNbXgH9ctOZLfOfVvXOVKWSA+Mwn
52xcDx8plOBKF8hENY0jZb9SWEOSgDMYwUiM4W1IBmY8A5Gu54a1hh+8iecXhnlxjEQ5MqtA04Sp
s0r607WbLgOiBmMMPssmecDSyWciSBleV1MxfphdMFIINnlhGES0loLd9ExesgqZK/znns1x26g5
j3F0jHoM8QMSSqqVETz4EEOQKPVUUUmVWKDNZx7e1WamysVbdAJZjtqjGKe9WdoclleOixZdWAdC
Aqz+P4rcgoFj56QUjXebfiH2kzwW+FQ1UWaSaj4xRNJJdpCS4Wed3fiRtrd8NmytMQQKAh3xZ6Cd
Z4fnDlV3r19mgSQzf1I+BgKyswy+nAuZL863/zYf43btCcsVyAEKABPS13xBYtRlDoUeor6gaF1u
OKJxIZp4lgW27U+FexqThdoyy3uO1LJpet+1NnGiAIRtpXBakB8xnbUkzYL/s8z2aMuScCYZ+z6T
+XZ1BeNZ3euk6oojjTQDMFp6PfREDPSJj+T0HAVE6QTinsippA8/y4K7BMe4KOG3P8l3IAN+cP1I
TkCo8khT3lg7LoDnrBb9qhX5kXTADx8jQfQgDkEJb68A+NBNtXATD2eGtLzdnu+RmVHCTk9nkU/M
kaS5zdObEcpRffOT7vFWvPloNu5BMtG25yw1JuWua5E/+IdNbyAt3gHi1zcJ4+mNJns2KO3e8VcK
shAIIpkcjrPPiCJAUISalxnWX4SHc2gDrm+v2GLjAhX2+gjKO4k19iltZjcQ4olna5HAx9CTO2OW
14zGb5MmoEbSdNJRbaeQSLHmTqcfnsGc84mBzrOpi/9UrQUKXwD5hkDbDe3X4WoSltqEIvcQ4t3u
IhOgMuM1BeveGRV09VAA1Mi4FHRI/L4AGBQiSEZqtcv/yKR9gOPYgnsNPfsdQVGm8q70Yv1MUKCy
wHLw0AkiSeIacC69FdfUbTkCoWu9d3wmmtg1RbrrrOv1ZU93B0QPSlk8Y0tFGA+edDLOa/XW0qBF
6OsiMSTY8VReKxUapRl74oC6kPqrwjKhH4YbVnuUXqXOXVPxowKMdgt5l1TttU1qeyuk5SceqYxK
m9YydwnyYWJ/g9ziuvuze+Vt0fC+kWRgeiG0bWvy0/NmBGyiQN3FDxnSOiqLF99MdBfMxmUmdIT3
VK/LC1LTjxUTNCONFP6oNJRSDv2Vn/827ldfC6M8dc6mV65eguBHYzmx98usBYH1hxTH/cuK8x0S
rTWfCeS5mV5HgG3YkuOZpdduje4szZFLVBYv4YAP2ItJhQRexJXy436i67elyybRgvvFr7XPj7UB
u8UNe+z4r7AuVtRRMAGIJOwGpzHTysZ21oSzNQ6v4N0/gAqDixxspDt4WjjDPCUTdbAPeYralzm0
eIZItHsdVFfAJFMWixIEy0DWpFVUgiwC8yzP/Cy2bA+ul1dzdCPk4QMaCTqukS2BerKSRZTAOCgV
ofLLe+y1YMMw/3ZMoq8FmTxaqturC5YEmhHojfH1quUofXPiNthx735L/PfkhEJyAH8L1X6pDgC8
bD4DGCP8a5CZ6IwiygX+HSfFtF39ajdDRrGDJ1o7iJsCcwkvrCddjBx1KzOnIEhKeqao7yUYGI1i
cY2MgDqUDqmjmgBak4z+uGWM4NVwWrWzvJaalU9oWBWFsQY5aQYj5aDrnKSG4u6nuDJtOg/67T8H
zJ/U/WQ2DcYm15fWO7eYYWTKaKonlPFybrEsmVUFvjLbljW7ttyLXpUjOjb46TQh/RdV3VNp//Io
Z+jDeTdL2JztYyFwIcno8SoDTspGxzTvyVs10nMtZq2EcSsgmMZtJoCjp9AFlbdnW+pFpmy3n9Td
G1x4G5Nllz9Udfudbicc32CgHu43yZoex+6gpvD7Om2AcSFQ6MXe0cca3evE846yhlw1WQbN9we4
4gyFp9f7qa6mWRPFbGuZNsHjYr/HD/rwJ2VJFaJkvmOnI+P+dXmw+wzg9LAYu3qHNd+AUVRMZ5ul
yw9Ui3omU4Blp1SYqDCu7DaeHBNTrKCSXRkTgya8MRhZ7pBlz8dccg0YHmIUW37CFN1PqQQP4JCz
CRvgvm1tp+DWoplCfzSoOT7XSG9hWOSYvJC6llOYfb09T2U6cvyf/iyqOlyKFlOwcfvYndYBjz7r
BQxGuVTq/WjzmsT9NOnKTNfFiw0hngNyTIlJ+GxmP6aMkqom8mrYeQATUHOHJ5gZCb1ys15hiy7j
RNisM7hv4xccGKgnrxqBJOUbKwe1lRsc3agNNhA2eCZw0ysQHQ8TM6RH7U2xAMkFmlfV7eVcfWVp
A6L7Ar37hs/0orEd/XOaDdLTIgB+HBW/5MJt8uEBVopHny5BifuYBL1ctNe9BHvG7u5YU/nxU6YQ
GfDSVSaC6+5BE6jkc5lPpJi0ZlI29FDdb2V/3uQQ2u2ESGUYG+AnlibZ+98eWAkZAAALv0GbvUnh
DyZTAgj//rUqgABvJqjcAdJre5zIsrPHIVt6zpElrVjgicYLtxH00ykX5AQCkM1e4UKsGDy4QK22
Wz8ZcdbVIL780Q9Eb3qm1gtsKxltyDYOj6gO2Ox7//QnYRHpvvnUinjuVVzxBDj0APkvX51YrUq6
+DOXSPRtOidzekjINXdCNkTVIeq0yfKeb6eTcGk75zQnFs8AdCQKMBIUCvOO1ap8j4eCW8NIKVLr
Wok3iGzHRwusJ5paCZNLudH6yzxOCdi6wC/MhBCcPBxH6cTL6kzt/AXG/oXOPwdWDnGrNKc/23yg
yRx4nQScBgZw3YlcaUeSuO2PYhOHiMZZtEhWYnUVdWF4YNS+q5cH/j8aw4WUzjQ2f1gtM63S9tKr
yOQr9qr2x/ZhuoykYOXPwe8njjeFoKv+NDGSPWEacCJCQU0S7NXJYX5T+tel5FybgmV0qytpzFKi
efwSL18ElxpUmq5SXzrL32AFc8HzIl8+rfp5ypj/LPvLVp1hANyN+f4zg67r+78Pw3F2UfdEtACJ
bj4gE6VvdPowQ7KAAAQZZtzv0dIXgq3AvZzUFHmUG4Upzd8MIGxABGFgfYXn/S7lUtyhHs6QYhxj
kb3NrNbspZXYmoCMu32LMexbUvSdH31inyRQDom0JuIayFoHYGXxh6Ug14n6jnUcNpswpj9KSoQ+
2Owd+9dATPc9fbB6fW8pRdfHwa5bu5Xl3HZDYNlnavTuJO33gKxa+BYVxTAM8rSIqpd2tRyMBElS
ObVDfay/lIlCcgfyRBin7TtpKSpdiKVoWw5dI1taErSH+6hx4Ve4srGzuNcYU0MCR94BVXTjtq/V
mT+6qWzLqMhfsleIdwEHqhYvc1lUQf9CDIVd32qIqmpJFc0TdHcEfAFwf2sU+c/O8DeW0dj0h3y2
8yarb1s5EXf+lvjoSE3n6qg+w9Ac/xxhIfPqOs9SbLMgZ0UyQ1XA4RkiVl/aaepQJOqO3fr2uux4
ohwihxSLUOE4W0VQ5bknD03xzcCrLIEbUbUtk7SAwXCDVsnb3PlDMfevyJ/u7sKtNpc1u/hD8iiD
oBOXY0Nmsu2JAj10t8rPnQAvEGpsH71MfuPsGG8ZT/xhgZRmKiPqj9BdEbhMXA8uzMDfqCTszWSb
u8hk7rueaeVxVyajSROgy25B1O1x6dgJkoiNJRFbwTK5DP1bRkuR4heC5aA0k6UbkExSn7v/7f6x
8D28ad/IQnaCQGAouK2XaV6rFVsRFCFkOaOsoBcZCK5Vc95cIhvkjj0rPsazAShZoZMruGFM+Hmr
NY9A77OkxIBenU/24XIsBRgENeek1VncGf8J8Ch9cBjkaVrTk3uuwqMiRJXhD+QAUAEz+GSJXbmG
qLBJblD1Qai8ntS+MFrwWvd1cXrE21jtc3Tb1tXdHcIMApgNrDIRxY09tWTd9QxO2fNoIGicUOur
IGhkRjxeddCkP2tdi/7xSeB75DROCIjRiGDkk7MK8cR3kGgEFCxiiI3FtLmRplHoMiPRnTcdNk93
wC5A4rqgheLlX0vJV5KrDHj8MWYXRHxusFbplu6nkLSq7VPlE7cKNdC3/KByd+gIA7dAla4cK0se
E1BD2soKDpnN0Z8C/MsXCLrC28GnFY59DZmL0GyzcxU6sI1s4aK96LwOpC7Y0mQeIuSB5ocNJKA/
4Y7HaQN0s4CnMfFmfOSvSOhRdYKrC6BueoG2OCRA67+gqzbLNSPIORdRC/4Hh04aIjTMgsqLdZSA
/+U1m9UiJtSx5/I29d9bT1vwwLIYs1eUrcJn5Ce7D7FYfjYlcumH9nXdpZd6odnO2XxgiPAZvCqk
V/ESsEYDMVDbXBOcSw6R5Ug8AtemOWMLzonve5WzROHyVrzrTumPi9df+n9biHaDH5lzU9bRnugC
MnCorGZk/ui1ZluCVVz9BP6wKaOnE8hxGB3MM82f4IackBfH4+KJTmvrXbd3TKWXJoG07cH9OPTx
7bcwIsGoWXtjtbpFUfpAkn1SQvTrMwItmdpp8IERRXoVsX+hoRSypRJ9LKvJRuhq5A/kM1To4dbQ
4lNvExLmzcyV7ribK/uImOJNQjS/Sv/1rTkKBmxAw0VmD0AMEAx1z9RfT3JGrmZGkFrgmxN5tjKM
3mio8Hn0BBKXl1rgEvCwBBwUsGUzCGzMMHkdgf8fEbuB4FFKuVyoYskFTO+/lW6zZrjzFrbfKufP
iWK2RsaPtC/ix6yk6yy4wYIpWN6JSm9Rhmgspz2Yfz3BSi+8cUnEE/JB+OGIBxYy2SO1K0G56KIy
gqW7yWqW76mlnlwOvsAfyXYhyx8PuL+cGQhoztCoUHNwq/UaUpaiI1lQQGi/QnqvWHgIFj1ZDQIi
N/psUStUJmkJ4m0FxGria2BsU4hT2KfbNXKYLN0M15N0Wkui56IWBmRaGh02oppIjfnlSJTPD+yA
8Ws5GfRC3bid+8ZmxASKAUOBs7oGHHUp+74pDK8wSNvK49PHW17NpGJvOs6rVrhlN72g4Vph7z6B
CODKpsxcgZCavVoKiZRrKSUwU4ZMO9113bAH2lPaEyJN/tuE29b8OOFWIjEBgCMz168d+NCIw1Cl
jOI0KH6nx5utrRLnq4Y7AafhcRXFfq2SWrVvtyRoqiPnwGGDRCe1x7h92J4UqCjHGysvQYMXMN8o
Q+n7JHI2elvIN7CFARp0/IMydGk9cP0QG4KD5JcsfpBUa4unT5T27hnPUhkrV87b+WZtL7OO3DU3
4ui77y8xn4frOv3aHZmZFFVRh+cCWvz8xwwZMs5nbkj33RSbHxRgd6waNd1Fgdjics6wkFRADStd
ZnA1xmTJNB3pMi5G1jw/1S3C7BJSGSMUHXsjTqwL+1prXUnWfnYp+9kT+12GA3eWfwsvNR01BqBE
u17TDvX7lUhxSOwRNn3A2kwPCnSnqz7nfZ78PrmtV/sj0kR/OxUeKwgMPy7YIQKh4HFVk7ODmB2p
OR1WnluA7DpA28k1c8nUWkzEtSnUHVCiAAgtMDGdgZtMjtEnZHd65ZqLDfDhks0xveFwBkRaHlwV
4+7trAFlqYkWs4RA9vSzkSILsY6+SD9BwklLyZInu/I0DKIJ/gAhaP5fZqVzkp3Xfjvq9izOZIWr
MUuh7jIw8sQFLh8ccJFSkNp8eGkHyHjPZgcS/7GiHj6t5V+oj/9GHa/u2m/SsMFxOdTJZpkRkA6h
4dDCElC8Q/PvL4H6Mz6X2Ipy/zTtK4KTUwVqjtMgiz+qBdNz7fpvit2W2ZZRvte8SrMbG4pOeM6v
dZex5Ok/EKhuybF9vPbSJ4qwKO+WjJiyW8Kv4gI3yZVKLOFz0JMgK2gpBHx3qYs1tJxSKf9SXStj
ukVfXhS6IaOxuCiXrZFxprynOiCGCrVhHZmiJleqjKkHNHYpA9wO2cgnOOqQOQ4Kmuc4KlJy5j1d
yThkDSvYT3dZ99b9obRMc+Ylod9a02FEMC5T8zxFcm9eGx3tgm2HGEdH+iQwFGj7mSdhTQSdJn0L
AnlOVwQPCsTxyxrJMi1dut8r+rTH933+p833U+PmDtnDr4Z9DSUc7c2a6gZyQL0t6qBM2JzXnuL7
H3z2E5VmC7EQjNdzADlxIRbc2KVcsLJQ9yAkDA2v1L4wXeDkE6k92GgTkpOykXd3rHzi1qf4Sh3n
Kfph//KvcYTsPaFFEjmVQIovMFBYi4x9ztMSu53Gl6xsJlzdG+cHb2K1Vludf4rv3eqpq0Cl6XC/
xPT2IF7IS/228O2GQizF5QsQOlRKT7/8IFjppTbQ9rGqoTU8/pbCAXsUlNfng8v/6iVI+ZxevYKU
Z4IkqdEB8k7KaHTrn7cpNAmWlfsIono0tPVkaEM/aWhq0jd+3VM4LuCV//zVUQ1JKYmE4p9mlin8
jvrADyVogjP/Ejw1yUXwq3ddl3uY7D559+8JuKThnuQAKWlWytx0jYduYBLBx/BRmoeeSIYDNjdI
4GzHwlwD5kTDIxTHh99PqMvnS2fshrrvJCB+uWAAn+YwAJMwCikAAAu5QZveSeEPJlMCCP/+tSqA
AG82AaABt+MKPqyjc+tO9Ry6weicTJWvv0+IWyZ3C9VeYLfHeYbsZoUqBDAhwqY3kfBpM6V/8Voq
Hk16n5MEWkp4DuA6O39J+NBJUECKaSYS7BhmG/MF6wJUy+FZ3TKNiKjad8oLRRfXdvY9YgCECPsG
qWd69p4v50NlQpBoDIcwFb18uiRcmuLTq+WhOO/dCVb7KoxiC+wrGncNEReYisku9yQ/92NOLdW4
pYAy66PZQAu9ZrXdT3e/SwTdiq6eaJDDHTIxRo87Jflaxb/Qt9ma3XeauQ4kRFh2rDWIJq5QOptH
uehLVUMwaNqkBlOHLmHoMOk4bx9b+e0LusxQ0dw1164rfFQJL/h3vB53pN1exZ9xSLj9trRV36At
LMbO+KxGoolIxuMkmx+zFP0PxfkVdzlHMf3jB7fVrDnHI16tXmnGK1T8nWAy0GvCFHgXcGm5xs5f
QeJfByaCtB/a2xeKc0XxUsZIU/PjWkqXu72DfViG0Y6eAkiZ418t7MW+hxfw0bfQqQgA2wSjYvQn
uEhEaTZQEwLANqes0l6EiTyWAgOQiszyZV5t01ogp1ykEOFIelfmOltvpB0KxXb0PFZH3w1ZahRd
44QiqA21abdUrKEDULhnBGksmgi1ZWfDrAx4npSV70BmId/Bif23kmf9MD4XBHLwlkSWua35riTQ
VJDdJSAYjAhbZPtXkzh61a6GWGdKEfmzfbxK51KhahJOlwIc226IwlbNhCqpTMAvGYznG+9kfQdO
TWk41lEJQqkUryKKu4cVOt8zoCbSRqQllUaDaC9eyoqtWhuX5J8/RWabolPQL/B2UKI+WSwyXywD
mXmY8Mk+owfyHeBJ2Q/K0jMpsT65g6Ehq73Zs1ngrca/Nxvi4wcEVBD5a559OH+20GnUG7sGM/pp
YP7YLfAfTfy5vxSIEB901gV7NqZR72CIVOqTa5XXljuZyItJuZmKxAphGJlN1jl8Rl4lwdPOeOhu
gfveC5CcHCdl/6I7+p/omb8Ga1Bpji4g2Pv7ifzNFE6UYMU1xI06r2KwtrM1FrOfbEUQJeVamyOX
8SN+n3ItKn1R8CB6K659fwh9ic9HII/wLkAtMHpYH6pMfF9NeEnRTpn0UNP6X+Xqr9pqZ8FIvzeF
IzHb3WMd+b3AoFOu4tSGGUm3r0nUrPsaPzQ7Gix7dGirzhSP6wAGpb/60L/kOZorfh1Tyq+RGWuL
gMxheDl0YbeZEwcgQ6OVonSfR17IvTS4SenXE02jc+rojU1Hr5u+MRdK9ITRKUyRXfLneKEQPBFn
7MT7ps42tnLimJ6BOEXuRs5lMFcW9Zlns893ENzdYzFh0KanB4w3qPmF5UhTqbnrlVAcOgvXzRNG
BroCDFefdLlOVQ7a8QtwJwY4ngmdFEA6/b5bL1DKT4MaBfK3T7+BuBE4M3Z2phgT/7iU9qg9a6Gs
9gQmT3KCED+aL5BjQLvA59P8lGAjeTwjme7i5P+lgiKWUmvIuc9iQiER/dhfcnDA1oUu6yZf4AYa
EYE5xDQItsnRYbfbw2u9DDlfe+lv7ypNe7zL+uENPG3H/KDEcoF8mv9r/5Z84KYFYKadLEeqh8Iv
D8UljLxnZi1e1iMYknDScQngZM93AmiouA5BnpNqBv1yVO23WTCpa8HkABGOeCrGHlHfgrEdcAow
VpgsA9DhZapLaz5706T0RXaiipoRhrwDeSSWI6sxw488kRQEAqGWP7hd3lHlKXhgcAlQ1duTtjf6
/I2Tfo10D2RKcIZb7WbdjcOPOd1rLhbs6VUuflm04+sEUCk5coX2tIvp0RGyMhk6ZqJbKVYqh0R+
ILZbL/kBbkTirdvBawA0kQhzz8/wMapp51V8lB+tDzvZPyptIQYJwAi6O3+3qwNPsSstaV8DQ5/o
/GqzZgbkSbeZkXujIcGTGt/C5AzCIdcRVAayfvVuqDGZlcrRy1/bfRkVXrBqVoZTZYAsr5D2HOKT
lHLErJGnD+V7bPvyvKPumpCZ52OlR3MtZNvh3lmfmZDhhJSn1hxhkjMmpPHcvaCSnTTY8lDSxBi2
zxTl3TCDedaV7J/Mkb63l3xOxrtQd2fvbN3LrYJU7EEWUibpeQ0Vi5GJU95zydhgDo8SV4DpYXr2
5yLxTNIAIg1gR/mDROx4FLNCtsB0SWtNBZeSoewaDSll0GvZj26Cj/cNKw5gtjTp3sCvdJn7PM7p
IdX9pLSZz4F0qhxZRuAn42EM6cbwKBhkvs7RCcHyX4B+8OnkA789JfvYcjnqM9DrJ62snWyp/bty
XW8gOdl3EdvnrtUGr9hFMGT4VXrRn2qpasA7ia8cLstX3tNPV9QRmjYvPL/E/nxv50+rnSmcZZXf
+1er08jvudAE3VvrIkJaXUqtByrhV+hW9VbwJksnZ4GyQMrfgEC3HE4E3osJg8P0AEsmGlwZTH1I
DZhiCh77+fD9JWZSguFTYpjHaIAjHturjEIqoNtErz7l3pdHEaOkY0qsBghxSn6ItkMqo/huWcS2
5LCGN8a73pHbstPdKeKIZjnpfan4QxmDhqRNBRCErJEhs9ktDCSkUk74Os2awTF6dOJfjPve9uOz
Ysc3d+O5p21Wq/M43FGw3xxftxo5CxMMwdAnWbsbzOyDsq+bP+yg4qpWBFSqjD1mnKmH+XU3zdyZ
3LwqoR1wrv9LaEca5UvLSDxakflLDrOgki0Zvt1tgwWSEKD38B3+2M2PnJI63an+0vmAr3HlOEd3
nmBizqIkt34rQdMAMzGE8Xf0vt8PxCLHh157cRDCRHj8O35939ySyANOLnNs9/nqaUYrM3h4lgJn
HaIQlafg7Vbtk0wnXqy9U5yrvjPjHbKryMiDfJ4ZKFSWoRH7z1zn0czx21XMT2iDWaMoGI3vBXie
9U0y4GfUX0Kfh8zr10gbn2tWBd3DjSsyy80A+w5aLoyG57fPYIXGrht1oZR1pM2YADLFTns0pNC8
Alu3MT6GSfCEL/eEj0SknUSuJp+08nzh03Xmmpadwy3OYExe6C+ieUw1zHd1nz/EcrU6yTIWl/Wx
kxTLf/BG12vvyuFsnNIlXwA3dXVSq7EENYKOwio8wHtgbstqky/KByEZ/KEaHOfyM6dAT4Ck1AmW
DvBxqv94g5zj/Tpry+gAAB17YM50N0plyLcdgHlsgA+u6AwXiXqGXmuyDtfYZdXCAAcmnCNadkjd
06M20AKsMLLoyS7EhiXGvf1QK0+P0+d+rlYRdEhEyKACKLN4Ah2aPSqmTw4RG+6/ocQoTaK/5gd9
EQ9gpryG2heB+n1sDFu4W9A4cDDQ0UavCALO9rpABXGHVPUmcfnuhTgVHdIGr/0bCafazb8ag9Ox
B6HXPHGzAz0+SfyW16e2vUzHKoqC4tRTQ7peyqVEuKHHZT1/XMof2uczcJuTVCJe0Y5Wf9HD3nxV
CE6nhMPOFZikrLLtkTAJPIQrvcbC8RDz9m27P7aTasGP1S0wG3j9XDsQuk3UTOZRFYQYEu6Zzw0n
T+PBtJ0nmGr2bkLewwARhwco//wu9ZFsBRbHf3Xo/tY3vNcOLFEPVn1BLU7B005ULVrVqRLiYN2R
Ntkam5LlvZirlyJUxbOR6CyW2LTfeIGuAvNASSrd8H3gDepe6k7Ck9xEBaLkPeDAZeYI2WYFn7Rt
2cH1zA4Bi4QIjtQew1/g+xGKEPTeZPTHt4I1hqlArpzEJ1Q5Z05rQPhkVyt1lM4a5TcdyyTo7vVi
pxU/cJhxiFu4ATtODAWgneh0lTpKpZVsAFMvy3z3SztSG6VYFyp/K0r6S1B2kP9ydTSRT8vzt6i5
dNqLhsNDv46I/yHGeLzM3I/ZorQV1jGhLoQQ4bXDbnKUsbIKQAZIk076YcLxPHesirTdeAzHMsvb
rKm5OfW2wlcs58e+ZYXc5GERw3yJEB5s6j/Xpg9P/xGJ7383b/LXIMCGN/5HqZcO0kmNdi6x6ksy
1Eyn5kKMYsADACzi6qOZ7HmUsADpgAAAC8FBm/9J4Q8mUwII//61KoAAb3aLwwA5UzbxkcPXvcoM
yG9HCV296vuvFaF5Nu3h+3Wop5700ATmIL7ntDbaufMAUvvJqlWaVHv/+htZl9OaxvBIQvnG8exC
rVcBkhkUMBr2Bkq+vF3D071rJ1JFzWWJDVnOKQ5S287E51/xDMRzDOcDLeEn8ibVTEVqtHn7JfYG
5BDBvoD3GsPEHyO0mE8PVQ+Ei9eMP2GmciOy5N+lL+N1svcjApvAORaR4Nrh+t2xVFln5CWTq4r7
8eA+9erO9oqlOB6ISS+3jUF1QcLH8TmtPNWE37+nGvt74oEUCKFlv1Twot2GwtEjE3djlgGOQBJp
yuxtX/E4/A3g+pY2o9dchpzcOaSPO+pUPbA4kXufOt6Pj4MWRi5tg0mTxQ+66TBdCRikg6WaT/+D
MWLIp1YexVl5lPFU65PTcSeaPnZeqHc2PJ3BzLp5ZI1P34jrIq6R+Kc7sjVu1vh9/nWMKXPFRM1l
a0bKKfoK3wuh+z5puQnsMXD032Z4w4XH7+kCuebsJ+i8FDnJLlusUJ4qAuSEiGPbKelVIGqXKLI4
xqabUwXqLY+DQ3kppFiLdi/mPd+bkiZPKl2DPqEeX/lcKkrzdJNdWVDevwFFpKmIomNu4t6psemt
siR6IWI21cb4KHSEufQnhfZgoE9TZBLZBJMsHIDa14xjP9gbUnhvwO4hmBfCreKHadlYh40BE+4A
S1MgGVEHY/Q89X35PsZ5jaPg42P115HrgDPruIHO7e+1EgmHjLr7McHetv5vAOaxfUs31xQna9br
c7qBBflDPdj51zEqcfmkCW1bDZVk+vwd56iOehvVYQxumq10+w+Fbd4P6+ewvKZ5z5e+OMkn1TB1
2JouEO2tcWiB31UvcCwU4rUcAVHIBhgyFspWoUUMlTUgYkPP1DNmfRGyOT38QdKLDnkPIGdNjY5S
w1S6zflSEQBesAajtLaxSvda/loOmmGZO3hTRNWhTlYajg/uWa5XSIk64GPqlL9X2DcWxGi8gI4y
QAVE1mD/dn/bNOfCfRjYqoOC+J5/GIrtN2eyLN2q3194/3HlpklFZc3qmtc5SwIUPHmsKylgFKQ0
Yxyg0iCuyu8mJ+4u7IiaMaOJxtkstiNCgZ/tL16KHHvqB4GgGP5w2iC/8L+bbgNLH2CM8uJnfPVu
5uHAJ55Lr6bpduFHQG5WUjFqpl9i4BtD/9RSXBOtrzilMF022HNU79De4x10ZX9xvmGplIL/j+CQ
LelG1LmMc1TDgykD85YAACpqxTIJA8Lg6Bzg5KnVNXmWEOZBVWsg6NsLjThMRiSo+jbW20v/YA7T
gj51ND0Xyta6LY0RT72KcWGOq4DgCPG88CbCGXMFoQ+ml88Alp4o84syW6s81bAeX6cQe1csigI6
lEo6HgizWlgMelGw1EWYhuqIOxxEHID27hSUg4c8dsWcqIcgojtt1/hHlzzUbaNWZBS12p+8a1u0
KAxdOBiSJpEBIj2KROEqq73Y5jiPS7U+30dDAbBowKzDiVlJgUTIB3/x3Gl6AnnEI1Gu6KhYejJz
7VO3bjFg6N9QqebrP53diDCDTILrnGQVN9EpmhXLbSyRw5ay6D+0AZU8OG+p+kFWWrp1W8Q8Uf/Z
rm34rz0pId6/baDoUfaLqlnmZdDAuqG4lgzUwxYUAsszPP67joXNh5mxwQgdDk1wYunqApPg2Lek
9ADDhAa3SvdbERVoSu/m1MHNgVLmDex3o06zCedp50GF9x8tRBr7hzIYjq+lJp7IZ1e+JyRrIn8J
goluP43t3baHN9oZei2xHdF6y4q4oYlwOMGw+GeLLPPJdnkkeFiWjgTpYS+V7sbJlv34MuY90l+I
7eOTyINgAtag1QAr4OvTW0XFNP6oHATQXrL2zmRrtdvNGZ4SKa8+/L+ut7ibDE6vxR28DUM/arH5
NcAbEAfvu98rBDIsSrQvQ13o8j5Ia0Pn34g/vGYVlkKTgEthyPzlclIofJk42mKEJrr1y2POEoTY
bRg77ssORhBdR57V10Ff442lq2sSU6TS4+aQrKKgis8fONRmlHQHnddpAFfMQ7u5333Rupvni5jq
7LvTTJYWi9PNqVeodTHjxqtV6kEIlyT/WIAmN20EQ5TkW35yK1qeHmRLklzWPMJyilDaxYLb0Ya2
Vvf8GCz0E8/BQxIotubj2kSCaqtVTSSOLKg6fsGILq8u5iRuWgznpihlBhVtsmCCe/cDzcd0uxzA
jxi+jaFF+Qhq7gDnz8PJnolWLrGchXVa8UoaySJT2a4+u9QvgE+byddFwLVJBJ1l3ETvJuuLVt0l
RMrpgCQ1HVg3xtCswuYUz+hV7Z+FXIInDoZZwj6EHh/kXPoIWLKTQk7mH1Dxlj2p/WjWa4fu3rsJ
OD3u8XrPZ8iCph2wMRVfEwArbsunsqwLZmxH7ypfamYCEJ9ZgKz7PfuJmqLn5EBT7zoUtPrzl8uv
Q6gzt5ae5ZKq3yUYlGIEee+N3JY7X58vKXHSNHBxMJ/SllKkm24eB9hP8Z3T2cX+PY4OI0EkrRgM
pdcRGSaXkxKhDzW9Yx+iKNK0B1YRGWW1wL971j1hHWchN8eMtLuI0Xlpr0eZxixmBgCuv/2UkJU2
+Kr21fCT+iMrLvhIMt2SjymkbrDrLyFpgGUAorvWy3JcVDnt08BTv7ZCT09tHZkumHg0WGmfdOq4
qrGpqd/zKv3gtu5u/ojVkZ/eRahTrzjgC7RV5vi5BN9x3RSjlFpZT3L1UoZRydRhTQ6EdAylF9L/
arj41l2khjkojXBO4U53DNSMhM7UqOL34rVRK9g244jdBXwS9Rdq8tAYAAEp8I23cy158y01gN6D
QhG23KY+Fs7Zzg+Uys7sAhEfc+2CNwmNTKf9N9mvh/vPT6weJ0ofNpSf5hNN4XsUmZX3tnsyBX0H
ySSrPVS5dQESShARecMlJtt9WCFiLakIpsTaigkemGEi9yV0HdBjET1JuGdSj36wu7CKG/fZJnPe
Sriu1k93rJOuNAyfeMvlD3hqZ7JqGrb9E79/QYD7G0dqIYq8wqytjxJM0kTntYJC8ZKfzDtBnoif
XJ4rNv+QDU2kVnKrQHflbfBvEzebphB9v/lNVVXiBolP/xriOQNWhJIHxvvq9mfIQsMyGh/7PGiN
IyeUpBQ4FtofHQOFPiZQJNTRaSUwHwuSinLmt7oPHjCTbG3wLLEKCkqca+quS6m3+fzPrkilcHHc
11K/wat/70LgNtUfmnDg6WtSjKtqdDN+cKSJchp4N1xbVlMcL7icT2xd2I6obFFkO588m3QFLRwH
wpkE6gMvOz30/aaMZjht6beukCgKkmxkREmuMEL+haXODOqgJI74Pqy+gznoH6psBXaMX0/2Fo3p
3OFgEi0pudiv300ukgmH10ZlGMJCeOhqlbqpFXIrBH+kL6xrBp/rFTGj3gDYC8guN5QPMhL4Z3RO
makmEScBZdgxQvzm9IAEPDv7DYb45sdNz4DLyvS4AondOQfgS6Py79wTt8GjOUmQL2A9mGTzxe6h
1mGYlJHTXWVZkNZlcMloLsFP3lThIWbX1ntPoMglys+okdfu6O/GsPZx3dXlrw2HHK/RKb86xMjb
9PO0KKQumSpriwzFZcLCeCb+AnJtqIvyHkzlV0MyKKESmvErRtigLiMWf852d4hUaHcbzS4wFytF
koO5zWFLEwctMQLqalOW/qGhRquDOPvO2/6GCo2rXBYNkTlhc3OfHMAoZ8Ipn3zsqvNv6IZX7yDf
f8JNIomz5U78ifbsAFy8XS4bE/+E4ycjoaXfjbPgHVfxgYW4LWmxmY8v6+FNZPlEx+qW2rtATB3e
w8bCObr6JT/+VrbHBGnSb4UiU9YexLXqkr5mICk4MsTghIkCH+NZHX41HnPrbI1bzr9tz546M7S7
ZXhlkgPCdZ6eSc0yNI4THg39mFXl3HwNfbYmPLw/CQ+k8F0c/0oaC96E6QtiNfPMLs4u54+iVbT1
ihVN+icSlSdRPaNQDUgAAAvwQZoASeEPJlMCCP/+tSqAAG8pK0gA6Jv2aV2sifXvbGZjfHKr7uvP
/oTsZb3yUoKd+O5itEoSLQpn3hSCv79B2T3O8xx+qvVDX0SpWIi1uIAHvuB4rZIDYgl5QvXEaBXk
wzEErMqFGh5XC27GLi0swJyp0UIHeEcYpDAHORwEtl00zW5NnCJGusVwJYHhpJvc7WZa4oacdv56
tnNNDrWMY4p6Ej9pJeg7OhxX5kJkAq8LciXSQgrVOgqK+PjENAD3R5/jzERqZze9ChepiFUtLURM
4g4JG5ihFghj5L/YK6V5GJQG4SDfRB3swa1hIeJoD8lybDYDiZHNbGfdVajJslrMaqV/OXXHyJw9
Hi6muqsudusCVrSsnFEWZgGBG8bNTlOLaCPwOV7WbS1knTdUJQ5zLd+mSKGXNJHu9E2S1bFtkDIL
NxahhlspfUZg/A7vzm+zY9iDqP6mh5yGZcuk8SjpESm5d+uxeoJyfjulLYJsRRJmoDjTBXrD785U
MqLNQvkfgNgKG39ByGb1AG4t/jfFeQzfqiGIZDfq/0Cla4YJAHdH0u4FeeMWkwsu3LtQvouBhS+4
25XwiDUGvgm2S3h8bXI7tHtpZz6X+Wc2lB9XRcnq6CMXLXhQwpgV+ycYe2a4IhLm/rrX4PfKGrdV
59YAuESJ4feFqnRxjA/3CpZDH75YlZIgZQm7e2YBIt/iOWRBm5MXUraYZjmzYAsPpe8LqH17TcMH
6wJdvRjNK9ChHUIVcUUGIcl1aFK0DgLvLWPCKdTKdvU3vMCHu25vP3yoL/QWBxGAv8a2Dw3G9MOG
zzO5nHzpJICp/ipm9zNNP4FgMbCshxiYWzYAlp42AeKczqvqHc58WKg+Mh07D0m66ZlOyygfnKCU
P3G6AR90uthQ0pRKBpbVDg/CHJEt0zfeTsFw7/ZMKSdvO3UnZbxcysQgt+VhKQgReOXEObg2RGEu
NGCaO6qv6amdqU5CGrdXEMbyM6kVoEe3g4H6uQBvfX6q/R8crSv9lgmrtAGKr5E3PIISspLLcZzu
8bcf6KnZ7fIrngVOJduhXpjBeTxUjqyZPahbUE6cSJDytrKOF9jkRnE0eMtEdpnhYHRYy8yBr+XV
16NLS80KJ/C20KOX3MSs9Q1XRGBykZJfMoaWkpWPcmUT50PI+4+rGyjmX36QjyDPnigiWsI3o61j
sxD/A9KBmZX22rlmu0DA6IwlZFVibI6XEZa/Eo/82YjzdqlOZOU/cQYZoahUtnlUqdeGcDnxAS9r
zyVphNyey7oK83AMlNnmH9G90cJA6BK7NI4f87NtKGARySOIM5VchxsVwgCiuVHc4vo+P2r2D4fh
JiRt+Rvo7y6qt6cpHm90JIH0yFVkhOVKu3/AeO8B8U8aNgaTGI1h+Y8/dDBpSl0nVXlEX5ASoIq9
qoeteeD4wU6o4XmuNF5lgGW0PBmPv8TISrUKD6TjgOwHT9WXCv8dKhfT7ZNa+BW1ZdJadAPaXfVB
MmWEv1Nyg8P9SFdmKxvlNgb1kanj80rkV31i8keFVmoi9QIWXIPpY+U3cXiDgpSDDanOfNg6iMEa
Y65exb/+BywMBUWRlATtqLqNNK5frr/ZH7J9GEpyLL18Bcydh7ulexnpRgcJ+vb5edefXFp9r5v3
nDQVCRyY2/n7+re6wPU3GR4jVmQBuxU+MCZou4/+gUmK+7uPIRJgA0EqhrDaabeL/jwquohrGLxf
ZK99pf4yH4mYRq2zu99zkgrIlyHxIxxHTUIhQL8s7i6KoLvM+xe/oSX0E4N4sIM4B1mTrbqoDWFt
TBZ01fQrEeH/nZgK3ks4tdLTX6NmUmPg4pT85T9BhmQt8it34KP5iPVv/GspWFzN0hDtQTIDgzDB
3oBUjoszaMJl0AjnE+Npb46fmSAtLmJWJLPIQPfx/AqBXhLf5Z/m9RyHe8KgV9ptwNmS7ROyUPS0
gsRA1Lbvj+n49b8wFb4ZQ7dkdF6FyXI9v7NKLG2U8n7SGMIYedUZNB3SsJHXZVeMEwvlZ7+dcffe
Z2sjA0MmVqqWaQZHE1XKtEo1Gahc48kss3ykMfepqIcbjWLDprWUmpUkzmqmWH6IbaArNGBzGJnn
fuLJrFJOn5QT3LMetemZwczE1MC2T98TSCuji/iLU59yQ5BOL8s02w6kmfrRVSyyubghviwcW1Bd
Qm1btKWpjoA5KWOrZoQ6YFZvrHtrjW1qwo5299HRFuCG+56fTQrgOJhn/zBQJf/WDbkV1ESieTd0
e3eOPmFs3qUuqhgawm90gckqQ+VUULDEZLsmI7h4A4u5D/WN3ZREXrj1DHGGKAedV9WMrEs3JnYh
6NskfR4IEbPVExDUujQIZThf+5uh4e/cTDzM/3YtkXPkpoD4TD76bUqCkTZ3zPy/7yKy7t8lMkY7
qugdzr0od0m3I9aN1bElnEsctcVJOfOjB9SZdOeIQQuuknIFJpyLle6U78q98F3QXg06b4fJV4JD
3o5BCEAtbGFzBEYOL4x6x4QKz4UNCwL4VFfuxsaab2X0zROW3wMesx7WVWxJJnq8CHRxV7bbyOli
JjzyG6I8OCGnKn7vBd0+gfpQl+Sb+4YFOfC5vN3n8JSdiin5IcP/aL5DO5Ma2nJLRLzMxx8tZbHy
mjsCwxO7GcRjn9mjeJpTLbRZT7ztxE4gkvnhekgqvD9TFL2MrrANZ1woInPLChNKRWPsHVMq97xv
kfmHtUDFuGpJdz7+BhwUYvQfv9e3J78ey9GkbrzcRWNxXLbSMTEkBm0OiHXRhJLxGVQbj9OA1kZG
NNvF8PooK/mdQFPFoiBh8imVNX4aiBhcP9Nl7DVocgOLDj3jABytpVjEPda7eLrTFnSIDNLD7VZN
RJUWJtw5ksRZY3iMI1q8Kq02iwjbzByLeGt+RDGECnFGiGh00pKeDEFnXIR+iKAw1kB3BlcBc91k
S1OnmMeq23ml1l+AWe4gE+FMp65nT4eRLh+4kN/kRaxL5vbArDqcnGTc4RZ4vpVj3/fbZYPjBwFr
ASKNEzI0h1OyG4yRw+UPN8A8+08qCmtsQpDUCkn7ZFXTbZyCvAwsiR+7jhSwJuJC2RQqlaHrnQ4N
JJdh7r8TI8qQQ5cvtXllBfDyaVD6FN/UWnveYfp2mXaQCI2IPevrhlIR9fK09PAS5xox7asNP0Yb
vmTRw40DS8g50JCqLODWn06XPkZvkKET3aGQp2m7dKz8sQvbqZ3a8456P05lOJktKqwqD0hLPooR
CCrfuTVfTPmO0Ju4oC0zh28Emc4DVJkWR0GUXJVwdlEmLBTciS4CyrM3mKV4+rxXzp3jC4UKIjc+
fdrfIH8bUMDyBh1ck0XFime2jyrDx1S99J2EHvCm8vu3aSuqxZ41p44Tjl32xb1ASh9vGTGzoLWZ
FmWQBGsi02PCrk5hAq48aI0I7MhUFMaHS/AHGVQMfkb2H9Yrj3Bn5Wpn/1YkZzg3FYUdHkAGtBSP
tg/BcHZOM+l+nrdQ+095JQuqN6+NPX0lX3zaJ4ackh3ZS9Jkth+T4hNbCAAcT+T1QgbXxlfU6K0i
GmLgdCuoFRi13VepUOzg3h1m2w0pGOXz1qoS5XH4z9rGEj/1JXkRdec4Lc0JrHhc0tjc3SLTaIec
DdrNhO8STtDwYIO9mNo2nEX3Y9n4ct3bqMg+8LTcXgW/pRbA4yTQ0ZiLzouFo4OcUO7haxEfcrDP
uaMLjMdvRHVxUCBajtG2/KDLhQLiSJYqGffLCYky9nzSqJs/BPOBswgJgrtS6NvRs0XJxvRuBj/I
s/jO45kqpZQN4aq60Mu09nIXkUP4tn5pJF7Ai9pHednUKFLgw17gIuZoHakS9PIxcowWaa1Y9PZ/
jKwiYAGIu0DdylmplivVmurejMyBhzN3/VXXWAGKfyueU4PeRfsj/xXFlVMoAIazX5YzQhTugzMA
GywwM5BtQSDaWhpaR1WNhX4E9gw/jy2p3mOS0baxjTkhTjqGax61FsYe1zgUfs4KPyJ/ZyaBxDEt
FpaQ4WDhBC4kXBIxoLU2syIBvMNETbPtzGQEGPkd9j092OYgZiyeDTyuiAcVYSJvEE1gAi8AAAtW
QZohSeEPJlMCCP/+tSqAAG82HUAFbucwnd4tneCw18tGjwIulrY0oQ6MHaydX2iCQOBQPnxgutca
yzT8wYO/iX/9CQ75bFhYbQeubZXRz+S9Y/jRR8nNBcc9xlo/d5vSddmprnPgwJc6VJCCl8fak8Dg
sD5pETbdiS/msz98OQFV5Fz2vOtxdwjXROa//nOedJIVq8qSFlGE5NuA/9Nc25XmcVnlAoS5ia6Y
RlgebdHVy5nsS2brIlentYjkxy9Q4r1QJqWgo93WR5dwTMD5QOfW/hF1G2GfPVZlNTHO33VZZOHi
9Is4L7x0koVa1qqm+tMBIOeLMjZLDCbO44r8cV9G2WwlHyvp1wZFP6FNiuYmdTm36IJtbLI1P7NR
HoxiOsYCimZwoQ4fUShHi9m3yDFNLFWrYWtdcR4TggWrhVDwK4BM/u3fopjrF/54VQFVua3PNpBB
zFp+f7dF9IqP0rutBbd4VxQmBxCHp4dqE4mafKk4O7pNSfqBtcMmNpLnwXleItBZ3C1oIDojAsBs
lLY9qITzPXniVkw/BTWVpyw2OCgDvJSpS7xWyCus6jR9U/UmyH0xrmXMz4qzXYbQLu+8ItaSrDC0
KOYzDdrwlIWfG9aah82Ge6LzHBujfQKh9d0DfgTiYPYnMIRLvfQ9Fw0u5gRtzVqj04l1wItBqdSy
XJHvMjNK1kJ08yzxpn/5tf3rS+VwnqA6yzOgU91MXcTcaLK12OwFZFfyXH2ItISOZia8rtcsaPJA
djE/uma1NSNNz/PuLEWrbdNq/4nGDP9icG5DnfQT4iJ2x2UU3xAoJvY7Z6f3cxr2slmX/pov9xID
Oy/a4CaYIMSQEridvk/V14Kg7WEvbMCRZKz226cH6cbr5uJjpKOXtcIebZQa2YfrMCz4PAtc2BjY
wSuDw2ZkPaFNeQkMDDgfL3CZnDqGCvVenpDjHjlkiIASuesFhXsvkpKaUXItrf0JYIAHSxOD6AtH
LK8p9vJt4jrqqLmCavoADfBr9thYeGerzVorvMSbw1xz9tLGcMUsuCjrpDhdDZztIFi/q7Jbx0Qv
ghZc/u0x+AkUVTlkqwQhbmALCd7GsZwlipXQ73rKYB5RLNLKz4WgXOIVjA5wg7dbIEgAAduB+twi
4JlQTCjUSL+9kUMj6B0fytAPYWc6t1E4HODAIH/ybkIf14QbSIB3yqokWd3lAl4Ux/ZWKjBhSS6c
VrX+lJ0juk/sUbbMFsHETvJ6xBTG3z7ZVBB5vnEfR9c7JahWIEmYjnSefVDaFtjFUeEMgkI306vh
7PJSVHZk3eTxkG38cCRjb7gCdYnKmQiV9GO+pmsUBwglEo/1ublJinOSAe2dvmwgAUyzBa13VdWw
SIUEEpw3cRy8zxNAx41GHpA2wJvdBRvbVMI2q21T9HYEkr3YgAQh84cK2Y1xZ21KsgZ6sFhF3kf8
k/xbC/oXBAeLe7zR5ajda+b+yXSByk44OCPovyPvWblmYC3wd+S3s3OrnonF6+L1P1iWODeNY/LM
fF1v4rAxI8cmfJ15IgIgJDHMPELPQlvA2EJ+K4/H3DsxiB2fUr4ycTTYeCKfm8HVlNX6dEQgPbzE
2ax1O+H9TbFGhEp2hWQGzGz0PzwgGMCzHOcmfbElZkWaKKAEuDin/kBdo3Md9Sf7CzG+lpRmj6ZL
CB6ZVscbBuxzkPqcGUdbmTLzQ7MQ8jJ1DzXg4uSHG34dSYG72oQe5xWAUJdW+8eN7uZaDXH1A/EU
IvC4RqQNwyOlQ5IWlefbvotWrtOHG/u7zus2R/j5Lvq4hrVKoNySxBgjkZOVu7Ir9rQ/rmUz9hkx
znAqjKl+3/I/a01Q6EOHGbIhvyucgQgl4oMvm5OlyywAC02fNp6baeREszULL4EYCRyfM/yFVZ9i
i1D3ovOWwL57AY/Y9K/soZAwNsLkwuOhql5nPSTer137TWXRh83pNSfsLbfGUXm2PCwdakgYZAse
0L4hJLKXNTwgUFZ1LuLNwq5YMLPJH5UFu9vlv/8N3d9hjH4cs3gcOZVqlNMMq0qu3b0UDstmcTR0
dqacA/DHxaoixeK0mk0UV74sx0go6va9M06veXEmKd8T5KEYqnd6HJ5JhfdKqwMHeOhA9sQBKY/9
KlYGW48PRBgfOT5bj7nKfCw5FjWrH75LDWiGKx0yI88pIRWFYY3kuAqQczRUSHZTViaOf2+cKvhP
2fmZuNQH7SZV73iS964hq+dEKLGC5bUmo4YBad0DiHky9YCn9vbW9H33TMENqEPtq9Ki/qYnWTDb
AF/tZAyjHYQAebKshifIZUGRX5quTU2j5pJqeZcUIbEffRAI2bXzksAJ5zdGElK0ZYCwTzi4xWVO
ZweiKy2ByWwN+Yk1tQNuyVLelYmo4eoFuvkPoGB/qz9Y7Y1JgyoMwWA3mYAuRYuNSsAUz+A5FZYj
/8ty2YRov+gvj0O5gdCm2DyPHbfKaGVb/NcYS8Dwn7AyrJijZFCGkc4PZnb9S5i7M6WuLVqyWOEV
ycigoHqSLsWPorPxh/nNGvFcb5e4JC4ha5lEnp8tRrbrFk551s2kFOzfPeynZMlWnxbrfsu8W5LN
MRWZ+ZJvMlkGxVyTXVQnqhZ9bL03L2/0255+CPKbDLun1F/Wc2FOxSTtbQuZs7++TDXYf+bzwm5V
ezF1Hc8iXSlfEKh7SdvEInYIQ8zRUa3b9Rr59swt8mcQ50SlF41Yhghvrc8gK3n/lSrq0c1V/cuL
31cFJyZtAbtyZUuk3mMR9OUXQl1lkv8ma9dtJObuGV+vTIqRvd/9uh1DIEFK3CiPmzmvOzplmqsE
fjwaurHdOEUUlxnLNWZ1K9yu1SIAS+xS9upFZHa+IPHJyb2yZ/wS8SRpCFItccS/HhSWOEjXtBAH
WmJWFoFGCrs3U0F0chLmPBTfTEt9mipwaqFSpaC2c28qsrBc5k5Ur6EbvYnjkHtjkCzF9mqDEscp
OUKMm4yjY6x2LzckMAt5rYFVWtego/cDUB10HPfxytBqsK9octfRYS75I4jnxq86EQVdnuWNtRTY
2lx4cxZKtArQItILXP0gus5VWhkO717D1v2xXfCuhqOZilPouMrBkBg8QxrRIaTBtxKCQ4c2NYL5
pwXsMxO0ghp34jrKhjb1z3KzEuj9NvWx7hIVi+o4W76MrW0hUVMkklhPLm03IgRY8tG2Uy/KLXZc
URdeVDm0GxVSRQzX2yN548rViAZ+s40JnYyZ97WDcaojR2SekgSbpjaUTKDsJ4iZXfUkFfY3Uu2C
bvXTNWrZaWMfNV4lPrpaN5cRXGiHRoeazMz81Wv0Qjr3Fv6Ml52bz1dd0apUNNS1NAPzCNHJbZaU
oq3XoYkahyyjKfEXDR5/1wiTH+kWH/5dh6ch2WqT5PtXzPlkp1NA9R64YyCem0TI35xyM/wbRM4n
vWjl3do+Ea0Ez0yugRBLpgfafYrok1SHMdCA0wPp3qGyBza8fr4BMILUPW2QoWzrWpAGWIVwNrT8
Hx8OZWLpkXuUNYa8VwY194VU+MO0V5jBFVY8snq5acsSNJpKT6Jne7UERTi1aBlfStsznQfwSPSF
3EYhojZZ6G6QdoJbvuLamcC2mbuUMBse9pSV5AzpkBYX4xVgT9nSjMBl/wX6N2rQ5aBlGgb8Nv3C
88ZkSRHmZzlRz9Yl2COKjyXc3aXXlbG/V3ePOpYSbI8eUGCF8mPD6GcsoP+DzwRmUMcU4chwvkip
v+SlZE9NZgaJoFW09PREtKLBJNAHaHP1o1dPZbt4wVY3f2ToYsIyWD2ohz+b8RBCV6Kejr7EFpJG
hIN7hHv4QsysEYDSI1D41eOg4JNeF5ZfzySZNrvGfPs4JybTMYf1aJLrm5F8iFIKLOAKSAAAEJRB
mkJJ4Q8mUwII//61KoAAbyafegCIPOvMo/g2CRm9XkXh7KSA3iEZOdBvYP4Fyg3JrNQqRj7v4OeZ
An03n0mvwVAX0WK2ZIzz/N8gPvKB99S3/oTVg73qsUD9Cc4OKr9TXfAPe+KsSp0y1ZugpIfMazxB
xsM0Iyd7NTlQLUILNcxuJCxJonhxnEM53K3ujiFH5XTis9NihCmhKKwrbgz4Z47cGXqDWy86OoOQ
lp3H9fMplM3Z6RVfOHl5wAcVWF0nkR17dSfzZFkHSdlvP65ZIhF3cuhxFwCJEsXjAGfn59MEziGC
DqOVCepFsYkXHHepG6Ye3v+YrdvBNMwC3iaVifs1wLei2XHV/Xsnf6WwGRBxDxG+MD3/atKMyMFn
iuJuBJYrEY8ljHAFbnHdOX3g+5Kzpa6WobQB+hGgAdnNwIvIhrQsRhfaGQc/NIjKJJJ93f6Y67o0
2701Y8PYLDl4/k4/dXQqV8sta6VvHOt5bpTnXAmrvO2GEXyBOxWfpW8Ukhb5S1iDaQMJmD46te+3
NFeJBVW7VT+0fNgTEqgF3GjeJ3LvUS8e2BwcBJ9B1drGApMd64H2Qk+ZXdS9MGlylcwUutuQpY60
MTq9tV3Re+wfjdHaeVBWIGYoPnNk3aIBR0Na7pf2+1bS7fLrjscqiHuj31qKXBE0SM/3UVSlz9r5
Cx1n8pK+25BelDptf3g05is2GWKdoc901ORLdLmGa1EDPBWcpxsOiu2O3BbHvmrCkzXhS33qV1MF
gY3CFyf8qS5G3FL9cE/u7Y7TT4trHnjyd3p7kOryapL2GMQ3VaZzDFUsQfEhIkujBlw7NNHVVLkM
5NdUQcqxvVcbO9jE02gvkZ9+rPT39vbFzJVPQLxbmfU1WrgIaUyEI/SA4sSBLpeXw0JFNTfzYitt
qZXkTnu43wAHrmmOTDPiSdaHbrPphMNtg6rX8Sa7JL6QQ5rNc2U2nhDk8Bx51ntxMg0QR3T6nFxe
Xv6Nz2uZOPf/sVOwKreSDiiik1vTPeLYRqqgFgtcYDXnWAIYXRp4bffXCQSxf9lgC8rMyjTdlB/b
c+KFh3TAfKu1ED+qm9VaQZPUS11nHFMj++rALRARTJszCFBPU2kBmv6iK+GxuReUNQf/AX5D/rWi
NnaMLUwAPtgACZ/WH0IAEtzTDsYUQv18zbh6Mxd3Qxiak1TSsGtHoZNdNyu+phTCTK9As/Vzge4k
scKiPS51IwL3cnzPkSKYaOAvu3RN4gAC6qwSVwo8ZGHXCYTiVsPyRKVx9uvnnL3+aaLx2Qw8g49T
X2N5s6HJUsgJbhORXBp5ImoCpeSEXxpgtXh1t6R48qz4mSroTXtwyINik4c3YL66n2T+6WK9D83M
Ba4zzcvpnOOb/R4ef1UbPj04PydjC4d5fE1xULnv4/kO5Z73+ubbKRKaZAModwJsVjMaRBeqT62Y
CLi/qQBkykP9zT6Pdbkx+3gep+WjEOBDto+D2mI5ew2yoRHWa8t8iRpOyAUzUFpti9ynkTS30bDt
wXKMqDoLIhkCe8F/ikW7GkzPUpCUoFdqGuhkvINc7z4ZVS5LNa7N0iOPaE65hzkqRgbVtClsepc8
b7jJ5RfTsPZShvoN5AYcO2MmupwycWsQt9A5SIO9wADZxrBifMWPLMW1ywrp+qdihsBiOXDR/awA
6cVdlGML4bToxQsCqJm42EbK5C6Vk3lxrvPddosyE9SBxn3arsMOtYxHOPvFWqaRK2/QQKxIbX8M
TuYoW3NuzuqFd1Q21h99g1P702p5LXrCn2ZwYFnExvfRyJGu5VogyJbpyDms3D8V4gsXkJuODmLm
fPrDzuYttUxK0mzHROZIXQav/D96lY+XovD0e71I7yODtktymvQEdx4ie48VMJNHka7UTy7z9T80
fayrxombRDFrufMJSVlvvs7LEBZVn6h/v0DgBNemuPxZ7nkpZeRm2VoOc2jh3kdwHibe1SMDmGYP
Fx6Br0QkC94lxFkoktzBf3Ab6HfegixzFeCBTo9Xf4o3LGs7qNA1QzGTFD080x77PLbiPRqGcRIR
jtkRsiTM9Yydoy2aWqqBrdX4wXixqulA11tupu6WO5Z/G7n98D78iJwFBVVV1P1RZ3Q+WNsGNrfs
ZD5g/vmBXC7SXVCMQQjSt3EbwobI42IC6NG7WXPBcGVP1HcQgWg5+2tfV9md9c3+9RifJjYg1dX5
rj273yn2Le5mRYIslJhHHH3bWMu1qojX4LJ2E9KP4M093Yvrr52W/esyM9wzucZ3xtB3mxKNeE+P
u/cykL11n0mYEGbQ8qiPR+sfNTg1lKhHtbWzo3hu5SJrhr5bkXoc0xWMQC6tnbQnAttaA8bfNZ4R
PdEvpC/Hblljv5XRyVG1xte/cuDI9LWYQ4W/wSAqZl7Ma0M82u8INtvM28UT3HiSOd0z2zofY8Zu
NJw0MuBcMOcMoUXKhv3UaskFGhayMAv4ATKvtpGPHDjsadBWdBTlQ0Pmm1ywi9rkEcE4HD9yruDs
2eSaYQZgMu3gNv9Tk7fGjjTqwE7vm5VUTKYwYs1OoGhxHYF0ZN5E7XB/3FRiedi1nr9BrAT35SU0
T4u1PoUg9vw/8M/TVpG0vTBqkTkfXF40z1NU///uq2Kz2Evdu55tV7W3kL93bpM6unOcFPsRufgC
e9qQD8hqfZKwDeH7l9nuCZmkDnIGbRrmYXN6a9JNqfGSB7/jvQAzhLez7cx5JdPm10RwknUKVl2h
FaiESa/vVyjDcHfiyaRvo3dA8/sVDfeHEhMjOe12RayVX6wFJb917U7s5fKad0IgCTI8LVwuq+BE
soVSiCcxPrPUyqu7pGlvDYD6F+huM9lawTwj/zy4rAxrEwevAguypToAq9kgUlFn+zLk+Z49pbQ3
oMPYXpZUXrZfZ7zssd7jvNIO8F8criuHvZp8y/+aZ0+x2Ld8Zh6qWjBmmRm8ISZcCUWtLvBw8jm1
c6H+uxJY6wDjwhJkPtmJh58ZMdqbViyvZk2TUP6rs0e0g5lwG/k/JHg9vKHLoGFZ3VG9JJdRrcxB
iaFelX/oEG9OY+Ua82f/Q62y3Jfrw8qEzj2e0QtoJpuhljFblfCd1nBEZamZ5kOGyhppp+8kFjXt
WKP7ePQzWj0s/QPtgLBXTYlARsmJA3dYNOquvhL7/6Z6jmDZQl7oFLzvBM0FiFuc2pVGZ5pNABE/
RnOv5u5w7HX7OYtbRvy2e6Fo/Xf2M+yOhq684kLgfvwByF/xxkc6TX9P/1yClJieHfIcSNvm3f7C
bRyvz4oQudIc8wi9JXHCQVA7YAFXnWc8F+357MPyXgmWaGR1XBrd/O3308OIKVnAE4UgO3tPqHK2
bE/dbmkLv62VpZp4lHX3NwOhX7+0d2140bnib5l4FXexDfIPVsrURtjQFat+mRdC7TM/OoRsrVJk
Q1/34AoMUkJTQJYanDcpImBK1IPndlEJoiMUQwaCCtXSyzB8GMpMuCUs37GdEcZ+jT0z7FKXC1A0
d61Oifx9GSc8BlbiPDCXe+4wkQcuHQYnyZ9jQchT8CNW7ZRJyewYuPmAd8+lwca4kDYQsdAhxltc
V10OAk6nYs1c2FokZlW9dm8iwz5B/KSULILxpZ9pvMpDUm0nhRQ+W9wRtCwH5Vqk/Yd1TNNRAzV0
ntbDIRYA6KTc5JrL36iGMh0XFkb2B5yKLCnkgHFppfAgEHZOTW0FF77rLA14jVWPmJZCyDnSzg5Z
HusSo19r4G4wwcKqCl5k346kb8d44Hd2c1xMP7q6BNx/iOj+gh+Davjd4Me5+ujBczGLRi3L/RDO
DtYxxpuTjXiPGNa45YBAIujdqtbAluTOqTBb3SMjFOEmMmKS7YHyEXFPoKHdqUrjJC47oz8AlGut
3udylUh1/hBgR2r2ohK/0w3YBFSsU0rlORugOjIapy1rYh2Y6/yPI8iEWMuwe+iowOHmicziZtmc
CONfBj5yAMOkzg5yMLhOWCQPb7Inf33b5ayBDgtG5jEiKy03hEp5Jrnwf9ppVEv3dHkNZ0ppN+is
fQlcmfK67OtRZdLMXMVFqU/JZpUOLRZBKUJ5sFGS2a9qmi/uaPk5j3jauzBAlWT8D936RqL6+xET
An1bduakGCOwqInWZyLB5REw0lo1SmDpgBCDE5TUFWUFYsqJKiR/vDoBcmiKk8nGpNLyuiNpH++P
Wcda/m7LMhJuLZ40OFEdgao+FqSnPin991FWjjSQ+gtrMWfBaWtr1EaRAQ/BCdJGCFfrl2OE3kkj
MlHH6x+VymW/5D/jeFsNyi//qxx8p05urmjl1PMTS2VXp2G9jezCMH1mjI2c7O09jbyjx8h56Mc+
oSOc+oHf/6BOwkwmZkmkq10M+K19/GPZzdmGWBo2Jw0+J8ggNp4sQsqNPdNm9aOtBLpXvzW6aULM
TdgcXONtgsaZUaNJsctXZgRgUAiY1ZtofvreI0TYPyaARcYW5oOlOWFAWLdVZgkZu02uGUhJTp+2
q9Oc0+gw1F6ktImGLhvTJg70W5zeDmS2VNdjSD0CpbB5nCyrTfVXfKJZRDw9ox9k5fZ6AV3XF1ZZ
WM3Bq1i9zQ7tjETSlyjaJ1cYoUah99pisSTdyPbCuFG1vtdJGzLUc5Mgv1hxdCRGT2FQUoP/WOYW
9GtqwrVCYTw0D/OdxbTD400+5pNZlKfQcX873Kz6SSvtW8v+zw/FwyTJL/OFWj7DaB0XRuEtMH1x
4YAh6u6LZp7a9gmd94ItvVv1shcbS4wz9i3FLZWKhj9kaiFs2lQhA2q9yWuvkcMVzV5j7FTSIfum
4olYZMNL+v64c6r5n0mjnP9VsTQNTEkNB0Z9D0lM54T7Le1wK8yZo6NPsSr71ckA9PWUEE8Ln5RN
PL/2Q7jXqlZSy8We3Rd1vmhheJM4hbtzEwIYPUoAR8W9PAQGqlkwPdF70kgAFOAyQFfEnNjoJhcb
4/gEEZ0x5ijzwVDTmikgjGeS3oMTY8CFfrJXoO76QJWJX5DqZULXgrGfP7O8VKij7OqBHZsfY2z9
Fiqw7EkN1yf3QkGvwh8GTbWpyqmmwUSj5IyL+JERGc6Fal7UGaDbzqxVgE3OZ8xoHGEnoeZpgEv1
2tXm4qs/aVTJzfAvQRI0nvn6a+R/BsI1zwWM4jfkct7hvrZMpPkCgafg5Qp4ja47JcihvZceWSez
YdRTO1GUSy5qU3w6vp6cIqeYbDCHrhdeVo6eu2qetHXS4tOF/0Jad+VRnw+dr5FWV5q56rvLBoTj
2PVfVv/HeXKBEPlpqsNWEJmFomKvzUaW74XB74hYHR0kAxEwx/P2UkATMiWyEehdo+/OOOxkPrrv
fM2kFWAZsa2Z6LbxJIwSH5OAuxNJS68cySf43Yk04ftNLZnVZ0QdkQEIZwkQE4OQnYJzngNioADV
RygTLZORaRBGEaTwBGS0RDVA1f0eumgG/hDOSyW88dOGX7d+PBO1DegxeXhbWwXepmro8rR+5Uo+
PHyolaz35G9trFHfaawpMc3KxyeqKpEQhj2mr3asUJMm/YjYN7cGmNuZhsIgrcLMW9dVwNoytVa8
53eYeqixMXlOpuRwEQi+nCNHxZx/y3YmYTBNeuIu/grJI7ZmGZohO+kupYsm2Q2Am8jV5IcfoIjG
6+4XPIyLbLTPvYY7Gt+zrLyyQ1IkDcAd0QAADP1BmmNJ4Q8mUwII//61KoAArv0GLEcYEADOjjBJ
2lgUPkOTs2e3h65jDxH7m6eyaQnHqEB+/3t6dSl415yd0FH5Jwe7R8suGqjRzaAkRumIRZD0piQH
GI+C/2HUYxGsiBXJLFxrPtxD44/59OiiJNBnqB1DdPpye0sAgfgogtIMy6G/x1Redp7hRT/kFfh8
arOohCNOXXAXgfTgge8trwi179//Q2JZkqjXi1DUYaR8twskVbw5rkvu8HS17Im4oyFwBFfKuN34
bvd1d7Alw9D7kZj9Nrz8JgYudKbxdHj7gy8ti9DY3O+j79KGhgm65U2GFZU8Ai7/tscxm6DRe7it
Myr+HUdld5VTvXAkGSCic/rUZMxV+Zg+sUzZP+R+1bn///g/nJXffScSf3CVVCnuRonVWMFzW0Yb
yFoBsLasZtyAIIFcedU9T65PGbLIuU/X92XJbiAgWjfVu3tKs2TKgVNcgjRzwB96SfwofiGzuyno
tu+nMGHjJNXff00bWvmmuLBtCRNx65tk4zi+x63wElqmqZ0Kk0JsKsHsMOKlLeNmU9duc5P+V4QI
NwIScL7YZZVOO2bs+RiZ07N3+Q0K4Mhyknef61MzkJGxKuuYffOeZrfrqbDwiDWQoq0BH0jmzoWf
qqgvW5gsY8l5UrF/RAap0Q8wrhClfCJdZkuhOCkj4yII+kEZfwC2I0fOIGgXHK720AfTDJ38rDSx
2nAVsYzweM1IfA0o1FmNxkfJbqJQ9qjtat5XkZPOiygup75vMWO6BGW+TWGgS19WtsQ2aXWXSAhR
hKq7xhy03q4zDkIjgx8W0z4Rt3+ovI274aKoTM64bRIEEBMSJwIy/8CDc3jYSO6+RihwZGV//v9X
dxm0txGbnM3vfolfdH6b/qRkkyAUmMP776ovV+ckZrTyT/nAA5TM5pKsJkCRVE7cVSfu3JBb0FzJ
ZbYVlWlneXR/2jiz0XUav40sHd7y0y8RN/DnivQGRhVBOj6D7Pjfmc+lSUAkLUX3C4tKd3eMKlvs
B4pzTf4yv3S8bbOOlBQMs1BySguFmroR2baJ+QGmaYe9IJibFX/NIPwY2b5leU4Kmmk2Ig3GSPuo
m6DjOHAOlgNbmjaf9rdi3Y7kGpi2+02YvmTR1iF/nyLR3QkhGoThL2JZFp/MhtigTDW2wO9ucms7
R3Qh0vb6g5sfn9nIPOLb3PCg9pXI6F/+0Uz69txaNLL12DaePO1L04HyFP3nia+CBpNZs/L9UouJ
EaNRe1Z8MevPCnTMI4kQv+p0fRcQ/Rwxa5n4e/Fu9wcluOE1gP8JtEMm/UUtaX5EgGqe6y8fbP9H
GbYwMaaN9QXike1Yd7q9x3k3P2rFVsIaKRbHy3d7iFkmwYm0URN5UwXF8W1iZSrAVBB7+TiRq+ln
X47TfWB5Kk3lbE01DxzJo1JOO8fiNZybGQfkfIXvmryww+eCdcQVDNScf4Bi6NGFmgoT2vbSiSPY
rB9NO620gD2k64eeSedCKxbfWad0E77/j9Rl+nVU19rq2ib/rEHoiCyaTdux+5BzkHJvYA5R2Bn+
y72C7ICpCm0VpaXhMnpb9UdTKxalQ8XGj1WEaaB928aqxGGPCayVMT9Ok2HT4J7ZqNV9iszd66i5
WokhcP01euSbueeJEKlD66uDKC7MYQaOjeGZ6zeU/v5VKlpLu3f7Xm3n5q/+zxM6knzBiqUEzmKz
MrkUyoBnFJCN9s9c+DC72mZ31Q4GuTdSA6mK/cR2kQ8r0yKiy2Q+l3KaauNaLMYjSZFuSO5apldz
M9DvHfMPhsmD9Uc7cV48nS1exdDJV6L5UWsEmPuGeM61yNQurqyrD8HFLbR8zMmTi+PB2/uJTHqV
rj9lmrdITPw+faww6zzniA7ambiVvBz9NvK36qDIQB7lDtQr1At9dVZZppon3Pd5xwKI4y1OJfk8
ThdqMakt3+cKUUZ3vlwH1YmNzv+Gh+m2HYDGuMRc7ca/JEqHbbuBfSLUP5GmULzuIbEvIkzkM4UO
u7/5vI81Y92F03ydrhE+cG3UU58Oin0Pt/jX1ZvCfyQE5vgKJS7jpdXrBCqWt40U49SV+fTxxarJ
aANOlrlgLOwAAHkLVG/FxAHhBn+S2cVOgign6Mt2Rmtc4DRU2M9+VpBciCKuB88nwO9qMpJhO5e0
cNMayI7Dwfv78SbpJVNSTnRINDZqIokF4BRPIN2+zjH6JR6QmL29GktHECpa6x84y2UHJhz8pA/J
lo0kVXt1oWPNk7YhU5Q6k+tgqm4tC9T+ojGokn+g4DgJZ7aKa4mBf/I7Tr4sb59OD6Qqgeeqzkaq
/ERlAL0Z+14GcKUrXWstTAQmy3CnPLDIZBfUDA2k3iyu4sgYJXAIF3aCCbmsnM04mTAISPZYoLc3
uVgu8l30yVWp23JlsG74O1zjmQdPfU75vlTlBJUIc72jsfpgw7wWC0w5TiFThjSlYxvFS2KsynRD
HYVzas75vUc6jSQU14L3w+cTGi0B9EzLrB5JuirMBhuvyNVX49jSVsiAbp2SEwLqiIgbCvPQZZ1M
4URGYmiEjjNv9iEZu28CYmI60nBnHr2Y4M+MLi84NKdg5s2ku9LNz5gHOnZ2fztXJxiYCzQoA1r5
K7VKOGQPWkxVdY64tLvuVKG5Kc/P4yhiJwPascJ4mCo7+XlUkxTyU50C7ke1i06yMXRvTuhKZnav
/+OzbhQJlUYITJbW/LZykEy8Xwmov2JXUbjarY6rCzXH/gcGlDaG7q6QfRglyGOnREMFcM7UYRg4
j499r0ZT+65R+FXZUvEiGliRJNHli4+Q8+Ks+TQ4qunld87lw0VfASePFKSmEnAqYk6+vIE96deJ
F6m8h5cvqBEtUp6L1VaOXc+V0sU6Be0w734Myayg8pA10tnKLFXykS0c9Ka3Iut+ry3gtSnLnUxN
ze/nVZECOzvYm8GB80yVACAgBxh7VRwVHV4pSsuMxcZmUd2QgWCp+RI8aonjCgVpXBl3aAs3tBMM
V+/QosTRguvwyL/E6X+LBgp+a4ZazOYPoJt7pGseap5YSG2+m1NsClEWBEi5NWcsaGsBifsndJE6
l+EOyAgQTdcGiFnIxrXCWLkbU2LUNHAUF8LPwbduZ9wnqjhUEAD3L4hT7gNPV47eeWZMPj6brMIP
y8sr/cZKvWVY6y+0+xk0fQYffBCf6iIw62HjOB595cm250p89s2QjFy2z3NxyKBSwDlVd9wF6Omc
Jcg260x8WAoU91iqfORhfgKC4SXJbNVZ8ijJ47zB1Qw7G0kLyPBgMU0gUpBs3F4CAhPYY0Ys97uX
jSSBgxefB5K1nc0NEe8LkZ/u0b8gIcxkfDah2Q/rLeH2iJ341S+v41AhvP09fR2xcwqvPX3ay47U
/L63zXtm8w5KLgDi6EaObG+wp+DB+AwcBSCkCLb9fFisJC1sNeMAt/bsloD7BAaNWpcsJdr53fcY
NdGMJrOaP3AIax6z4rlpIxSPhklE7WBiENZEl7mAUd9xT6737ARYmp/PKg7TmmUrbHhVNW1USm/V
mvfElt6SiqsJWMi9mjEu84udaH7GM750StpZzAkSbRBp+eXmxcVnpZq1Xl+QZyBa09ZGW9L4Vfqc
CpP/uQireBHEL/ei5AKS8FAw0kbK67dh6nO9YCB2q0qGW74V+soZIqmckkExddyXjC90x9K81XeW
5FvGssguxogMV2chDSRPDGN75sWMLIC+r10oQ4aZOkCAv5w7qQjklIVVFGtObku4zBUhCOpwWkUB
vKKw0LQ7S4UlW67rAPrc+/Xa/KKhPhbLhUoNAGcT6IQS3Fu/KvPslbn9K8HJaWgOzKbK35zQYNBd
FR6UGBl06vPdVGB8AP6p3mvfeo7CEpdoOhDUMZITk/1NRwfPEzb0S2TfWLkamwBLaxnDBFC896y7
dsRURiTzRfDQrEjvRr5NoH+JdS4rFbpBo1nJWyH+/ekDwGZFcAnM2iH8JXNbceSdSV0K2e7hEhfj
8pqVdyVkKlkdrYpZsJlwmLkvCFUZBhD4AHzYDGnERR5Tv4QKLhDm1BZPFILZyQmKUhJf6okgiDTC
OwR/P3FTQgNFsfhvMQq8Gs9CqzUTH70xBHz0IWzaDnyolVA4LBrPX+BKJeUGXPb6y7O5IGQr1JC9
vBJIB78hbCowuzSjwCuv/CFIOn1/kEAD/fAzb/gSmlebZ2ERibDSpL6Rtfm6rNo97tJkeBcHqIht
hrkNLHTQvoGO19HrnkP0R2mRPWnludBhFDfD0FzSO4z3VexZT4IexswhPkknRTnU6DSiRrjJW7+8
hbwBZWvftzbJsF4euQBFF8gIo2gC4O3yF5F6CLUjQbEsH/mjljlFVucGnJXhMWME0t53idFcVDZM
1m4gK2xeh+uoiNEyAQwlB0DGthcOlScgpucACDrYhZp6T2HMTTXHeDgmoSJdwAOmAAAKkkGahEnh
DyZTAgj//rUqgABvNfpABYK2mYVgqvLgAK8SIr6zThg535Roxr766iXzvMPEo9y5BMMh6apB1uNZ
MHo3aYzXfSornxJEkxrUmXXLDQzcNKLKXhBvIF/2pvC49w1G7usFvFHZTW47n2dx+rP5rOscuE1p
IqzmFnRaytMw8wlwkwh60WTWAq/ya4tBIQj0HokTu08mVoPgFy/uwvI05sM4ptIm4EOQdn6slf2T
zgNH3fEvZxUb/MNQsd01byAURySviTK9TPxtnzkGZkLEhrbMOzl3WKIqMBdd8uqwMFhZjgoBI2+M
EhVTjCXH0R8w+3o3w85uJZTAEr1FNdI86Cdj1jEwMv1sMr0gZR3hJ7I00/sUsk9bVZabYI+PC8C3
3mKAYJ/7dcPd09xUNZTYrYtCvx1CoVlULlt1WrUCCVs6G9xQnQarFNYSR/v+h6D0OaIemUgee16J
x6SPhmX0t9XSim0BngWedvYw9c948tPqmYI8AU5MNoJ21IzUx3DlG6IJ95umkArQoVKectYsO0uK
KOQk9yBCi4Ahfl7uWgdz/r+SDDC1Jl8WAI8OD7g5jnfWVQoQ5ymLgsdFFphd3ST9OJGz/yZSTG20
r2bzjDWZB+7swyVw01CXTzJ6za5LrVS21tCdZTSS4xADVXao+5nkfZNBX2CX19Z5D+1Dsx0xjFh4
FH+AuxzXdioUAnEjuBGrEUuxCsvKSULxv39yt4gt4muqKpmTdcQU+w5drFvNcF559kNXlHdbcy2d
a0zS3KJVgXc8LMfCGUxqQPTaM36uo694zee5O1bNd4WAww7i69xYxrR8yWKt7YCxihst6nuZ4FDg
5ZLj/9oufDoZkBKiWD8hIW8Cd/VNmAo4RS6esNbNbJEItK6zxqQjENB+BCXm6wBLZDxTM5LnnBbv
PA5yBr2S3DLfNcgxirBb0FvU1clqwGiaBGR9C6F0fX4ipJTL3tUQh93Mgq4V1znO0j6GXc8E9ATY
ckerveTzCbxXOe1nhkkWB1fRbC7SZlerRY2rlERfeNRjOfxDhL9AnCPhSAwwGoGdUNUa6NaNISC3
KtAgqtMyMztF3F/NOUXrQqrpAXJcce/KLFabITqAydMOTrze0F3eBqV76/ShodBxiQzyko1Uulol
zUN9tP3r7ubtSwScS7xpz/3T7DVarYMSslbt+ZTiLWisblCrtKrF/XtHplgfdSVinD05rMi8mqQJ
vf2JTLlldQXZIojwQJPi5r19IaFA+Q973A6/W6KiPAGPP+YhQVlbst6uSGsFDfPBxD9TbRnjkMuF
h2JvaGvKyir3akAg1MXireLrgV+j3qCmbMQIT1nEmCfUlEWPys4dMJLw/VYNso4D9WqSqRuW44W6
bgfqxIy8pV3XMM32pPgfDYvP4RhkklKBkqplsoG/OUZuq8AC5MWXfJJoloAlNpsF95XDt/8nZJHH
Lv9mgRZiupi49XPG+d3eiSQE7IEdDmKsFq3pRf810WqBJSKHt8DgKdJilffIMU+PrpncgQHlGG5X
rTEb9neDqCfWnZIeG1zIHMpY/74bFcjcvvfkoIn5Q4yHp2GOmtajXcu+MxgCF+YgDTSBBCGLdpZ0
AhAtRAQsMNhmTXbGb0OaJiMp61Bzb58ev1QA69WR0DQyjGZ+Yuf0wrSLG6FJEujNr61f8wPbE+No
q93+nV/VLROZcCuQdijAPAq/ZVuJRmR9sSIejrnxZGgtWoYaWgamOreq5FA9kNcyytpmuAPe0S9R
W1S1mzY32zT33mh+9P+1kNK6ebq/SD3NvPTg9vd3ZP9GA6BoWSOordAb7ZAAeWJB/ar/ETrPKNSf
ykGOjCIvbgPogvGYsE/q7EhdEsX32wVL5g4AFAfcmWf+TtRglGy0b79lJwQngKDwV7bu//9QeBb3
X6+d5SU1eByS7Q90Z4SZLZyFPImpMGtvVRpy8Kb5l2zmV6y4znRUROBw+0cdO7sg8P9kJqGzvFBp
yEqm5qiX9d9ARYlUMT/IRSa+1od15cMtgODT6d0GOPwAAcl6PrwrsEKyK9w5OOS1D2cyvPFGImIN
VxFjl3/wZeO/j5/kbWWY8RHRQw05Q8Un2nTDMV6niXhcP+yNl31RaUXDia3hhi3dkEWXAez8X9XB
EJFTGqYp5KL1hiJ3IDZL+1pIZsalmLUOhn0VvFvVOMPiUxPfSuHNTI/XAKO81IM7C9x+Uqxxh1PL
gftLySyAUX5oEHOikyZ8jNPVto58g4G3XQTq4I4XD6KSpw6kU1hegUkaYAqtIp3GXpWs+VznDPHe
wInQUHji/Q6Z5MnpaNEMNGdA1FrKTxbWgvqFk3l0Y3vGke15nlPPwS6uuUX7hA0ebIKere0OmcuZ
oUDE4IplZtO/z+AbNnqZ5oggaQ/HRIxumLwedEHNsdqwBmu6+pFkhB77F2sHdWij/3hzVLLee2ax
VU2sRpJ3IB83VrnIiu4vJYOgXJ4UR1cKOJxAiYVVPWz/QO5VXSShw+zKUZr7aji1eneda0VToTd7
ZcJIBWvXsR8Vp0BEhcayFMuSlkD82gNhHwZFhY4Pb3l4W1xFq/cE5Mdbon1NLi5YNoq+UfSh6/Xj
Q4O+V+9LKc2xtfssbVS8xF0BuwcOx64GpjbmbOdja8j7Uxa56Id/X6rG0GtjOuiyDMyvVrSP/jka
JyVqZ8sJqU0AgA6x4uiY/M3ml5+7vt9nCN7Ar7CipOzT9ZHlrstDX2P2aF10E910SCd1AA1b9bqo
FMCa9aXuC4eyCPs41JomY2AXsD/5eqD1oE44lhzjNRPuB+q5fJkIb3CxfwuklwIOUa9PidD0Pzq7
znFhy0+FUkqZ33Q+/hN+1N2QvXMLwRzHLFtYiopgON8zCVU8Y1eW7U2bOC67PIbz213xcc0ERaDP
s6tps50Y/MzJ9u/k77RbHc82Fqxa4wnQYtVNK/E/aowmk6dxah6Mq2E1AQoNd86LQF+vPluVMkE4
KMv6tg3fcv0vPP4sDv+/I/X3c0ABTVgMg1baF77FcSvieAHNgdY141AzV+4Cu/ephRSKz1HHACk4
A4hDSP4paXwzgRLGLgzGsJf2ErPxV1TAP0BEDE8TWbQsvG6kq7ERgk3iV03fxl+O4vEWukyDZ7XZ
xjkAAX78uZKnc5D2t/cTGlUXfuHwoBbF80bDHYmyAhk6EH+1dXsGkLw1jxZRTMZFzwfU5av5vXmy
2QoWF6gHQyqlNn0alrC4OAzOvKxJI954AALf52lEaYB05ns2XYZQei1yZ90ka+rNgqRyZSFmMMk0
N9QKD5533YGVvX2cecniYmD90KqgocO9+k4tTt4+bWAvNqNfJDelhdD+voqyKyV8RubFkZv8EQAB
Cz53OmCYk8XZKRzvupd01xU70lJ4MpWYPscJx39D9m2lLKdLd+iUA3rAAQzTNoriCt5jL3P6go6o
I3I6aNvT39WLSVypteE6HyoXrKYGh79S+5otHEPtOln+XnrV9BjkWG94pMJLGo0BMcMVUF4PqOQT
8A0gCNcdxtVVguaH/P4AYUeZsgC/+eRb8bkNK9VXqv64cNIrfn7Fz78qJns8YABBHedid4mep/4C
HPHsFxBuW0VF6cc+FgLGjeijOwAj4QAAC1JBmqVJ4Q8mUwII//61KoAAZ7Z6BACBLGbjJruHWs2/
lVh+ULXg860yVSB5nRcLpJshyFv1zEWQm97K8Cg4ngY5N09YrjD6GMJr3tR+4rwuq1gDzBbPdzN4
gk8XiEoSevhKLeeVYYcBkm8KEWgT6EFIJu+khheN6RRdcnilwZF+qoQD1yCdrvTGxrL0Qd398tRZ
BrAiRoGylS/20KRQA9Do8OfbVGMB5ByTfknU6G3SHjf/B70tXAgxx3KXYKCz+XOjkxK62cqeEuCo
FAGcIL1J++VNYWZXyAsNEp0vp+SdD0j8K+wGJ057eQNJ7AMniOILsccWbWwJ0Y0+jr1T+d3wkemb
D8wXpBjMpehocxCcFFiuaE4VBi6YB4JnnRm96c1Xp4JFZdaIkVbjSKXMa3IojDIJoIGnLC1/mgpw
0FeSSRMYaKQHCBPgUziO1+NMsPHVieK9DkAwax15SjLWhze5R3vzTcOejx2nuqp9IWF7u+AYCOsO
MF4afRLRr/mgQt81Ymm5FzAkNwp0mDHQpRGLEUipJhllJ1GgfVEbypv6a0TkTYDzpri4cEXpGgWa
SCuJYwAt/pAgJwVhjjYICarxD/KqQlJc638Ri3EJq3rt7d8xw797Kx5stajxYhCu7H+6gAZG3Pgu
sBprc4fqvDbH5aijNt8WfPMDON8yEk0a8+ohsUbkIrnwS2mVsiYWZPIZgDuhElcNGQOqce4g0oYY
9z5VOwvJEu8iJJX8V77dNmeMcxgVNMNmZrV0qnuOdh+9Fb4tHawENHK/WUvOUIupgcJXlrVeRbYP
HyCBaUBFT+Lc5N+gfY73gTlugtmUmZyV19S5Yho+9qcz0awIanvjLhgi3QgHwiJWT+zvWsU3Pubc
uPOxVwArlN3jBn/TicOseVJep6m32ODqTF05SRaHrFC8eZZJcC6TfmSe1+dmjqPIh8tPuP+K754k
YCAoNU+4X3J29+ydIhvwzgAtDflB6QZ4/g61p5X9HFN1Pg6eooyt7rgxBzylSOosLfC+DO56Itpv
1bieaUG7Yl+7IVUnLjOkAAb5CjzPdyXMB2pf0sAkdg97Jns0rcWPvyoEo7u5Hc1wGbOy/Fwdwz3K
8ossf82j2WpDmQ9R1F9fPycDrrPcVgvWhFavLvk8yXp9hSnp7fRWRHMBRyfMKHYk3Q3UAaprVy77
ltITnnDL1px8Je4ilt3KqbfGZ6UaRsA3EuDGPVxpXxyufHCU0WTPBYh05SD+C+m1EnZPs3NIxzcZ
TgsHpmldc6lxgRFHRwpVKRxvB212yG3NWZWuDNv/ke0cX3/tMT+b+y6EJDk/Qr+CWFs9OYf4wdEx
sL1BMlKYbftykR9ltCyqZN6DH8S+uQwqqyOGOoZfxr0IG0q3q2Xn0FXz9MUiZGSECDUqoMqj/NNK
SOBfdCqJKiWFgY43R+BZiULZscSmVELe7Lf3GHHUSkN6eznXzwHyFUF334H+LkuyjYN8fgVI/3vS
fdFpErRr6Ol3AMZfbCh1eGncKyNo5bgSCFgHVw/XvvtRioGGqh+o7MI+bYCHyqVtmyB/kFZaXsUI
V4zSKAzp34Oj1R97mW/9++v0rNuLWR1tx1PrjKByAMKUBK0Pb+78+SaGa1tTmMoy7JPhzFtjIkbk
Fvwg/Lz60SL9bSObo/db49u5gaaukgHzdPjzNvWRE3u293JBB0DTs7irbStxq/3BiIq0RM3YTGRh
nhYZ2ujzCR1Ns/6Lddnr3OPJciH8cp5/BViys3MxxPhWB+qJdLZksvwAD3+fdb1tkpDRXG4qDGCd
Tj3v/bsW5JENK93m3zWwJAY57Do57l7Yk7+SnfYFrCi2imKjGzBazjVmcm1HmJqO/ioUoNubJZUX
5tVu37ni9TOZrFAu3n5A9D+MMoH/N6fg6MyQqIc3Gdwy9zDhjAgDSteDER4KiUyWMeIwAEkhVH+5
R1w80/0T1yc3HihcRjAiH7/frleRHCx5Zpmr/Z9DSuiPCDlu2q509luStQv2IyXFa7dwmMk0MsAR
j1LFEED6j7287Y03RgNfAgBKzbyaFd9JsDDptRgauV/qgaOtOs+m5uupnslX5dJr/1e00Sl/dh/+
v/cX747FvKt9N1XhzDku6Pqom1LOcgUU6FySJ/eAvl7heQ+7ukEcyhqSz8NIDO1PP1B8wcCbtKCk
zRt25uMfts43k+BkfI6aWo3WuDTBgHRy5gC5L/D9NwV5UJcbU02FQJ+5+oSkDOuz24g6MBKhvC3w
71yufBEMjPPMz8wiznYZOJiIe31qlV7DIMv8aVOaEYINkb/egfX97XL6+1HR572tV20xr8AoKzfX
Xrp1qcRaA4mvuew3HfPpk6J1of/4VnHqwTmbG/iL75+WgxNkL06j2JRTfReYOav+ORnp4GCJF6U1
SbK/TiEQ9vvsl9kOjZ7vP7k2oLNHBzhFbdGiAz5RRLCT5SOKJgWl4CqvQddQ7B0Dul+UbooGYfab
PKhdvXN3wWoxfuzlQKmMGGS4irf5aPuBX9hZjx2ObkijD8r9viyC4gI3nzCaoaF38OKWV4BfBVYP
h19UqJPskXRs97s78ZuB8Ba6JdQvLvWWF4uxWlU8QTD6koCHUZtdw+605dtsMw0Uzg9K+MUxlvxE
F4jvDu9o8nlMpNB83dzuVQD7Htet3Ip7G0mrHBJg2O9/HmTE/21Qbfbfw6eCRxI20VJLpAUKWDaD
9do/zGlEZzKKyY8gdvKYxeHey884KrsbxjOORo7n7Sxx8zcA4zbwys03KIIuRxoXTBzX3JDXUrED
bKEO/UMD/2hd4eWLUO4fzF72SYuL4BeOt2umSW+6ec0AYZrWZthA18xW0jDC3exai1tu/DT0cGq6
r7Zv8F1COr+LcnudjxViKcfuq4CwSubmmDn3i4kwYWU4+YSPql288x+SDfOFSmHfpLh2LhUbne9z
HjM7T3GfrZFCrrWvM5eHgGJ2jirw1NZ1guUlX9dy7BCeSTuwR059/DV1Fu/nkSXE+Qw/k+d9OAap
k80l6211pgnizWyLiOC46CqXWPXp226Rpm28lptlNRemx89qmVWeKtS0wcw3bfUNZkgg9P/HDvCo
hG0PeannzmtYfSK6cHfaX6L3BOQu8+FK5WoCkWbPqnZ3j4/8eyfW0ha2tu6wcrZwHDoa2iG5WmN3
0AglLRflY59+GTQP/Jbn4KxPCdNXwY+mdIZa2dE5jlCuBU+NByw6QZg/uSYvnGtshXdDeMzLsibj
DJ4nIlCicvaJmvn8pceRmsl8SfXe985PQpqqHkwpxYkZi5A9EfaNU7NAkRLiQQ87X5Zk8jHfA29X
oKwwFnJxZHn7bC4VrelElVYbuUp8Z0V49CKBVSfI4R9YeSS+o1LDHHCa5l6FxM2jP8vukx4XMtQ4
Hn0wt/OZB1RrrXVEjxJTtnk07UjaUTspouh+XUyJonNn7LCK6lTCMJC7MbXbL5OhXGiSg1UsSGmk
D3oLUqYqRIQxXS3jRu5QWso4C6+0mSFAxBsLYkgVuqsrtE+wOAgU6UHaT/71rDiOCxWlQ5GYezT9
i09xu5WzakV0vsgFxBNeSP4AeJoADWDfJCNtTK4cbCNF+TgXUtusVybG8D/XNx4JZsaYvNY4+TMd
9MhSIhsuhpZo0s1espCOFTgIXOi7UAOABzR3I4hsME48800Yr3kokNpkWhZx0+QO91DWZrcl9vBp
ftbNyI1Z4zHgRSN1gIVZmo1lbeAWPkJUrLKRI0KaUICNtHYdJ8lsEyw6p90iKOCFrdKXw8gw8cPA
K40E1pAg30aEp85hKjA3tFEaPGMwxzSnNPRdvAWAzkvVefKatrmD322uQg4bB19CQvViRI9jUApD
yQOik4FK8aFWvneM5DcoAtMAAAlvQZrGSeEPJlMCCP/+tSqAAGohkgQXAB2azlPqiotu5c6vzgjw
8b4yBCEnD+6j1PSupj7TDPjgxKB9mKTNfHgtdVDcjamA29wmWuKvFoJuFsZQlg2Nzdztmwv+7V06
YLIwrpiFCONBLAY9mADUPTgBbA5XsvANPX1FXsMN/+2DfUz6tBcnnxd7Ti5zp8KnvppMQHIuQioE
RoP2vGIzSaomoS+RJKNgc3rcmIbGy3aGFHieIBAVeDMm/FSQZWzABuKW7wLFlb6/f6Zl0Mmmj4/l
l5HfRgzG7waUXxj1SxwBB9FMLW8Z3cJBFcUSsjXfUY58kg7OYY42q5vJtWo25JEVOZZbTVOPutbi
bURxxd3L87TYBXgzEYIUPAwHljWJOGLeVhbKyx8EPttP8Cb2NeahO7gmRW9lECWN5yU1SfyxIhz/
OzQRD24U+g8QipkFwzHW879rXMGKnc2AHnmOfv/2lxB7vCOlPT6dDyL+rHn1RgdCb9h3hwx9Unbu
vuO5VaVxLGxC85CvOM0mybRU+FqvmGaf16aWlycdR1pyy1F5Gm1zwRkSLOsV5qqvYteNhmdGXDjU
68GE+/LotXBEXHPRTEY0d2oQxA2QtKh9fipNi2Nzs+2kdx7HcfMsSvS1BAaPiuDmHZ2uXykuYpA0
ESrWlfuRiml9RVzAMXGuPlBIzK4eBMDvUqES6J9KR2waYQ/5H55LuJ+rx80XSg7CoB60oQGbbB8k
6mKj5NN+BI16luNH9VpGGj/gjD8RaJ/ItcBPFquwpwaJf+5b1iwbHNeVMQuCWic3w9mUcZr9P4vf
yThZgdFwFy76KGJ2T7IPtV1mWpnixA12rFUuKh1UASJjLER2FRkjOfK6qnWxg4enmre076JoUZBD
CZZpksU1qonTo5AgIUcPWJJZU5UkjhaP2EE0zOr8iyCA0c19723hjqvcAQHO157Ll2sgJHV05wbl
k3sn2SBG7OeC/MhYqL14CpRZwGw8w6XdHTlqAdPHADQIvE3cmO5uiAJP7+yPcONXz1Rwm2p0GV6g
euNRk6qlFxgWD67zndNjqD4bOo9XAtMx4enKp9szDgTqn0MaGDn2HYuZ0G1r3UyI91H2gHtZXyfK
V7rcE+weT3j7I1qgChmjUYH/diiZfsRulqzIAbh3C0oy3XMmmLHpV2RpujpN9J0Bov7fPDDVCj3A
uDEC6SyDrZUWC+DSRRKM0DZDG6xOfpGCM4NGvtBRwKt2xbqLUalWCei/Hd3xZfh3TCh29MacNWeZ
LfYXlHn6K6vU+APF+7F8KuylHXEcg7GhM4y0sZZpvdAjlj6ceBaUxftfBcUZXofaRsuFPps6Bwb2
PpKdGYdfoXE4gVvNJN4Ev02QYmIpWvbt+Q/uiRgfeipTJ6AwXCXABRKT3yqxM0CUd1ugajkkEuEw
ydjLKtg+2ZqcSaSLbrXgf57LcnbTLLKrPBoqNiuhYRJ5tlk6+OEE8fiy9hMlbke1VHr1ibsvq729
trh89Diy1poPD31gXFGxbmZ6xovV6NhBaTs7KTkE3m5I0QCyqhQmYfyS2iD5nETVsv7iUzI1JEtw
xihtWuXBaIUN2OfMdnPkSwx+AoUC41lUUL+VaC3NBzbCGzRGIy5kg91zfmMnoemv5Hnz8WcAfVXD
HCv3UypKgKlmcI+9HesCYihTvpFXrKmAfRcsgXtL8U6TmKkDlxHw4+p1RjEy6+gbg6Og7DdR+kSA
er4ark8RSjyCgahSYqoFutU5qJM3jjAYTiNl2EgYAEgbBiFmKZNZvJR3x7GovUAtOTONovqIWbwN
ffa9HrS8hnPh7cDgLq0yKaTmxlZn2/0XsN7P+FoNv5xSvxxtMAWdCHLjcEMTjyt0+Jou0YrhRQVV
LfvC1u7GwrVrnY2qS3syt+B20psST4FbeSZz+1FgXNOnXFJ+bthuf7ofJdbYiDPr6q70ILzysj66
DiIUAPz00hFRfv1JQizONXfsNeG7vv0Vr7WiHWClL+Bo4R+lSNEthFt9KIDeTS+uM1k822/m2PrD
RgTmUAAGHdoDxevnUomSfXgCLjld1oBV65+IdiLFL1Oyf37ed9pSqTPG3eRTcIet4/AM8Gsos+bI
4ICTeQY5G367C9nZXzIrZCmnKrC3INhcfriU0CQquHFuSl3uZ2YdNXnlGNXg+qv9/NQmQEvoTwJN
KeIiSCBitpa0FRn+pPHcqyRGSlMz1xD3K6RWrBjq5teN6XZiEQ4Hbs9U7B6D6duw12+0Y9m9rnC8
hyVU3vtLsR9xQR3VSXznkHu2Hv1KrvKUtEljA1pmdxnjBi3wERjAgQrmpcb22mX9YY+lq2oGSfm1
j+RZSPQWTKIA5EkGQErsdjplk7xJALT62euDhabBKjps1d0N3mjZjDTfDIBk+wxeNRN3LQ8NSIRi
pnrKB//VKVZS/nqziLYxREmQ8xyL+pcdr0/G9WulDf2Mv2j5+SSEDsxYAjnmEcRCSDFFJQFyApKb
ZVzoWAU05OxjxJqo3X7LaCO9jttOZ7eLoq8wqRwWFIbfefAH1Rt1OaEzTYjPUBJy7JfP2ayDzgnU
+yzRscw9Bk5hZWGhhxJnd5qbBiwZqd7YWSMdRep3sBfRgvLGOh5Vz2AfJD3wFZenw6eSR7GkD/v3
aRSW8mnZIPI8t1vlNUQDZ5/HXuAPtTJ0Cjl3BLIOE9sh78XG6njcAt91AghHY3RDQrLaHYVViF54
oQ3AADgdb8LAEWu+AfDV2//Jtpsg5xzHvpiKieN9ysloLkbLciOPYdvL1qrQOHpzcgf0mnazFX22
p9edFqDOTofvPWEDBQbmaUcpMKFtEEhnOzUg7/yYhkEuJWiVEjrdNjzicM1z/xF1ZbH6SnDTglZQ
9FvFiBXH3ooBGBIOXzkRCfN+9s5CxxZurSQNhlfWLC4CHl/CAXQHl6EwCxYOpUNn2L3iNTpV8WCg
eNp4Os1QlRSlS0Kmwr3qb4cyGxA1FI+hHMn8VYjsNfoUhV33vELLUqi7nxqERcD9EIeB1JQhDpTE
0hqMDx0o5pt/1eJAjOpNTOXUY8AfuL7KvHpEQpBuHNh8Sn+pu+ZE98Pyi4s35Djwslfzcf33EUBa
7wPXYC5jJVmFgrEYcP7Y0TRfsffS0jBCAm3xxqTm+8KWHRAhwvkT9lFNClUNSeornbLv4kkvrzEU
NLwQ7a0pCQ1TZFM/1K/btMQ2TO6ElzA54BW9cCF+4JfiIensgjoeQB8xAAAHLEGa50nhDyZTAgj/
/rUqgABvNggYARiTaiLfK+yOu8HRzvr4XZfeQ20dgEAZnWYiQUGIKds1YT9VSnps2EAQAZWwsWZg
Gyr1dziHJnxwwIKMSm2OnTrFAobEviub0dmCufbfiiOaMSg8gHXfdHBpjyenuEzzBD+hz6qXAOBR
FHSjFJobT8LBS11JaX19j/Q47+OinLRbIKg7+E7yR4nQ9ASdYoZ26lB7zqCTVL06Ks6rMI0mqlmE
gf7KdPePVgLN+P8QSK/UkbyQ/C8vkKT1CeJBZhzi1Itdd7nOEKXfxb/Q4SXpOR6iqMRpmBAeQzxe
H2bsU7QMWmBxSp7xwDsxW4MNAfF1OAGn3xp4yRFRszBYCk/Mzf8fNFKzlqMoChtThl/M8F5lwoL4
w/4Vyv5/6IqEUvvXmC2it4y5R0Ff59YJMSHJg9zN5xzsVJyiJRB8S57pGjO70ltPXU+x3XxYW6Ra
IDc5kE2eqzduoKhVf+/QcWzFYwFRMHG7H+VHGpSD9jmwdZwrY1+Z4KLvuu6qeQs2O+Tjkwfa//V4
MGA0ilk9qF1q8saPcs7aL2CqpEYyB3sgAbxWd77mDExelRrS2EHo7bSU8z568N7LzK6+CvvMIBDJ
dGfbgb3OAFv620QYQAAHn1SKQsfJ99g9k7o+Ejdmw9r/ULN/cq3U/+KN4P6WBfLHu89q4d6rKGUd
0JPIpAHrl0z9X2sYaxQVYGHC1RnAUBSoVWC3erYFzS4S5/cQxH5gPgC/4r69ReTAwavMV4YL+h6w
hmQZzHtZTAaA5y2YahVw+zoA+PFE+Nstt9uG1Ty7K+JZmEo0T+5iqr73cvZVrp8xc6G489UPsDpq
h60jrnfdrpvGjgnDJ4I1QHt+AsenmiIisl5aC3Xj0T9S7FfkwmzjRvaZaNQaAyHDN3yk/Lw8yyj5
CSs5wIaIdjGS8RCrseW3BuFzN6q1+smdtQAlf9tE8gVuvZNToVk8H54jFv+FyxbPHn9xqUcBe2n2
bWUGwRFlKX98WQrhCIVi8yJM8TCOSqVAHzgrWxlZWwGBSZAi28lDy+uEB89tBEfDlgMHDRYfz5Z6
yI/vYep8a8OZo85cQ1xRnap0IQlz/BwvizJ3i5ksQTRzu6N7+14LY0+wwvq061OapOfKoewz06jw
yUYD6shIaIebzIJMBBahpO3HsP5O1K2PvuOtxmxL0XvSV+PgWCZTKeRKV4V7oYoTJbqDpIyuIIMI
v39CtzZCl6PcYgRlbJZbNwwc6iMbfSe23zazImYGkg1sta2sPNO3yXpXGD+tEdtsGt4bg0kcfDQB
wjJItCVO7LWdAt649AO09DtuXiJQVNm1iRp0X0INXw6U3SckuGTh/OzsyiRbDRkT0mk0M6lF4vnN
sFJClvvzFi24XkqG1RYMOSfDuur7LwVMSKkEFb7jROjVoLOtHBlYkao4fyDICr5Aisfou4ezc4sV
86vx0B0J751ANmu/wbZi+EjynLeKeY4l330VvDUdz34630mXgTQY1sAmrAiCZcBqKkIaUPvQ8Mp1
q6lnCKl+BIR/n/EY+KCNstLLjTsjzmq38EbgdhP+ZpJ+IE5R0HoOOKalBkdfSroVSl81OykGpVMD
lAjRQv9I20KoUA6JPHutxxc2jsW9y/rBuKpqI8vnSDtC/X4haLalXJvAKhQO8ZnK0ThNUlN8lxIT
aUYHGwpvU5F3US+y9OOHxo8iAmK3f482JywUezXA3S/Hu0VOXrNE1iAq5h0bYJ6dMtz09Qk1beQi
/WpSxzWLmU/zAK2kZHXLy/cvMG6d7uM8yt0DtBzhwxTxDWNkRVDLu8IeiTSKWqFOv4uPyD7aJad/
fJq8ZilLemTVLIdDnG+o1SNayYC0ktSnZtGsqqXt0l+ZehgRAlDyzoyeYYmgx4AaOlv7wGyoa95q
lRUVBG0TRIM3w0D4ZX/XBbFmFXSdXdTm/874JtK/aSdgNlG4EyXaSPsrF/7j12cZKprGtgLVJL0x
jBHHa+xzduf0gpiRL5x6718oOjqrT+qEbcIRHaTx6sZN1fgxw5qK5Bl+tuoe231EamqxE0FJF0QG
9Jwl8Z1jg6LZfqEmUETPHDJDgovcLBKohifL2T0cTeQ2If3/ew8cuXOh45D5oG3LOUQT8h+eGQyn
wbmKiWQ7OZr1BQa6GB4zfh+eYnMxEV8mrFdKfNxW4OO7AZxoiNFAeR+xnnyD1DU90DsS+ZwKvilO
8x81vlyglGipoSQTNqwDsz8UCS1N24Gug7zuaG+1KB+3Y7RvsVlGhhJlRqfeqMsjQNSSBJKSMwiR
DIUwf1JaWyFrw1yF4UEc3YGmf8pGzDajei0ik64tYajHqs7GNZUadJ4hRAne4r7m30Kn8C/1yNiX
aNWw2is/Z9zhu1BKuXOv6k56kie/x/AvQpqgFstgeGvb/ipcuLfC2kOFSt7x5gYe0U9uh6p4xgDB
gQAACLtBmwhJ4Q8mUwII//61KoAAbzWr0ALMWrgkD+RK7f1rHQhcum8ontGII/z/+hSC3Fe5JvK/
0QREOCXuuHHKiZDriVXhQA4RyfycR8t/IOB8ibvkQxcytMUwyxjtdYCj7YJEWWKgchPu4bEZWw3a
KUaN7Az8ECJNl1pDuEv2HeueFrYPJm57/L8VnzSQC/4bOXim8GzJX4LYkzAVJJIZ9zFG084R/fvc
dnclxmAiB7tF4Yfo7j/q7KgrZqxpnNasbJinQhB/6Q7H2nPcKI/YQ3z9vik4dBRBGpaoPy7bQ3bz
0YvF/aH2ws8r2sEuc/DKlyAgDnX6QXIaBuN83MGVa+6DJZUXNNMSpNqXoUdWjVTMDj0kF42Zru4d
c9VTlSLYUkx6cZKNF75JAz7ycuKiViSu3ll3WX1RlUYEN0RQd09sa0WofbjEMdG8Ka+kBOwgR5f5
cMpMVjWtvE9ywi018ESOUWPwif5NNZOZ8C6PeVajLf3N15kV4MGYe9jBGC7NwE+PmPZ2B37Bn9zw
zBaLWWoSen+qTcN8gVpskGku9YrrJuVZ/gfkXDtdxZVRVXRJzHIN2ywqnJeiUVx4eWOJ3Q9kKo+i
tB0ObCH0Eyj9dYcBZoP0KLSvJBfooEGnng+nc6EqNa8iNb1Is9okXKGxwo4Nxs5Wt3TMsA/cmuiz
kKkj6PA8+zI2zMe1CcK9W6LLZHxUsoiFtEtxRg+YzqfFur1FRWjd34o4Ux4y/++CBqKK15NypWQB
eSy1t9+CjBju6hDjZDLZS4n9p4t0jUV7ZqXeZnhevUfW4mt7knLFGB9DuKCuEObUegIqFvJdpovE
UkMfhqBeFcmRsW3Ngs5Ig+obZpCvkNlk2g65z2pzF3dCr/0zLBqEPqDc2yIF8fo2Tib4Hpzi760D
idCz/EDyVBJYeHSGnDVpWaJM7bYn5BD7z1Zb55Q7YDXl1lHZ0UMpjxKy/lqCU5vqcTGXvFdibIyv
HV0Ga6b1nnA6OlQ3tY+ggjiOnB4zJKMsFN7QBGlv+JNmTqkxyXRefk0Rxmp4oAModaolvJCBEdDG
sq8VuggM9Zz2WjKO8TmHfD8Ea8jPT4iUTH2fgG5bPk/0Isgt0TSCUwPhlrQ8QTaNiigmbkBgZOFD
2yS5Z63gD92KksYGkv/1ucqedBMwCqCWgTKeVlT6Gc9SAfH/zfL9m//zKXKyRX/eDOD53MM0Fzru
oEqNQNvLh0lZQdB/lamdAZCc2s8XgOfhDyd5ehwbavFsBvv97zRECRVmtPVjPZU0D69UU/ALqQC6
8Vyoj+eYMw0XH6YdW1vauDCxItolE304LjFatD2flR+zcMJnqpal4haVwax/WvVSr+7PlqiFc/nY
jOckFjUclWCUJQ5QCdQXv0idymnbPPqx2aLWd1GNWnJjnDg5p8PcFm0e1vJo0gpW7CkZQbh+LAHj
CZxfFcGlDxJGKQjiQHdyCitE5H61ICHvvLzQYIrK5h3eI8IPvIZFjvwZ2xMZ/i7IWlNxv+FPeRwC
rAQZO6LHnyulOcVBiEj9HMDm6soiathhjs0NA1YhgSbC5h/ZHDtahlIhrBJ2qqO8lHJpe7mVphmL
By8a3xbN5Lzg/LmUpV5yF417SiNFi312BZ1ExeAIy9+drOP+3U1KppN6vkm/oOLKiOLS/rxVnA89
fLWCxoD0hJ5MeMBTmyhMXh19LhBNW724Mk7oxYV8aAD3dxJrcOkfBOmnfOkdydzZ4BlYcrmD5zGU
Hm5KNrHz1gME9JvJ8y+5yXwr0KY+A68R0o/z6XWAhKlhK+3m6J+n2zp1JUjqMJk+lNDTbrDbB+a8
yFlPsnr64bvwdJvoFjGElexB3Vomi40tk8QdWW5u+cUB0l9PrbO+rBIR9pGopinEbspQw5KydfHS
NsaRQGmr9d13wqg9p25CPBZu2UgtOAVRD4cLvJbSusaEqBlnqQx/kvTI+UcHN2Oraavs38YyYnhw
k9TMPfSJUE1Ac0ZT6QrPZGm/SZ+2jyPAx7/XdcVse8ktlYp4kfrF5COrErVert0NrgUCkg9fN7SV
v4mTHnY05x+40YE54R8mzHr1UWF80bdD2QvZuoChcM0WkuqxO0Sxyk7Zd8jBSkKigs9f/k7qohFd
Ca/LI8jnvgwi8pfDlQTHKLvWhY1t+MXJXOHTCE38JufMOV7eQqcdcLAwRb52BcQnVCMuGedfxTzt
mv8HgBluVwZp4/BfC+7GKFubfAIT5DDjyAOwKKlpt9z3Y2O04K5TD+8PRd4rCWI8Cqp8Y1jgwSzI
eI/JZl/RpFNfL4VlA9czV4MzF7nb4B44c9b/1ZrbCqUmyS3q/zYze+KTL1hAAAZLGc9vYFEFjZiO
bN7lrc2bo231xswmLloH/LlRZXULPVxfexayVs5q3nyLzLlkJ1bj2JzZnkP3AAF/cW9TqDgi/dkh
1Fx0j0COihTMx9N718QCrrGKiOZF5LaVAeH0qXbSijZbR6ZJ2TnBNnrc50f1qRkEAK3Fu91pB+xW
w3yf5evbY6/jWTupkDYgnrVTOzEiNnbqSAhsQZa5q1Rb/8whJLO+8nGh8pE6LCN3ej5aWSAcezLH
IIzcM5wlH/kF9BTWmilcjDqUVZBjnSTLrZ5g5ROdKghzOzcFK0Bty1Uk+lNH+tpmkQUJD50Bu6N+
alTPi2a6zW+MRI/GUMyRUPR+gDtRg+LhLR5IZOk8d1aWskrVkKy+uxqH2YedXHJ859fUm3ia01Y9
5Lz5iUi06Hf50RvtwRI+KNVJhakfnuiXpFo+TGBreDlCkj2/hGtVmBuSppponToA0eg2pGkT51KY
Ya3Qfx/mT7WKQ9qdwHB79a06I6hUiWpljEWh+Qv9U6GhZCybPUtcvrAUsCZwwql0mMajS67AlUua
7CaeXADa5ZcPfZp6wE2uMjAp+DzUhgcUCWlXDRP7qR7RCAbHWfdfZKSWHXF0Dv7nO6VHcuMTbutA
AphdE6NcWiAnRnOaMYPgAxYAAAc+QZspSeEPJlMCCP/+tSqAAF2263gkAAmpk+0ah7yRPtlQ7AnQ
HdtGMyiHP3TXEmpgNmrXb2nKZjTHRxeQNoPsc/1FcfnNKcRhFlyGMloV2aF0HHg4Ya8DNMZ3Xu+t
c2kF68sKhvYJOr5s37DIxVa4y0wedvg0mnAjVwZA33bu4IKVBeHgAcn0F8G0H2E/qgwoqZ+5jvro
PgFoJOerxAbu0XDZPFrM9y3Vt/OSvceiz6QswAlJUiW8ORx8//81RdgNrK7BqWDwodQZK5NI8s7Y
U35vWBF7RQMaae51ZXuZv22+n/IwIdlvpU63wFL8unkHlhYQLWWdKObTzycOqN3+pt67juCbiadC
3uHJY2ydKa97xlppk7wvFmXmBAxefCNefJ0jIN1xpFe/FHe+bPvOHFZ8xkZ08Cn5IST25XvE9vrH
hN5ie5dKOhuVYm+/D4ckGSbx/nQPPQRvmO+zSfsfpiutfsyeGMVvY6EG41iewvypWh7X16SZO+db
/9kqDyPbDjneYmnh9h3iquerI53K82sUCxSuSnY/I39bgIXXWwV5VQMTvGq4wTZkMOkupOGkhDe7
+SqdickprCDFr0jZ2btICGjkwePsvWXOE9V2v7Ga5JIbAlN5SzDogNHOsDjWJp0Y5b93JHInr2RY
W/9Sju6tKzn/8NkgUnyOvbI4ZPGWES5ekCjqvOzjlek/VEuFkxubKOySWK+yOFXmiOBmvuUpFSmE
ewaEmrB0VywSn5fWwe8GfJohFiNfzHMC9d6jkwYGh7JRYhU/snMCRNH1YLLQi3uzJKuy43WxWa4M
+2OG2q6WKR6533gUr1e76Eppa/g3Xy8DOfQtgLwtRHaN4NvfZJq8m4rl17zfd59cw03ISDKrddHc
3kpV/SVVrdgJ1+G1woxrH1Ex/kWSPRxYFzlktCPrcgc/XMBqo2tdN3gHtmxssTB8ejdSadXPeH4A
QKjg1fkyHVF/iCyS4fuMjD4Jl5jMki6E3l2kEHO8pqYLQk6rtkjG0VGMKfK4/tVzRUJ4+x6dtK6l
bIaX4nme5UZCnfONJT4rVqR5gWEifukl2a7qiocQHW8ct/fv0sNNu/9idXpdEEoE2BQCHx2EWeEO
5TJVqms0mI7tDuJMaKFm4bcNAHR5fhnSnmtvI/NzwU4cd+B4llVs1CollFtBbC1ZKYXGHw9n0Rud
Veth3HQjaQ+4rZln1KRz6HDW6CETOObq8gFZoR9mIa/hK6aD0Ef1QWO0cegoY+4drLQMneBNMbjk
9dqCtjSXbgQf6e55wPRg+d1GqMUixHXWJ8a9mpvuJk+41PXHQOMoNrTqCYkOocOPh1W5qRCO5rIh
kEyHCP/ttfCQV1O1wk3UXlBnqV6goLCmMrXBLnTI7OVAXq29hbWDgsmBowJU25qcR5eULdV0laG2
ihAUSUVT4mQnHgVa8B9gur7AjrdH+P1bPXJRS/EQj5Z4Td7A/ItMA06D/BdpYKvEqUTuViXmlayz
uH/KZqN6tH7xm9V1Rp0W+LM47ygVegvJt3AcTrpP+jvU+bkFWqckacJws8Q2TiclaplEh77JUoMx
KYCcdLW55EdTeRMq028JKwEg1b85KQYcE1R8p+H6Xh+GsduIRwJYzd3BTU7D6yVU5WELz0vJbR7Z
2G3Y6LUlFf4Br/P3enuP91gs4I9ZVUAFKNP1HWchqKCpYTwG+744CssHeTDTtpFoqRqMMur6Wxul
JxUTwofzfO8FKzr5cXYVZddU8nrq9dNBunEaJ7MkqN06PfHB58xwvhx1sPyDqFN6lorilHpRWPI0
IH6c8oX5GavAQZtu8tLLSX7m7eyJ0yWcd2pWUhCRq7p7/nSsTPVNL3ukTVJjLhmYc3oZSrwtEyLw
e3OjX4clGgfB4883JePMACPt1t3zH4ddQse6oieXN2QyKiHBl1ueHOBMZQ1+eIkJjGjP1khJm0Mi
xTpQCcDSrShRycdQuExF45TVsbN5CpuUW51nhoAuLFSkapAIRUy8SXdhkKTX4r42dkWjSVnTjMKB
11of8f3uaJec1tg30CIWpPs/p3ExumUFOaTSLIpbVo8B6lPwLTkCJqv1a4t9Ip7nNuPFlPv0Om4f
IgwrukLIB9QdftcMQGveTxeMfJsW1tZIrYjE+ORt5dIInalZD/ESQNdcMswFgEq4slZdr+Qg31JP
xPo6v3zauAgs8QMmweEuzQTateoNZwfiY0M23XjNjsNOrVB8sD4J7ezfETTAPH/h6z/X1dcCQ/qB
PZKE0P+b4bt4sO/Zv5Me0gMcNZI2db3gixBlm+NmOg/S85L5oTQQIh58/SQpMhdn6txMT3LBqCEL
v/5QNN0t8UgPtsiTcp/vBx4qREW2Ocwjgm1wAh8E/G9mKz5kp1vsdoCbRdYxdtlKC9VzwxLIt8/N
Gftk5dqzkBapgFgc/tfxlFV3QU7fICpfx0Ru6L4F8jLQls/6Vu9DLKp0xpvGnXVCABQQAAAHI0Gb
SknhDyZTAgj//rUqgABoPnDQAUgyjFFUWvacl9HAZ6mwCj0U9LapgXg4oXm2qwXgRluedYrMwX5u
E+8OSV6/t398QEOGibCJWlexvGBe0h1FnWZneXeE3uQzHi+urXKGY+pUREJETQz0Az2+BZJDJrEB
d3zFPt/2UUApiQYGLuqtjaxV6jvNwoO3nSiPCLKnfktu4st1+QjvDHbx6lHjI0UBsf1B1uW+iFxZ
vW/CYNw1wlCnnA4uw8vSR4DLJrBTY22WnzJV8vpoHhS0wS60YqfDumr8ULsn6y7noEi4jmavy2iN
eJ/aOKImY3AaJ5aP353C8BW/f2Ht09QuV+w8gNV+xXYXFT6AfEP8bq3YYIO+hqaR7Xj8p191HZwF
cblxfg/nKgKXwQ/aY7EHgfXzg8WTKbAJHHS7UL6IzGFc0V4iC1CABelfaKIV8PDTHXA4wpyKoJvJ
+jVw3PniePlx6oDAG0GFEHJzqAB1KMN9WsntBquvfwmr/m5fWAFD2RAUHfvw9ijZ+dSwOY9P2VuM
pd9AK5Vmw2ovR4WB6feFG9qKQ5g69xkz636F/YF06ptpj+JvcplQGtp72bj8TYYag0JLo7ts1ln4
fGEK/AgXO4rOaTdbgB5eLmtocvS+j2WwNIpq++boryLUvbrddl4CEXZFJroSWsJO0BaXtCK/nFdF
Qdht/4shdkRYwFSbRq+uFwH+VOxs96hlAEFDg1rkg4YHvfdPGKs0cctTUQZEEpYkwF3l+6UwpeSj
h0Bk23nafC4NZdXNXGcTryWboq5adXxwmvRI+ITsDYFvEuHLVSFPS/38cE1I9dzYqAstxXXhDfR/
aidZXnFdyYUMcKMDnfyi+vSh7H+vaLVKXaMmo8Iinsf9cJ/Or4LX46yrp+ejMUdZ2Esviohu2gQj
ASlLGLs5AJAu7DVG6VXQmIrweWHeTwyMj8X/zX26hDX1k99F2xGz3GJMKMxKLQGxXLrX46K3i4Ul
GfKqyo5gEa92jne5c0ncUp4/f1XHhaSvadiPO1111lHBFftQB2wHPfL4XCEay7XlO0jOrGWpd0wa
SOl0DmICMADpYEOExmhK5HoY3MgHXn4qpMZS5jzoTkM1k8YX7Rh79dFwzFYe6j8AZRzSztUzQvwy
UHFm4ddiny0kIbPTmMBGWxN7l2wDDAhxxn1mE5lsDLHfUUcWcCQthboIXuaH/2oMWaBSlEv9nTtY
zG4SAhSBHey5kdfLY//2/7iKK2ZFP84vz7+QJrjVPHtYtQBRLLmKsI9318Jhved6qIPWN6qOiAbQ
Ac/om9RHz7xSw2U7WOLf0jXQp49Op1MZKa26DmwTx6I5ZoMjNi+OEGy1l9fJg/HeXzUFCiMSmCCO
MDTeyTAKFD77BvJ2UaSWRzTxh485xFtDFlndKx/IJ+ywOTyat4Xz5rWM7oh7mh//LkXs67lgRxWE
pZxVbLVCZ5ABCDFj3Be+RdjeA58vjJQYTwur1Z1uazhvY6BXhIf3fTFrFFwfClcRFjVmUZXeMT6q
lHgwYW5vVOixDXLvrCthh92kEgE3C1r4CMqatUn/UnCTRlTtEdIPCwdGu5nlm2+gNNisr4QblvTW
cx6jVpXJlMO0L6DAlTe+WbBo5R2DiGWZYNTr2MljcadTbEf5fXARY5pnGB1PWdr5VSKiG/w9sq0m
z/GOTpsusvgWF2n4mTBTVbWvLBGYmhqsX4F0iyzOj5j0+HjuhDdVzmgXnbg1lT/bCyfHVf2KMSo6
BwZq4+hANltFN33yrW7z69QrWy2Ky5K1P71f6Bb4GfpjH7DVI5ruwq++4UQX4PM6NrImfERJH/6k
WRyiA1shyO1XbSbcNHxJ7utErbkilicmwnq5XAEwpbWLomzhX0WbQFT4CH7oGrmQ+wg+8jK4wB2w
I1Okye+o7o/zV7I+flSrNDWFBudkqUd+Og8JKTfhDhHQyRJ7Ji5a4QSJuvBk6NpH56H2VXuWtOer
QLUv49L0VvEdX3CFDllKJo12TYeV5DL/y8zjOG07kPZwtQjgUWBEhXIOsmk0rCPskFcurYH6JOLR
4YV893B1grhey5/bquNariWzE1sWFRqADVHY4Qn2Rr/f2OCs+5zNNb1EO7INyWbqu/37aLA/gjFr
Wg0SlpBCFXOFadAiJYj3/pdVLnZKyzFdQXMb+FrcEjT4yr4qcs9CwL8ueT8JtEqWqH3EBa/MPgWp
pJc61JXPw67mrFxHcZalNnCpIfautE/Yy4AFcFPz3Wv+4WhPWMgSizRUA9jtZd1yKPtwl9NUaDAW
1VJ1zUVXo6JOe2GEssCsHSuqMhJwrqURrhmgSF/U7jMcb4LmyvcLAAErQwS2hKJqz+h/Dv7sTlVB
EB5Faw2XTaET/56utI3UCPQUIX6GC62iEdZc1BAI3Vlvz9ACPgzukW1Ebl7B/OUpKOi+Yr947QAl
4QAAB31Bm2tJ4Q8mUwII//61KoAAbyacsAE0l90xU44/P09NWKCNReQhoPS9fYbV8zN1gqOsDrZI
VcgbQilRxAoamzOJ3stxbA05Fydh6LPE/7B3MX4SCBlm1MP8Vanfx7GVZN4JIQYcAWmHPB9Uj4UQ
3LPiUfL1P+WMObIX/hlmXK6w5rS+iHM9eP3t96kCwT/kCuTuIs33mKDUYivlPuq47a5XUi10my+b
0Y9p/mZnYJSzum8qpQ6//onQ/HtFtj5xpg9T2K50UNw61WF5ZioK6YvePNh9GlKJRCyWogj4Fe6G
6pQtmPN4QredWzr40o3mGdaMZtzreo1kV4K06ixLLmu5EN96wA9XNOjfaKjvbV3b73EI5Wkb92tG
FnIPny4FKAGzTx4uV1K3Qrad3b85MzW2vSvE2Kg8hYZhBjv6sU5GhbPswT1ASiozZhloanKI2CN9
75kwJkothjOxsfhLXTEYDqIx3XWazYN/KQYs9WzItxmBowBqlth0AY3yQrfoX15fq4UdQ/PVKK71
Tp5VNNvDV8/DYcvb6z0UxDsZ1ST7EbrDgEUw0M5PC+dshqPxlEzvjTwSAiTHjEtTCUfKBhq2xSN6
LdWAeCTBSaf0s01CcMVBJOg0p+/J9/ddmpcKEGepDeN/QrwVpr1GGeBIWGNhQh5NfDod8OvvlwSN
ZLVBw14TsJ/hxUVGaeyqAI4jZXqaZep8Xzh9CrHtlZGpN6iWwaRn3mVYM0UASsbD5brN6/Z68TR2
CsId0OHasGCERxBZLGZbTwu0Xu6UZj7EW3dkbY6EPowTqXQbzh0ZmHF9JmhQRatRKpa58US57yNQ
2Rk2L+t0pm8CoXX+g2kyAVjd172ZCQvdhex7uImV15gQXfbwWHw/HS3nIFHFPABvdsa4LHLqArx6
mttw8Ltj3+hmVm9UoVXR93/whR+FwkQvCzXGtdVz50UIVHqs6MXSXvgRHqFzHuv2Pw6qChrBxPuU
uUhIrcny8OazTruLWh/wtCJmQaCSyRBCp0m95uaJTzBBBBGzsrpmNyq4gh6jCcMR3JBTccgN1scO
YobEYzrke3PzF7Lx3OYkXyLh9q+8Jc5fi+0hrvXWiukQc0Uy113kbTO0OQu+6D/v/oDFScanyznj
eAmYoVXKCGwn8qMEEwKMA2lDDLjsM20nhPTYMV7y77PsqCvY2+2XYNji/L1UO63N3k8umPRl2n4C
J8pLE9pVeuN1feihLsOGwXvr6Ag6St5bOLU37uGqgMdqO79tUuWeX97tCn54bDb7E20rXDAWKxaW
ldE+siKkKg0H/uqfOxcyTAzr+cA0v98i3B3lGqQUSat6BFrbeoZFtORmzX1/zN5cLwPipdSKxBmq
anIJOHfr6Y1ZDJkeMDvqpDq+J29O95V4LoIO7Ehq70ZNc53YdQM/uvBdQmnFlDk/+YBvs9kIQJn5
he6xKJyBoek44PPVsUpYkChiecapKtVouAOXZoiSb+/EmYhD+yrV9nXA+ZS1FuUaF0uBWbOfhFTN
0/UHkSOtdgqHMpszEIVy2GCq2CA4pF7k99O/UcUg8b8lNbdqx+r5XcVMtMsyw8KbEewjmxmQHXLP
BT1LCrGBw6Wvb0Ub8M5V9ZDHieUjqGgZSDgs1rI8pNYh0pc5xO92EKDp36jscdfthccnjF1/aW1o
AXpjmw7AV7YrB/UqADiLjCnT2zFAViD3NHnjVVoqy48f1pmQS4x51AfIesJYjFh5pmjLD7TbFxem
0GQTROI2sbapzFeDDh0M38bBvaNu2ScQnsI4iw0A+Bl6FHWc/828wp29AEVP6Nwy81pGrQBMUA+2
ytvHnz5W8QZ4raX2V445B/zGPm/vuzib0yvivW1jRBH8aCBOtfq0AZRjeu16dK03vW5OqVYMfvRc
Sxp2j5Y1/OcIwQkjnzvsZoFSEsZrZ9/ACoe2OH5tRI2Wv1WvgjLDr8IWSs+ayQvCzjOQ4ofCGvu4
36DsQ7id1MHcI5nL48C+XAV8gUGv4oAL9Dtt2K2PHjqVOdb9NOfE3FJaompBINw4Hb7WAV1BlATZ
XMjQoQ3wfW9JyCk0BZ5PFOY8vhD6eCeAm7D8RoYgvkNU7RaZTsoUY1bMXtjZWOWsiH0aN0t4YEEV
0GpyWL0TMGS6ZZceNK5AmIzEYCucJQamjFsxdVZH7FaSJuIjn69rCxQFBwJJ6lJuEEjwi/14urrg
4jkmh/vfysSiApbnsEDLTX1WhhfTweDLXmJ5KEeLd4+auq/nj14y0pTl2XazvgPKPIubklaFDISF
HRpPPW82X6mtRpuDZRYnlZkgSYFgJI8L+4xY8yJ349ZOnn6Kvopl0uvleu48TjGvSGBu6xConIlQ
mnXlbrEhe8tys8xMELd5b5D30GtUVoTytbkAJ3XVqPmNSe9vOsOUvLSvc/PfJ2VBnGDydelDOk07
Oyz6y9ceRp9wJF2rPIWy6wKP35m7S2+sAW1VHUN97RCP1oebJFq0FjH4gByMUqL+HBx8MUEgQd2q
D4fFkVFv+yW6PqNIPahRJ2mIxCli5sAdbEs34K1WDDIAWMaZhsIgFTAAAAyaQZuMSeEPJlMCCH/+
qlUAAN5gaeAB/CFehpxlJIg19PcS2bMfIWUaXvtjNNWyOCqrGFcIyWajdwy3a6e1Jb4ho+7FJsZ4
reNH9xxmAzosK0RXbzTyizYgGn53zI0CvdsqQm2yTZYQS9wNCEGJa/lDcXEO6tZ2+jzmq8MXJ1WN
JzbxhVk5aT9S7wgZYRJyKXOtLJiCa1gYsRs7vSLQAuZdWGuXBzRw5XPXtrxoc2IrUx0JWuInXR0Z
Qgzxt0IYZaaDDEfzJhJUNgtUcyM1X4gZvEHumVmnBBFBwnCK0DOJEx9ZZyLc0mi7WUZFD5hXUNs2
QCNiuUndl19LzxItCEKrioB9kMllv9lfL0rpObxueQCuCorHlc0NLl8+ijoonPzz0LRLNeO7T977
z2O+vY/97RIzvI1PSoHBmCIyMPuE7BmLch5qPzBjab13Pi2ZI3vwPMw9yM1P/Cugt27KQvdsB9Fj
NCZ8VlyevlQBkeheST1B9n95DE0fBKaQeiBPlQsmQDwki0j9+yAn1aMEny2d9RZmIpdYfZEshXXq
yRK7k7845zHPVFGIkxs8ouoeYNmC0w+Yhv9lE7xQX41oG8cUpd6eQZxX31Zq37aqn0pFlntcvbjU
8RYzm1ZcRn5nZFGQIFxfSf2wVjgjiu7Z6mxsrL+PUguaR589RcsVr67zJVtRlqDDwdmAX+WXpg+Y
N8iZOmstRcBRQM/iRFiAxGedeMgyyybWPgjknpLnpEBhBBtZJ8wH+g3Zrz63eeYbv4Izji6f1onY
aF99Gh5xhX+z+DlgmrkH/CyglTeHN3Ht//uiqg9ho4iOYQa6VuicBQ5qBWsSLsT20inutpjVRDc0
cUFWnky5sukH8pVJ9zhe9Dbv96nnSvVzh/pMy8Acakn+8znYwg+69fdd82CMJxhAE/kwwkv0uReE
aGlZQO/+L25AYZHDn+MxZbj6O+77GDEqMYZzRJHS3lVP7u+4kseZOAXKQ5m/EBNuCImwYftj5ila
Bsz+zORmTIQcU7QVT6AUvSb4zQndB2ZXEUTKBBEHMsVv9ktUjFPWzNO3m8+enAh1c8NSqjmS+5bx
0ZNCj9BhVUgTtzyCQ3dgYhyk4y+6yiOgjoeyoUETTbXozuODwEkhjWlM4qdCScOqaNSd0tvBoA58
4u2vEkOycPyxctE30HdC/vqEDMceAE/lA0yZ+2jnvPxMnoFnrFbQbzGbPc7M4eQG5O9ggkJqvLcJ
WGgGdJg04PCjeBhi4ETwcMwAfI60KbZdH+kC/PGAB19BSz+V9LRxKzd4NrjfeEsV9pZdK++6qstF
+ZMH3ADZMZFx//JDlE8OpQbXw2aLbboAUNAxE8TrcroWj9CxiG2enf+Bv81MxNUkbm89hygqyvLj
PdTz/kSlswTYyQcmzePkalwhctbrIIhTBdm4EaVhTt+T5q+5g4nzjRGeyI//RDO5bd5ixKrnRKmA
8Cp/2ZZnOglYaNJYcEyHZzjRU9rIiPFocgzNC4swTF2qacrUJfq58rQfuQGgcLIbsYD+I11GFGPe
ShEw/jbrIGblCu5ZP4X5UPHH/u7Iej8cS1k/OLgNbEZ4bCxqLX4TcpUa7Rfe/6pj3JQctGA/CjEA
a1UC6HlaqajPUIQP54upr8/sGPBKNgraVb8rZUkJhgl9FRfmkn/2B5vJryFqhzu3X0+Hu1PkrCP5
fZ5i2MfDLGbok26nrsdlSAtDJ/ujwFZRLp0Bs5+beKNTMgGjmlrSziGbiSefAEgzcztMpQ+OiEUj
jCF85f//HIigufhf7eweXx1bep3PspUHIVNKYOABpxrQ84lyero5g+wBV/kW+M3is6g0y0HUtvGG
zKgQV9fKGwWRmn+DMuzD9AOaUE6m94vVNLYRdvgtBBWck/4li/6ZW1R89vx3zvpj78mErDx1/QUi
mxx/zU2700Kgl1YlgYX/zVUfmJxwD56ZCArR4hvMxJ95TwDPTqvczQKrCjAf4wopQtH6FjCoAEUo
pUW3eL5Z+UPgr8q/QiB3hf69wWIkERxccMTjedQwIz6hRu6oOjC3M6KnNvnx9EL/Ee/8u79mE/4W
xwa4YTlUTBp+ACQD4C1XcVQWO6ovfZWyI+Y9BMABfF06BwxRFyzQeBcz9lvPR6nm0WaEOYawL9+8
jq1ve9leFOTcMOlHpZ9WXDNlsUPz1Ny52gVMYVHtu2YHZKQXb+DBNkyZ2t9+YJx6153UBVxdRga4
1DD1RHsZKWcgOBnb8GSlqga8K+uaYoflVv8lDopzLA/BZQR2hWb1xxKoSNtHQzuDoJPHB7snIetg
GkN0mWvlhbi7px1/08FInmUUaDKDitus1aj1mPoEl3JHG+WswK3iGOccxfu1tBiFnY4iWn2c+nNr
0n+HvCrJmNxoUJxjY55lZ2NyJudiHy2/f3WA3soUmoCqDii9ZcCAn9dgrebMKDPW7BYAMxQhe45x
zxZNDvIPiq4bqIClLF+75yP+cNmuGx/6ajSTDdDGdMoT0UqkIgI4ijQn347jgNBYNKjAcVFdD/IO
2A+lXlk20L72SEMhmFppwYdLjzVB6V58vNrCIzJ0E39OWdCXNFfzczDxVu+p0PisIJMjgxiJdGHB
6yWLRnBWMC4IT2ldVqe/uIE17nARJlsdx5Vtvz5SVHvCthgeXB3RTJZ+NbNMPmt4dl9Fw1WL7r86
WcMQasCDuaIqiUqFrDWkCEuIJuxx2iCY8Ju13AOpQYju3dISD5hDP/Iz2kaa3eP1KO2ajWfxdC4h
znr4BdHZKgMBJSCslVGNhCygT9S402qUKJlUsqGZVe4nVLcBTWzWdSgvnfxUdghD+F2h4CcNYW49
+0ukre5d1hWw7gx42haxPwoI2htGymabD0gKGnGwXaaUTHwzEprWqKIOr8zROwB8JyBfqjvGH8r/
QVmypGAnfDqwk32lQdvkxHhHKeV4bMxVTLZDI0YxN2DJkrZ02wksiSlmDWSyVtEao5E/pcTti1eM
6JZlZGzKbfZ4dxZdUSaYnJ/oWym0LDfoXkjskAjgcixFrzteqRyTgoBuxRLlly0nGer+rPisQdiN
CiIzsIQvbZHK+xoD9fiuZY2I+i/Gb2aA4eqaD/nDXm4HAEi5co28VBlei7AUMBtOhOKPUnu4g0Xz
sS6VWGa7wuPxlY00DAt2Pa/Wm6joExa9xu/utsltt3jsvJbvgLsxEyPhKCtUB8OHXbkpjByScHZt
0YyJgLchIYSLItVL0dBQx89DZ5B78GGyCeHLUEhR+2vLhtWhPUZVrEsYWc4cJmc7mMz+MJsP6p6U
UQkLwCs7sUNTZULWq2JfzavotAqvMwtQetXV/sFgV8WGz/y6FZaS12xfkr8AE83q2vIinx9YeeMQ
crwqkxSwV814fYhlFymGQCzquNT0+MuX6Q6ku1cjE56WapYpVyCT8rF3j6H+OaRWbaknMopBSQEm
KQCIxpiwn293tZv5xXzJ+uSIEHxFuORsREGdeKyOAHjVqn8iBzr3ZQBJyyzSxg7OI+SVrGD3kwMK
OdqIj/BpjeB+3NR0iiMPK31ae6bOJ0KYRugumNOm04juwJAr30Sj2UgQkL+VB8nOAvojf7wNfLEi
OrkUGud8mIER/h+UMcHSwyv8OCoumQkoj7YUaPibAIMgXUkyhXsr8jHszVlMWBKGE6aF4UQw0L63
uw3wFYO5BYj10EkXBNYKXebOsRHaQY4dvmSFdcDhs9/5G1Q8Ac29TGEQQYhGBCoku5VFjJXBuN0m
6CnsyJPgWL9eMpZ6/jJKCzIpYdawVSjQcZbCJCbXaHXYYkg0ofRgUP/Z8OVHPHp5l8g8ZxQZLgUp
P6ZTE/hEuhc4uTC9VYKvagmsnIU+W3XlKMhl0HVxUjA4V0f7jGNAA9ubOztoTDUQxQUExEqN8z75
A43vgAEtj5lTFpb0RpOTgeldYDRppjkV0TGOfxgsivhm0kowodip1NnYaMttHk7Y5EFQqAaJdJqX
uojs/iXlRJE4bwZ44k88yM/qH5+cVe1wZEckHHdOSesTZHEaQGT4V7LlmUG87XYfOMpu5mYmQede
32wPeJ9E+Yykto4IgosH4dhD+haWxOgbExTOK/lw/4QwbSHPpG4ykHG+xRhQNd2EUgI7OePqhYLh
qtli+Ja23ElQ4678yxlurqk01/BBBaCHlHC8aSLAfa0/Phosm48QFG9X/9nV92RR8wiL8vmGl0dH
/u3SmLKrHzCJ4FQtePfYziK4k9lFggHP2q8VwAj+YWJaCVEYAOejOhHpfCWMsWbGu75mGWcmUd+R
GQOKbI/y7Xu8mK0dQ12Ebm4JJEAJuAAAApZBm61J4Q8mUwIf//6plgABSzzJ0ARYi4KJG0DSugN3
RGu+0IRFZhoZNLDwKCP/5XfLl/AkcrqkYqi5/YwhuqMk3f+I2ZbHGY6r042b77pq21TAdYyW0UCy
t2rOsE2OfdzueHCBfig4hI6eYmvYSS7/NWvpS7xyiov/whvzoNhdfy3foFPCEBIRqFfxbtepz3vv
QUbn+WFICJwtwQcsi9FOwiZoR1xuOf/blqP/Pt2WYtcUJkeWngNVIH44ftxEQHcfYXl04eCqcj4N
kzRCzNaaKZQhrFqea1WqXnuj9LG+36TltZIDKVlx/yMT6r9C0DCFp6OZd9VWg/YG0/GfmTYHlnR/
XegzNXz6PJgo+6cb/dIK5n0gMzKVwqwrD59O4jAiyxsfYSif6Xxh+fp1iv7LrR+JLLKvgcPjAKdY
FPK/ipKf+k55l9XijD21tI8MWQjegwdi7u74DfKR03CRnGjhxNfTc+Qpj4PkRyo47G7/UX28YxNm
JXC4fZMh/TfrD5lZ3E1bxPXXrC+loB9p+kP3ovp5QvT4jtPc+Bux17MwmdHwal0IU6NqdsVOKGTG
qwXeQScCx7WZnJIaFShGMBL3y7y1dqLnjABT0+Mf3vbW9lahZSVo8C+SCPAfwWlCNN4u1o/Q7J7X
j3/gu3R0ylSFytMVCMyqhsSrnT/RcVinxXF+poT2zAkniXnGBfRkDODwIJh0TckqD9p3Yrmr+jz2
FMIvGIAZqjPJOXBvP3acCUt9LPZmXZ2RnasL7chkszm+Rrgj8nsF1RMJRo2DfmE4BedbNvpKuJLK
9Duf2cpjstOKG3w/ra2JLYcldhIALDEWRbb+f9AvrTmOUhXCoGEWiEMr/VPEW7qtV18ByQNezG3g
fQBiwQAAA/Ntb292AAAAbG12aGQAAAAAAAAAAAAAAAAAAAPoAAAj8AABAAABAAAAAAAAAAAAAAAA
AQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAACAAADHXRyYWsAAABcdGtoZAAAAAMAAAAAAAAAAAAAAAEAAAAAAAAj8AAAAAAAAAAAAAAA
AAAAAAAAAQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAEAAAAACQAAAAkAAAAAAACRlZHRz
AAAAHGVsc3QAAAAAAAAAAQAAI/AAABAAAAEAAAAAApVtZGlhAAAAIG1kaGQAAAAAAAAAAAAAAAAA
ACgAAAFwAFXEAAAAAAAtaGRscgAAAAAAAAAAdmlkZQAAAAAAAAAAAAAAAFZpZGVvSGFuZGxlcgAA
AAJAbWluZgAAABR2bWhkAAAAAQAAAAAAAAAAAAAAJGRpbmYAAAAcZHJlZgAAAAAAAAABAAAADHVy
bCAAAAABAAACAHN0YmwAAAC4c3RzZAAAAAAAAAABAAAAqGF2YzEAAAAAAAAAAQAAAAAAAAAAAAAA
AAAAAAACQAJAAEgAAABIAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY
//8AAAA2YXZjQwFkABb/4QAZZ2QAFqzZQJASaEAAAAMAQAAAAwKDxYtlgAEABmjr48siwP34+AAA
AAAcdXVpZGtoQPJfJE/FujmlG88DI/MAAAAAAAAAGHN0dHMAAAAAAAAAAQAAAC4AAAgAAAAAFHN0
c3MAAAAAAAAAAQAAAAEAAAAYY3R0cwAAAAAAAAABAAAALgAAEAAAAAAcc3RzYwAAAAAAAAABAAAA
AQAAAC4AAAABAAAAzHN0c3oAAAAAAAAAAAAAAC4AADGDAAAS/QAAETUAABBtAAAOdAAAFGoAAA/y
AAAO0gAAD0IAAA1WAAANoAAAD3sAAA5SAAAO6AAAD8cAAA54AAAR3AAADfAAAAz5AAALrwAAErMA
AA66AAAM9gAADLYAAAyEAAAMDAAAC8cAAAy2AAAMQAAAC8MAAAu9AAALxQAAC/QAAAtaAAAQmAAA
DQEAAAqWAAALVgAACXMAAAcwAAAIvwAAB0IAAAcnAAAHgQAADJ4AAAKaAAAAFHN0Y28AAAAAAAAA
AQAAADAAAABidWR0YQAAAFptZXRhAAAAAAAAACFoZGxyAAAAAAAAAABtZGlyYXBwbAAAAAAAAAAA
AAAAAC1pbHN0AAAAJal0b28AAAAdZGF0YQAAAAEAAAAATGF2ZjU4LjQ1LjEwMA==
">
  Your browser does not support the video tag.
</video>
</center>



I'm not really sure how interpretable this is, but it is kind of mesmerizing.

Finally, we play 1,000 random games of standard Battleship using this strategy to understand the distributions of the number of turns required.


```python
N_GAME = 1_000
```


```python
def pickleable_play(args):
    i, ships = args

    return play(
        ships,
        ThompsonStrategy(all_ships,
                         rng=np.random.default_rng(SEED + i))
    )

with mp.Pool(mp.cpu_count()) as pool:
    ts_games = [game for game in tqdm(
        pool.imap_unordered(
            pickleable_play,
            zip(range(N_GAME),
                sample_ships(all_ships, N_GAME, rng=rng))
        ),
        total=N_GAME
    )]
```

    100%|██████████| 1000/1000 [15:32<00:00,  1.07it/s]



```python
ts_turns = np.array([game.turns for game in ts_games])
ts_turns_pmf = Pmf.from_seq(ts_turns)
```


```python
ts_turns_pmf.to_csv('./ts_turns_pmf.csv')
```


```python
ax = plot_turn_dist(std_random_pmf, kind='line', mean=True,
                    label="Random guessing")
plot_turn_dist(ts_turns_pmf, color='C1',
               mean=True, mean_kwargs={'c': 'C1'},
               label="Thompson sampling", ax=ax);
ax.axvline(extreme_ev, c='C2', ls='--',
           label="Extremely optimistic\nexpected value");
ax.axvline(optim_ev, c='C3', ls='--',
           label="Optimistic\nexpected value");

ax.xaxis.set_major_locator(IndexLocator(base=5, offset=-2));

ax.set_ylim(0, 0.0825);
make_pct_yaxis(ax);

ax.legend(loc='upper right', bbox_to_anchor=(0.825, 1));
ax.set_title("Standard Battleship");
```


<center>![png](/resources/battleship_bayes_files/battleship_bayes_238_0.png)</center>



```python
print(f"""
Extremely optimistic expected value = {extreme_ev:.2f}
Optimistic expected value = {optim_ev:.2f}
Thompson sampling expected value = {ts_turns_pmf.mean():.2f}
""")
```

    
    Extremely optimistic expected value = 40.18
    Optimistic expected value = 42.68
    Thompson sampling expected value = 45.89
    


It's very exciting to see that Thompson sampling is not too much less efficient (on average) than our (extremely) optimistic baseline expected values!

For fun, we visualize the simulated games with the fewest and most turns, to see what it looks like when we get very lucky or unlucky.


```python
min_ts_game = ts_games[(ts_turns == ts_turns.min()).argmax()]
max_ts_game = ts_games[(ts_turns == ts_turns.max()).argmax()]
```


```python
%%capture
min_ani = animate_boards(min_ts_game.turn_revealed)
max_ani = animate_boards(max_ts_game.turn_revealed)
```


```python
HTML(min_ani.to_html5_video())
```




<center>
<video width="576" height="576" controls autoplay loop>
  <source type="video/mp4" src="data:video/mp4;base64,AAAAIGZ0eXBNNFYgAAACAE00ViBpc29taXNvMmF2YzEAAAAIZnJlZQAALtNtZGF0AAACrgYF//+q
3EXpvebZSLeWLNgg2SPu73gyNjQgLSBjb3JlIDE2MSByMzAzME0gOGJkNmQyOCAtIEguMjY0L01Q
RUctNCBBVkMgY29kZWMgLSBDb3B5bGVmdCAyMDAzLTIwMjAgLSBodHRwOi8vd3d3LnZpZGVvbGFu
Lm9yZy94MjY0Lmh0bWwgLSBvcHRpb25zOiBjYWJhYz0xIHJlZj0zIGRlYmxvY2s9MTowOjAgYW5h
bHlzZT0weDM6MHgxMTMgbWU9aGV4IHN1Ym1lPTcgcHN5PTEgcHN5X3JkPTEuMDA6MC4wMCBtaXhl
ZF9yZWY9MSBtZV9yYW5nZT0xNiBjaHJvbWFfbWU9MSB0cmVsbGlzPTEgOHg4ZGN0PTEgY3FtPTAg
ZGVhZHpvbmU9MjEsMTEgZmFzdF9wc2tpcD0xIGNocm9tYV9xcF9vZmZzZXQ9LTIgdGhyZWFkcz02
IGxvb2thaGVhZF90aHJlYWRzPTEgc2xpY2VkX3RocmVhZHM9MCBucj0wIGRlY2ltYXRlPTEgaW50
ZXJsYWNlZD0wIGJsdXJheV9jb21wYXQ9MCBjb25zdHJhaW5lZF9pbnRyYT0wIGJmcmFtZXM9MyBi
X3B5cmFtaWQ9MiBiX2FkYXB0PTEgYl9iaWFzPTAgZGlyZWN0PTEgd2VpZ2h0Yj0xIG9wZW5fZ29w
PTAgd2VpZ2h0cD0yIGtleWludD0yNTAga2V5aW50X21pbj01IHNjZW5lY3V0PTQwIGludHJhX3Jl
ZnJlc2g9MCByY19sb29rYWhlYWQ9NDAgcmM9Y3JmIG1idHJlZT0xIGNyZj0yMy4wIHFjb21wPTAu
NjAgcXBtaW49MCBxcG1heD02OSBxcHN0ZXA9NCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAAS
O2WIhAAT//73sY+BTcgADZc6inof4RWx9JBRerHZoGTqAAADAAADAABOFqne+b9ctAjWAAAHoACZ
Byc9/EUZ3AAoA1yAjY2aIWsgS0VXFocH9xPJajdFAQgt5+76H1SkdMsUWwQmsqmTyBbj3DByB3ZW
C1al5iUrRusdG3mRRXT1j72tF2gK89bXWuYN5Ge6p6mAP3w/YzzMWeWY7835v19DJEa41SlTGEBY
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
">
  Your browser does not support the video tag.
</video>
</center>




```python
HTML(max_ani.to_html5_video())
```




<center>
<video width="576" height="576" controls autoplay loop>
  <source type="video/mp4" src="data:video/mp4;base64,AAAAIGZ0eXBNNFYgAAACAE00ViBpc29taXNvMmF2YzEAAAAIZnJlZQAAWd5tZGF0AAACrgYF//+q
3EXpvebZSLeWLNgg2SPu73gyNjQgLSBjb3JlIDE2MSByMzAzME0gOGJkNmQyOCAtIEguMjY0L01Q
RUctNCBBVkMgY29kZWMgLSBDb3B5bGVmdCAyMDAzLTIwMjAgLSBodHRwOi8vd3d3LnZpZGVvbGFu
Lm9yZy94MjY0Lmh0bWwgLSBvcHRpb25zOiBjYWJhYz0xIHJlZj0zIGRlYmxvY2s9MTowOjAgYW5h
bHlzZT0weDM6MHgxMTMgbWU9aGV4IHN1Ym1lPTcgcHN5PTEgcHN5X3JkPTEuMDA6MC4wMCBtaXhl
ZF9yZWY9MSBtZV9yYW5nZT0xNiBjaHJvbWFfbWU9MSB0cmVsbGlzPTEgOHg4ZGN0PTEgY3FtPTAg
ZGVhZHpvbmU9MjEsMTEgZmFzdF9wc2tpcD0xIGNocm9tYV9xcF9vZmZzZXQ9LTIgdGhyZWFkcz02
IGxvb2thaGVhZF90aHJlYWRzPTEgc2xpY2VkX3RocmVhZHM9MCBucj0wIGRlY2ltYXRlPTEgaW50
ZXJsYWNlZD0wIGJsdXJheV9jb21wYXQ9MCBjb25zdHJhaW5lZF9pbnRyYT0wIGJmcmFtZXM9MyBi
X3B5cmFtaWQ9MiBiX2FkYXB0PTEgYl9iaWFzPTAgZGlyZWN0PTEgd2VpZ2h0Yj0xIG9wZW5fZ29w
PTAgd2VpZ2h0cD0yIGtleWludD0yNTAga2V5aW50X21pbj01IHNjZW5lY3V0PTQwIGludHJhX3Jl
ZnJlc2g9MCByY19sb29rYWhlYWQ9NDAgcmM9Y3JmIG1idHJlZT0xIGNyZj0yMy4wIHFjb21wPTAu
NjAgcXBtaW49MCBxcG1heD02OSBxcHN0ZXA9NCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAAT
BGWIhAAU//73x0/Apuj5ZsudRT0hMIrY+kgovVjs0DJ1AAADAAADAAAnC1TyJ9+uWgRrAAADA9AA
TIOTof+QgP/wAKAR8JeaTiaWRl1Y5/CnPVXYItmAZwzyJdiYfgtmtHL3qIbgkoRb3ejEN4QUHfiY
5xtap8TSzdmc+r1elFMH0FMeRBdxhxcRrDZhFpLNSpXmBB6wu8jfx0UvuFSipvMmrZiMcTbkpVom
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
ACgAAAAAAQAAEAAAAAABAAAAAAAAAAEAAAgAAAAAAQAAKAAAAAABAAAQAAAAAAEAAAAAAAAAAQAA
CAAAAAABAAAoAAAAAAEAABAAAAAAAQAAAAAAAAABAAAIAAAAAAEAABgAAAAAAQAACAAAAAABAAAQ
AAAAAAEAACgAAAAAAQAAEAAAAAABAAAAAAAAAAEAAAgAAAAAAQAAKAAAAAABAAAQAAAAAAEAAAAA
AAAAAQAACAAAAAABAAAoAAAAAAEAABAAAAAAAQAAAAAAAAABAAAIAAAAAAEAABAAAAAAAQAAGAAA
AAABAAAIAAAAAAEAABAAAAAAAQAAKAAAAAABAAAQAAAAAAEAAAAAAAAAAQAACAAAAAABAAAoAAAA
AAEAABAAAAAAAQAAAAAAAAABAAAIAAAAAAEAACgAAAAAAQAAEAAAAAABAAAAAAAAAAEAAAgAAAAA
AQAAEAAAAAABAAAoAAAAAAEAABAAAAAAAQAAAAAAAAABAAAIAAAAAAEAABgAAAAAAQAACAAAAAAB
AAAoAAAAAAEAABAAAAAAAQAAAAAAAAABAAAIAAAAAAEAACgAAAAAAQAAEAAAAAABAAAAAAAAAAEA
AAgAAAAAAQAAKAAAAAABAAAQAAAAAAEAAAAAAAAAAQAACAAAAAABAAAoAAAAAAEAABAAAAAAAQAA
AAAAAAABAAAIAAAAAAEAACAAAAAAAgAACAAAAAABAAAQAAAAABxzdHNjAAAAAAAAAAEAAAABAAAA
RwAAAAEAAAEwc3RzegAAAAAAAAAAAAAARwAAFboAAAR5AAAAdQAAAEAAAABDAAADawAAAFIAAAAy
AAAALgAAA4gAAABQAAAANwAAADsAAAGrAAAANQAAAPQAAALMAAAASwAAAGMAAAA0AAADlwAAAFQA
AAA2AAAANwAAAv8AAABdAAAAMgAAACsAAAGGAAAByAAAACkAAAEZAAAD0gAAAGMAAAAsAAAAMQAA
Aw4AAABIAAAALAAAACkAAANbAAAASgAAAC4AAAAtAAABSAAAA0QAAAA8AAAAMgAAACsAAAHTAAAA
KgAAAqgAAABEAAAAJwAAACoAAAK3AAAAdwAAACwAAAAtAAACawAAAGcAAAAtAAAASgAAAhAAAABb
AAAANQAAADAAAAFvAAAATwAAAE4AAADZAAAAFHN0Y28AAAAAAAAAAQAAADAAAABidWR0YQAAAFpt
ZXRhAAAAAAAAACFoZGxyAAAAAAAAAABtZGlyYXBwbAAAAAAAAAAAAAAAAC1pbHN0AAAAJal0b28A
AAAdZGF0YQAAAAEAAAAATGF2ZjU4LjQ1LjEwMA==
">
  Your browser does not support the video tag.
</video>
</center>



Interestingly, we see that the fastest game  three ships adjacent to each other. We likely got a bit of a speedup from finding two of those while attempting to sink the first one hit.

These simulated games naturally invite the question of whether Thompson sampling is optimal for standard Battleship (in the appropriate sense) as we have implemented it.  I strongly suspect that it is near-optimal, but not quite optimal.  Likely Thompson sampling combined with a few simple rules (like a restricted initial search grid) will produce slightly better (and perhaps even optimal) results.  Searching the internet for prior work on near optimal Battleship strategies yields a [few](https://slate.com/culture/2012/05/how-to-win-at-battleship.html) [articles](https://www.datagenetics.com/blog/december32011/) about strategies that take, on average, 42-44 guesses to complete the game.  Our simple Thompson sampling approach is quite close to that range, and with a few heuristics bolted on would likely be able to shave off a few turns to reach that level of performance.  We can also improve the performance of Thompson sampling at the cost of computational time by increasing the `block_size` used for sampling, resulting in a more accurate approximation to the posterior distribution.  Another interesting feature of the strategies in those articles is that they try to balance searching (exploration) and sinking known ships (exploitation) with rules, which we do not have to do explicitly when using Thompson sampling.

Two other interesting extensions of this work would be to change the process of randomly generating ships (which is equivalent to changing the prior used in ABC) and to explore which strategies for initially placing ships take the longest for Thompson sampling to solve.

This framework is generalizable to [variations](https://en.wikipedia.org/wiki/Battleship_(game)#Variations) of Battleship such as salvo or or limited lying is allowed, and we may explore those generalizations in future posts.

Many thanks to [Kiril Zvezdarov](https://kirilzvezdarov.com/about.html) and [Meenal Jhajharia](https://mjhajharia.com/) for providing helpful feedback on early drafts of this post.

This post is available as a Jupyter notebook [here](https://nbviewer.jupyter.org/gist/AustinRochford/6e21325d33b2be35cdf835f2ddaa9f3b).
