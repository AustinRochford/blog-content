---
title: Dependent Density Regression with PyMC3
tags: PyMC3, Dirichlet Processes, Bayesian Nonparametric Statistics, Bayesian Statistics, Nonparametric Statistics
---

<style>
.dataframe * {border-color: #c0c0c0 !important;}
.dataframe th{background: #eee;}
.dataframe td{
    background: #fff;
    text-align: right; 
    min-width:5em;
}

/* Format summary rows */
.dataframe-summary-row tr:last-child,
.dataframe-summary-col td:last-child{
background: #eee;
    font-weight: 500;
}
</style>

My last [post](http://austinrochford.com/posts/2016-02-25-density-estimation-dpm.html) showed how to use Dirichlet processes and [`pymc3`](http://pymc-devs.github.io/pymc3/) to perform Bayesian nonparametric density estimation.  This post expands on the previous one, illustrating dependent density regression with `pymc3`.

Just as Dirichlet process mixtures can be thought of as infinite mixture models that select the number of active components as part of inference, dependent density regression can be thought of as infinite [mixtures of experts](https://en.wikipedia.org/wiki/Committee_machine) that select the active experts as part of inference.  Their flexibility and modularity make them powerful tools for performing nonparametric Bayesian Data analysis.


```python
%matplotlib inline
from IPython.display import HTML
```


```python
from matplotlib import animation as ani, pyplot as plt
import numpy as np
import pandas as pd
import pymc3 as pm
import seaborn as sns
from theano import shared, tensor as tt
```


```python
plt.rc('animation', writer='avconv')
blue, *_ = sns.color_palette()
```


```python
SEED = 972915 # from random.org; for reproducibility
np.random.seed(SEED)
```

Throughout this post, we will use the LIDAR data set from Larry Wasserman's excellent book, [_All of Nonparametric Statistics_](http://www.stat.cmu.edu/~larry/all-of-nonpar/).  We standardize the data set to improve the rate of convergence of our samples.


```python
DATA_URI = 'http://www.stat.cmu.edu/~larry/all-of-nonpar/=data/lidar.dat'

def standardize(x):
    return (x - x.mean()) / x.std()

df = (pd.read_csv(DATA_URI, sep=' *', engine='python')
        .assign(std_range=lambda df: standardize(df.range),
                std_logratio=lambda df: standardize(df.logratio)))
```

```python
df.head()
```

<center><div>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th></th>
<th>range</th>
<th>logratio</th>
<th>std_logratio</th>
<th>std_range</th>
</tr>
</thead>
<tbody>
<tr>
<th>0</th>
<td>390</td>
<td>-0.050356</td>
<td>0.852467</td>
<td>-1.717725</td>
</tr>
<tr>
<th>1</th>
<td>391</td>
<td>-0.060097</td>
<td>0.817981</td>
<td>-1.707299</td>
</tr>
<tr>
<th>2</th>
<td>393</td>
<td>-0.041901</td>
<td>0.882398</td>
<td>-1.686447</td>
</tr>
<tr>
<th>3</th>
<td>394</td>
<td>-0.050985</td>
<td>0.850240</td>
<td>-1.676020</td>
</tr>
<tr>
<th>4</th>
<td>396</td>
<td>-0.059913</td>
<td>0.818631</td>
<td>-1.655168</td>
</tr>
</tbody>
</table>
</div></center>

We plot the LIDAR data below.


```python
fig, ax = plt.subplots(figsize=(8, 6))

ax.scatter(df.std_range, df.std_logratio,
           c=blue);

ax.set_xticklabels([]);
ax.set_xlabel("Standardized range");

ax.set_yticklabels([]);
ax.set_ylabel("Standardized log ratio");
```


<center>![png](/resources/ddp/Dependent%20Density%20Regression%20with%20PyMC3_10_0.png)</center>


This data set has a two interesting properties that make it useful for illustrating dependent density regression.

1. The relationship between range and log ratio is nonlinear, but has locally linear components.
2. The observation noise is [heteroskedastic](https://en.wikipedia.org/wiki/Heteroscedasticity); that is, the magnitude of the variance varies with the range.

The intuitive idea behind dependent density regression is to reduce the problem to many (related) density estimates, conditioned on fixed values of the predictors.  The following animation illustrates this intuition.


```python
fig, (scatter_ax, hist_ax) = plt.subplots(ncols=2, figsize=(16, 6))

scatter_ax.scatter(df.std_range, df.std_logratio,
                   c=blue, zorder=2);

scatter_ax.set_xticklabels([]);
scatter_ax.set_xlabel("Standardized range");

scatter_ax.set_yticklabels([]);
scatter_ax.set_ylabel("Standardized log ratio");

bins = np.linspace(df.std_range.min(), df.std_range.max(), 25)

hist_ax.hist(df.std_logratio, bins=bins,
             color='k', lw=0, alpha=0.25,
             label="All data");

hist_ax.set_xticklabels([]);
hist_ax.set_xlabel("Standardized log ratio");

hist_ax.set_yticklabels([]);
hist_ax.set_ylabel("Frequency");

hist_ax.legend(loc=2);

endpoints = np.linspace(1.05 * df.std_range.min(), 1.05 * df.std_range.max(), 15)

frame_artists = []

for low, high in zip(endpoints[:-1], endpoints[2:]):
    interval = scatter_ax.axvspan(low, high,
                                  color='k', alpha=0.5, lw=0, zorder=1);
    *_, bars = hist_ax.hist(df[df.std_range.between(low, high)].std_logratio,
                            bins=bins,
                            color='k', lw=0, alpha=0.5);
    
    frame_artists.append((interval,) + tuple(bars))
    
animation = ani.ArtistAnimation(fig, frame_artists,
                                interval=500, repeat_delay=3000, blit=True)
plt.close(); # prevent the intermediate figure from showing
```


```python
HTML(animation.to_html5_video())
```




<center><video width="1152.0" height="432.0" controls autoplay loop>
<source type="video/mp4" src="data:video/mp4;base64,AAAAHGZ0eXBNNFYgAAACAGlzb21pc28yYXZjMQAAAAhmcmVlAACJGm1kYXQAAAKtBgX//6ncRem9
5tlIt5Ys2CDZI+7veDI2NCAtIGNvcmUgMTQyIHIyNDMxIGE1ODMxYWEgLSBILjI2NC9NUEVHLTQg
QVZDIGNvZGVjIC0gQ29weWxlZnQgMjAwMy0yMDE0IC0gaHR0cDovL3d3dy52aWRlb2xhbi5vcmcv
eDI2NC5odG1sIC0gb3B0aW9uczogY2FiYWM9MSByZWY9MyBkZWJsb2NrPTE6MDowIGFuYWx5c2U9
MHgzOjB4MTEzIG1lPWhleCBzdWJtZT03IHBzeT0xIHBzeV9yZD0xLjAwOjAuMDAgbWl4ZWRfcmVm
PTEgbWVfcmFuZ2U9MTYgY2hyb21hX21lPTEgdHJlbGxpcz0xIDh4OGRjdD0xIGNxbT0wIGRlYWR6
b25lPTIxLDExIGZhc3RfcHNraXA9MSBjaHJvbWFfcXBfb2Zmc2V0PS0yIHRocmVhZHM9NiBsb29r
YWhlYWRfdGhyZWFkcz0xIHNsaWNlZF90aHJlYWRzPTAgbnI9MCBkZWNpbWF0ZT0xIGludGVybGFj
ZWQ9MCBibHVyYXlfY29tcGF0PTAgY29uc3RyYWluZWRfaW50cmE9MCBiZnJhbWVzPTMgYl9weXJh
bWlkPTIgYl9hZGFwdD0xIGJfYmlhcz0wIGRpcmVjdD0xIHdlaWdodGI9MSBvcGVuX2dvcD0wIHdl
aWdodHA9MiBrZXlpbnQ9MjUwIGtleWludF9taW49MiBzY2VuZWN1dD00MCBpbnRyYV9yZWZyZXNo
PTAgcmNfbG9va2FoZWFkPTQwIHJjPWNyZiBtYnRyZWU9MSBjcmY9MjMuMCBxY29tcD0wLjYwIHFw
bWluPTAgcXBtYXg9NjkgcXBzdGVwPTQgaXBfcmF0aW89MS40MCBhcT0xOjEuMDAAgAAARYZliIQA
Fv/+99M/zLLr9zm146j3op4mX0N1JQGblsTtOoAAAAMAAAMAAAMAAAVxrHCOXEcOH+g8AAADAAAf
tmP/5HfCYD2/am4z+cOi0BO5NXHTmyxvtuMETV0y5mpPX9kBp1jyjRbSjYoZNLzrgb8Goz3DHr8f
Dj7VXyKAIKKpoxj3IFVoyR0Txq6MryDF4qh79mNHRsmm3OiNGtCiiRu+umfD6+7m+YL6wCyGoSmR
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
b28AAAAaZGF0YQAAAAEAAAAATGF2ZjU2LjEuMA==
">
Your browser does not support the video tag.
</video></center>



As we slice the data with a window sliding along the x-axis in the left plot, the empirical distribution of the y-values of the points in the window varies in the right plot.  An important aspect of this approach is that the density estimates that correspond to close values of the predictor are similar.

In the previous post, we saw that a Dirichlet process estimates a probability density as a mixture model with infinitely many components.  In the case of normal component distributions,

$$
y \sim \sum_{i = 1}^{\infty} w_i \cdot N(\mu_i, \tau_i^{-1}),
$$

where the mixture weights, $w_1, w_2, \ldots$, are generated by a [stick-breaking process](https://en.wikipedia.org/wiki/Dirichlet_process#The_stick-breaking_process).

Dependent density regression generalizes this representation of the Dirichlet process mixture model by allowing the mixture weights and component means to vary conditioned on the value of the predictor, $x$.  That is,

$$
y\ |\ x \sim \sum_{i = 1}^{\infty} w_i\ |\ x \cdot N(\mu_i\ |\ x, \tau_i^{-1}).
$$

In this post, we will follow Chapter 23 of [_Bayesian Data Analysis_](http://www.stat.columbia.edu/~gelman/book/) and use a probit stick-breaking process to determine the conditional mixture weights, $w_i\ |\ x$.  The probit stick-breaking process starts by defining

$$
v_i\ |\ x = \Phi(\alpha_i + \beta_i x),
$$

where $\Phi$ is the cumulative distribution function of the standard normal distribution.  We then obtain $w_i\ |\ x$ by applying the stick breaking process to $v_i\ |\ x$.  That is,

$$
w_i\ |\ x = v_i\ |\ x \cdot \prod_{j = 1}^{i - 1} (1 - v_j\ |\ x).
$$

For the LIDAR data set, we use independent normal priors $\alpha_i \sim N(0, 5^2)$ and $\beta_i \sim N(0, 5^2)$.  We now express this this model for the conditional mixture weights using `pymc3`.


```python
def norm_cdf(z):
    return 0.5 * (1 + tt.erf(z / np.sqrt(2)))

def stick_breaking(v):
    return v * tt.concatenate([tt.ones_like(v[:, :1]),
                               tt.extra_ops.cumprod(1 - v, axis=1)[:, :-1]],
                              axis=1)
```


```python
N, _ = df.shape
K = 20

std_range = df.std_range.values[:, np.newaxis]
std_logratio = df.std_logratio.values[:, np.newaxis]

x_lidar = shared(std_range, broadcastable=(False, True))

with pm.Model() as model:
    alpha = pm.Normal('alpha', 0., 5., shape=K)
    beta = pm.Normal('beta', 0., 5., shape=K)
    v = norm_cdf(alpha + beta * x_lidar)
    w = pm.Deterministic('w', stick_breaking(v))
```

We have defined `x_lidar` as a `theano` [`shared`](http://deeplearning.net/software/theano/library/compile/shared.html) variable in order to use `pymc3`'s posterior prediction capabilities later.

While the dependent density regression model theoretically has infinitely many components, we must truncate the model to finitely many components (in this case, twenty) in order to express it using `pymc3`.  After sampling from the model, we will verify that truncation did not unduly influence our results.

Since the LIDAR data seems to have several linear components, we use the linear models

$$
\begin{align*}
\mu_i\ |\ x
    & \sim \gamma_i + \delta_i x \\
\gamma_i
    & \sim N(0, 10^2) \\
\delta_i
    & \sim N(0, 10^2)
\end{align*}
$$

for the conditional component means.


```python
with model:
    gamma = pm.Normal('gamma', 0., 10., shape=K)
    delta = pm.Normal('delta', 0., 10., shape=K)
    mu = pm.Deterministic('mu', gamma + delta * x_lidar)
```

Finally, we place the prior $\tau_i \sim \textrm{Gamma}(1, 1)$ on the component precisions.


```python
with model:
    tau = pm.Gamma('tau', 1., 1., shape=K)
    obs = pm.NormalMixture('obs', w, mu, tau=tau, observed=std_logratio)
```

We now draw sample from the dependent density regression model.


```python
SAMPLES = 20000
BURN = 10000
THIN = 10

with model:
    step = pm.Metropolis()
    trace_ = pm.sample(SAMPLES, step, random_seed=SEED)
    
trace = trace_[BURN::THIN]
```

    100%|██████████| 20000/20000 [01:30<00:00, 204.48it/s]


To verify that truncation did not unduly influence our results, we plot the largest posterior expected mixture weight for each component.  (In this model, each point has a mixture weight for each component, so we plot the maximum mixture weight for each component across all data points in order to judge if the component exerts any influence on the posterior.)


```python
fig, ax = plt.subplots(figsize=(8, 6))

ax.bar(np.arange(K) + 1 - 0.4,
       trace['w'].mean(axis=0).max(axis=0));

ax.set_xlim(1 - 0.5, K + 0.5);
ax.set_xlabel('Mixture component');

ax.set_ylabel('Largest posterior expected\nmixture weight');
```


<center>![png](/resources/ddp/Dependent%20Density%20Regression%20with%20PyMC3_24_0.png)</center>


Since only three mixture components have appreciable posterior expected weight for any data point, we can be fairly certain that truncation did not unduly influence our results.  (If most components had appreciable posterior expected weight, truncation may have influenced the results, and we would have increased the number of components and sampled again.)

Visually, it is reasonable that the LIDAR data has three linear components, so these posterior expected weights seem to have identified the structure of the data well.  We now sample from the posterior predictive distribution to get a better understand the model's performance.


```python
PP_SAMPLES = 5000

lidar_pp_x = np.linspace(std_range.min() - 0.05, std_range.max() + 0.05, 100)
x_lidar.set_value(lidar_pp_x[:, np.newaxis])

with model:
    pp_trace = pm.sample_ppc(trace, PP_SAMPLES, random_seed=SEED)
```

    100%|██████████| 5000/5000 [01:18<00:00, 66.54it/s]


Below we plot the posterior expected value and the 95% posterior credible interval.


```python
fig, ax = plt.subplots()

ax.scatter(df.std_range, df.std_logratio,
           c=blue, zorder=10,
           label=None);

low, high = np.percentile(pp_trace['obs'], [2.5, 97.5], axis=0)
ax.fill_between(lidar_pp_x, low, high,
                color='k', alpha=0.35, zorder=5,
                label='95% posterior credible interval');

ax.plot(lidar_pp_x, pp_trace['obs'].mean(axis=0),
        c='k', zorder=6,
        label='Posterior expected value');

ax.set_xticklabels([]);
ax.set_xlabel('Standardized range');

ax.set_yticklabels([]);
ax.set_ylabel('Standardized log ratio');


ax.legend(loc=1);
ax.set_title('LIDAR Data');
```


<center>![png](/resources/ddp/Dependent%20Density%20Regression%20with%20PyMC3_28_0.png)</center>


The model has fit the linear components of the data well, and also accomodated its heteroskedasticity.  This flexibility, along with the ability to modularly specify the conditional mixture weights and conditional component densities, makes dependent density regression an extremely useful nonparametric Bayesian model.

To learn more about depdendent density regression and related models, consult [_Bayesian Data Analysis_](http://www.stat.columbia.edu/~gelman/book/), [_Bayesian Nonparametric Data Analysis_](http://www.springer.com/us/book/9783319189673), or [_Bayesian Nonparametrics_](https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=bayesian+nonparametrics+book).

This post is available as a Jupyter notebook [here](https://nbviewer.jupyter.org/gist/AustinRochford/0d6926e9953e8b8093a110863fc0487f).

